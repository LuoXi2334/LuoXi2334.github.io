<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>重载</title>
      <link href="/2023/06/14/2023/June/2/"/>
      <url>/2023/06/14/2023/June/2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h1><p>在C++中重载是<strong>对已有的运算符重新进行定义，赋予其另一种功能</strong>。比如对于不同的数据类型，像一个类中，我们想要用运算符进行两个对象的成员属性的加减操作就必须进行运算符的重载。</p><p><strong>运算符的重载包括以下几种：</strong></p><p>1、加号运算符重载</p><p>2、左移运算符重载</p><p>3、递增运算符重载</p><p>4、赋值运算符重载</p><p>5、关于运算符重载</p><p>6、函数调用运算符重载</p><h2 id="（1）加号运算符重载"><a href="#（1）加号运算符重载" class="headerlink" title="（1）加号运算符重载"></a>（1）加号运算符重载</h2><p><strong>作用：</strong>实现两个自定义数据类型相加的操作</p><p>我们通常用的加号运算符都是实现两个内置数据类型的运算</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> c = a + b;</span><br></pre></td></tr></table></figure><p>像上面编译器可以通过加号运算符得到c的值为15。</p><p>假如有一个<code>Person</code>的类，类中有成员属性<code>int m_age</code>,我们通过上面的运算能实现对应的功能吗？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">18</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">Person p3 = p1 + p2;</span><br></pre></td></tr></table></figure><p>此时编译器可能会对你说：”我不到啊！“。</p><p>因为我们没有告诉编译器应该如何去进行运算！</p><p>其实对于上面这个功能的实现的话，我们可以写一个类内的<code>PersonAddAge</code>的成员函数，然后返回值为一个新的对象</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Person <span class="title">PersonAddAge</span><span class="params">(Person &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Person temp;</span><br><span class="line">    temp.m_age = <span class="keyword">this</span>-&gt;m_age + p.m_age;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面代码的实现之后，我们就可以实现对两个对象中的成员属性进行相加的操作。</p><p>其实在C++中如果我们要实现<code>p1 + p2</code>同等于上面成员函数的功能很简单，只需要用一个通用名称<code>operator+</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Person <span class="keyword">operator</span>+(person &amp;p)</span><br><span class="line">&#123;</span><br><span class="line">    Person temp;</span><br><span class="line">    temp.m_age = <span class="keyword">this</span>-&gt;m_age + p.m_age;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们就做到了通过<strong>成员函数重载加号</strong>。</p><p>如果我们要实现通过<strong>全局函数重载加号</strong>，又该如何去做呢？</p><p>其实这个实现就和上面差不多，就我们写一个类外的全局函数来实现以上的功能，然后再将函数名替换成<code>operator+</code>,如以下的代码。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原函数</span></span><br><span class="line"><span class="function">Person <span class="title">PersonAddAge</span><span class="params">(Person &amp;p1, Person &amp;p2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Person temp;</span><br><span class="line">    temp.m_age = p1.m_age + p2.m_age;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重载后</span></span><br><span class="line">Person <span class="keyword">operator</span>+(Person &amp;p1, Person &amp;p2)</span><br><span class="line">&#123;</span><br><span class="line">    Person temp;</span><br><span class="line">    temp.m_age = p1.m_age + p2.m_age;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实对于成员函数重载的本质就是对于以下内容的简化</p><p><code>Person p3 = p1.opeartor+(p2);</code> 同等于 <code>Person p3 = p1 + p2;</code></p><p>通过上面加号的举例，其实后面减号，乘号，除号都类似，实现步骤都一模一样。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 类和对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>友元</title>
      <link href="/2023/06/01/2023/June/1/"/>
      <url>/2023/06/01/2023/June/1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h1><p>有这么一个例子，如果有一个客人来到你家，首先你会叫他到客厅坐坐，而此时的客厅其实相当于一个类中public权限的一个成员。但是，如果这个客人是你的好朋友或者是你喜欢的人，你会允许他们进你的卧室，而此时的卧室相当于一个类中的private权限的一个成员。</p><p>在C++中，如果我们想要让一些<code>类外特殊的一些函数或者类</code>进行访问，此时就要用到<code>友元</code>的技术。</p><p><strong>功能</strong>：能让一个函数或者类访问另一个类中的私有成员</p><p><strong>关键字</strong>：friend</p><p><strong>实现</strong>：</p><p>1、全局函数做友元</p><p>2、类做友元</p><p>3、成员函数做友元</p><h2 id="（1）全局函数做友元"><a href="#（1）全局函数做友元" class="headerlink" title="（1）全局函数做友元"></a>（1）全局函数做友元</h2><p>全局函数做友元的操作很简单，我们根据上面的例子来写个代码就能很好的理解了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Building</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 类中将全局函数GoodGuy这个函数添加为一个友元</span></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">GoodGuy</span><span class="params">(Building *bu)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 利用初始化列表对类中的属性进行初始化</span></span><br><span class="line">    <span class="built_in">Building</span>() : <span class="built_in">sittingroom</span>(<span class="string">&quot;客厅&quot;</span>), <span class="built_in">bedroom</span>(<span class="string">&quot;卧室&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    string sittingroom;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    string bedroom;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">GoodGuy</span><span class="params">(Building *bu)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;你的好基友正在访问你的&quot;</span> &lt;&lt; bu-&gt;sittingroom &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;你的好基友正在访问你的&quot;</span> &lt;&lt; bu-&gt;bedroom &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Building *bu = <span class="keyword">new</span> Building;</span><br><span class="line">    <span class="built_in">GoodGuy</span>(bu);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于上面的例子就是全局函数中对friend关键字的利用，就是把函数出去代码块的内容全部复制，然后在类中public作用域上面写上关键字frined然后再把复制内容粘贴上去就可以实现让全局函数访问类中的私有属性了。</p><h2 id="（2）类做友元"><a href="#（2）类做友元" class="headerlink" title="（2）类做友元"></a>（2）类做友元</h2><p>后面其他做友元的方式和全局函数做友元的方法差不多，下面提供类做友元的例子</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 告诉编译器别着急报错，building类后面再写</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Building</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Goodguy</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 类内声明</span></span><br><span class="line">    <span class="built_in">Goodguy</span>();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">visit</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    Building *bu;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Building</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 类中将Goodguy这个类添加为一个友元</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">Goodguy</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 利用初始化列表对类中的属性进行初始化</span></span><br><span class="line">    <span class="built_in">Building</span>() : <span class="built_in">sittingroom</span>(<span class="string">&quot;客厅&quot;</span>), <span class="built_in">bedroom</span>(<span class="string">&quot;卧室&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    string sittingroom;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    string bedroom;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类外初始化</span></span><br><span class="line">Goodguy::<span class="built_in">Goodguy</span>() : <span class="built_in">bu</span>(<span class="keyword">new</span> Building) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Goodguy::visit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;你的好基友正在访问你的&quot;</span> &lt;&lt; bu-&gt;sittingroom &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;你的好基友正在访问你的&quot;</span> &lt;&lt; bu-&gt;bedroom &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Goodguy gg;</span><br><span class="line">    gg.<span class="built_in">visit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码可能看不出来和全局函数做友元有什么差别，但是有一点几定要注意！！！</p><p>1、<strong>就是如果Building类在后面进行定义的话也就是做友元的那个类之后，一定要先进行声明！</strong></p><p>2、<strong>如果要通过前面类的成员访问后面类的成员一定要在后面类之后进行类内声明类外初始化！</strong></p><h2 id="（3）成员函数做友元"><a href="#（3）成员函数做友元" class="headerlink" title="（3）成员函数做友元"></a>（3）成员函数做友元</h2><p>如果我们想要类中其中一个成员函数做为友元的话方法类似，而且和类做友元一样是要注意那两点</p><p>其实对于类做友元只需要改一处地方就行</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//friend class Goodguy;</span></span><br><span class="line"><span class="comment">//改为</span></span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">Goodguy::visit</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 类和对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对象特性</title>
      <link href="/2023/02/08/2023/Feb/2/"/>
      <url>/2023/02/08/2023/Feb/2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="对象特性"><a href="#对象特性" class="headerlink" title="对象特性"></a>对象特性</h1><h3 id="（1）对象的初始化和清理"><a href="#（1）对象的初始化和清理" class="headerlink" title="（1）对象的初始化和清理"></a>（1）对象的初始化和清理</h3><p>对于对象的<code>初始化</code>和<code>清理</code>是十分重要的安全问题。</p><p>一个对象或者变量没有初始化状态，对其使用后果是未知的。</p><p>同样的使用完一个对象或者变量，没有及时清理掉，也会造成一定的安全问题。</p><p>C++利用了构造函数和析构函数可以解决上述的问题，这两个函数如果我们不调用编译器将会自动调用，如果<code>我们不提供构造和析构，编译器会提供的构造函数和析构函数是空实现</code>。</p><h3 id="（2）构造函数和析构函数"><a href="#（2）构造函数和析构函数" class="headerlink" title="（2）构造函数和析构函数"></a>（2）构造函数和析构函数</h3><p><strong>构造函数：</strong>主要作用在于创建对象时为对象的<code>成员属性赋值</code>，构造函数由编译器自动调用，无需手动调用。</p><p><strong>析构函数：</strong>主要作用在于对象<code>销毁前</code>系统自动调用，执行一些<code>清理工作</code>。</p><p><strong>构造函数语法：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类名()&#123;&#125;</span><br></pre></td></tr></table></figure><p>1、构造函数，没有返回值也不写void</p><p>2、<code>函数名称与类名相同</code></p><p>3、<code>构造函数可以带参数</code>，因此<code>可以发生重载</code></p><p>4、程序在<code>调用对象</code>时会<code>自动调用构造</code>，无须手动调用，而且<code>只会调用一次</code>。</p><p><strong>析构函数语法：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~类名()&#123;&#125;</span><br></pre></td></tr></table></figure><p>1、析构函数，没有返回值也不写void</p><p>2、函数名称与类名相同，<code>在名称前能加上符号~</code></p><p>3、<code>析构函数不可以有参数</code>，因此<code>不可以发生重载</code></p><p>4、程序在<code>对象销毁</code>前会<code>自动调用析构</code>，无须手动调用而且只<code>会调用一次</code>。</p><p>比如以下的代码将展示构造函数和析构函数的共功能以及它们被调用的情况。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="comment">// 对象实例化之后就会调用</span></span><br><span class="line">    <span class="built_in">Person</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;person 的构造函数的调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 析构函数</span></span><br><span class="line">    <span class="comment">// 对象被销毁之后就会被调用</span></span><br><span class="line">    ~<span class="built_in">Person</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Person 的析构函数的调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实例化一个对象</span></span><br><span class="line">    Person p;</span><br><span class="line">    <span class="comment">// 先让它不被释放</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test01</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于以上的代码输出结果如下所示</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202302112037581.png" alt="image-20230211203705436"></p><p>如果我们不结束那个循环此时的话析构函数是无法被调用的。因为实例化的对象是在栈上的数据，函数不结束是不会被释放的。如果我们注释掉那个循环，此时析构函数就会被调用，如下所示。</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202302112040493.png" alt="image-20230211204028426"></p><h3 id="（3）构造函数的分类和调用"><a href="#（3）构造函数的分类和调用" class="headerlink" title="（3）构造函数的分类和调用"></a>（3）构造函数的分类和调用</h3><p><strong>两种分类方式：</strong></p><p>按参数分为：有参构造和无参构造</p><p>按类型分为：普通构造和拷贝构造</p><p><strong>三种调用方式：</strong></p><p>括号法</p><p>显示法</p><p>隐式转换法</p><p>以下代码来展示不同类型的构造函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 构造函数的分类和调用</span></span><br><span class="line">    <span class="comment">// 分类</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 按参数分类</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无参构造(默认构造)</span></span><br><span class="line">    <span class="built_in">Person</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Person 的无参构造的调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 有参构造</span></span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">int</span> a)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Peroson 的有参构造的调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 按类型分类</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上面的构造函数的方式被称为普通构造。</span></span><br><span class="line">    <span class="comment">// 拷贝构造函数</span></span><br><span class="line">    <span class="comment">// 拷贝构造函数本体（引用）不能被修改（const）！</span></span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">const</span> Person &amp;p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 将传入的人的身上的所有属性，拷贝到我身上。</span></span><br><span class="line">        age = p.age;</span><br><span class="line"></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Person 的拷贝函数的调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Person</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Perosn 的析构函数的调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 括号法</span></span><br><span class="line">    Person p1;     <span class="comment">// 默认构造函数的调用</span></span><br><span class="line">    <span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">10</span>)</span></span>; <span class="comment">// 有参函数的调用</span></span><br><span class="line">    <span class="function">Person <span class="title">p3</span><span class="params">(p2)</span></span>; <span class="comment">// 拷贝构造函数调用</span></span><br><span class="line">    <span class="comment">// 注：调用默认构造函数时候，不要加()如Person p()，这样编译器会认为其为函数声明;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 显示法</span></span><br><span class="line">    Person p1;</span><br><span class="line">    Person p2 = <span class="built_in">Person</span>(<span class="number">10</span>); <span class="comment">// Person（10）此为匿名对象</span></span><br><span class="line">    Person p3 = <span class="built_in">Person</span>(p2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 匿名对象</span></span><br><span class="line">    <span class="comment">// 匿名对象的特点是在当前行执行完就会马上被释放，比如以下</span></span><br><span class="line">    <span class="built_in">Person</span>(<span class="number">10</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;abab!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// 注：不要利用拷贝构造函数类初始化匿名对象</span></span><br><span class="line">    <span class="comment">// 编译器会认为此为对象的声明Person(p3) == Perosn p3;</span></span><br><span class="line">    <span class="built_in">Person</span>(p3);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 隐式转换法</span></span><br><span class="line">    Person p4 = <span class="number">10</span>; <span class="comment">// 相当于写了Person p4的有参构造</span></span><br><span class="line">    Person p5 = p4; <span class="comment">// 相当于写了Perosn 的拷贝构造</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test01</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>对于调用的方法最推荐用的是括号法，这是最清晰以及最简洁的方法。</strong></p><h3 id="（4）拷贝构造函数的调用时机"><a href="#（4）拷贝构造函数的调用时机" class="headerlink" title="（4）拷贝构造函数的调用时机"></a>（4）拷贝构造函数的调用时机</h3><p>C++中拷贝构造函数的调用时机通常由三种情况</p><p>1、使用一个以及<code>创建完毕的对象来初始化一个对象</code></p><p>2、<code>值传递</code>的方式给函数参数传值</p><p>3、以<code>值方式返回局部对象</code></p><p>上面的三种情况将用以下代码来进行演示下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//无参构造</span></span><br><span class="line"><span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Person 的无参构造调用！&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有参构造</span></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Person 的有参构造的调用!&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//拷贝构造</span></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">const</span> Person&amp;p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;age = p.age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//析构函数</span></span><br><span class="line">~<span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Person 的析构函数的调用！&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1、使用一个已经创建完毕的对象来初始化一个新对象</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(p1)</span></span>;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;p2的年龄:  &quot;</span>&lt;&lt;p2.age&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、值传递的方式给函数参数传值</span></span><br><span class="line"><span class="comment">//值传递会创建一个副本代表被拷贝的那个对象，也属于复制的过程</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">(Person p)</span>    </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、值方式返回局部对象</span></span><br><span class="line"><span class="function">Person <span class="title">ReturnPerson</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Person p1;</span><br><span class="line">    <span class="comment">//返回的过程也是一一进行复制</span></span><br><span class="line">        cout&lt;&lt;(<span class="type">int</span>*)&amp;p1&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> p1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//创建对象p来接收test03返回的对象</span></span><br><span class="line">    Person p = <span class="built_in">ReturnPerson</span>();</span><br><span class="line">    <span class="comment">//通过打印地址证明两个并不是同一个对象</span></span><br><span class="line">    cout&lt;&lt;(<span class="type">int</span>*)&amp;p&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test01</span>();</span><br><span class="line">    <span class="built_in">test02</span>();</span><br><span class="line">    <span class="built_in">test03</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于上面三个测试案例，它们分别的输出结果如下所示</p><p><strong>test01:</strong></p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202302112159397.png" alt="image-20230211215958318"></p><p><strong>test02:</strong></p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202302112200604.png" alt="image-20230211220037537"></p><p><strong>test03:</strong></p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202302112229781.png" alt="image-20230211222939715"></p><p>以上都为vscode的结果，肯定会有人好奇为什么test03没有调用拷贝构造函数，是因为有的编译器支持一种优化技术，叫做<code>RVO</code>（返回值优化技术）</p><p><code>返回值优化（Return Value Optimization，RVO）</code>是一种优化技术，其目的是在返回大量数据的函数中避免不必要的内存分配和数据复制。</p><p>然而，并不是所有编译器都支持返回值优化，或者<code>有时编译器也可能不会对某些函数进行返回值优化</code>。因此，在某些情况下，<code>在返回局部对象时仍然可能调用拷贝构造函数</code>。为了<code>确保可移植性</code>，最好<code>避免在函数中返回局部对象</code>，并在需要时显式地使用动态内存分配，以确保在所有情况下都能够正确地工作。</p><h3 id="（5）构造函数调用规则"><a href="#（5）构造函数调用规则" class="headerlink" title="（5）构造函数调用规则"></a>（5）构造函数调用规则</h3><p>默认情况下，C++编译器至少给一个类添加三个函数</p><p>1、默认构造（无参，函数体为空）</p><p>2、默认析构函数（无参，函数体为空）</p><p>3、默认拷贝构造函数，对属性进行值拷贝</p><p><strong>调用规则：</strong></p><p>1、如果用户定义有参构造函数，C++在不提供默认无参构造，但是会提供默认拷贝构造</p><p>2、如果用户定义拷贝构造函数，C++不会提供其他构造函数</p><p><strong>①创建类，C++至少会添加三个函数</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 无参构造</span></span><br><span class="line">    <span class="built_in">Person</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Person 的无参构造调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有参构造</span></span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">int</span> age)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Person 的有参构造的调用!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 析构函数</span></span><br><span class="line">    ~<span class="built_in">Person</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Person 的析构函数的调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">18</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p2</span><span class="params">(p1)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;p2.age = &quot;</span> &lt;&lt; p2.age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test01</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202302112249918.png" alt="image-20230211224925818"></p><p>对于以上我们并未定义拷贝构造函数，但是编译器自动给我们提供了一个拷贝构造函数。</p><p><strong>②定义了有参构造，编译器不提供默认构造，但提供拷贝构造</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 无参构造</span></span><br><span class="line">    <span class="comment">// Person()</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     cout &lt;&lt; &quot;Person 的无参构造调用！&quot; &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有参构造</span></span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">int</span> age)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Person 的有参构造的调用!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拷贝构造</span></span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">const</span> Person &amp;p)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Person 的拷贝构造函数的调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">this</span>-&gt;age = p.age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 析构函数</span></span><br><span class="line">    ~<span class="built_in">Person</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Person 的析构函数的调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Person p1;</span><br><span class="line">    <span class="function">Person <span class="title">p2</span><span class="params">(p1)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;p2.age = &quot;</span> &lt;&lt; p2.age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test01</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于以上的代码会出现以下的报错</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202302112254490.png" alt="image-20230211225443440"></p><p>但是，此时是提供拷贝构造的，比如以下的代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 无参构造</span></span><br><span class="line">    <span class="comment">// Person()</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     cout &lt;&lt; &quot;Person 的无参构造调用！&quot; &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有参构造</span></span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">int</span> age)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Person 的有参构造的调用!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// // 拷贝构造</span></span><br><span class="line">    <span class="comment">// Person(const Person &amp;p)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     cout &lt;&lt; &quot;Person 的拷贝构造函数的调用！&quot; &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">//     this-&gt;age = p.age;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 析构函数</span></span><br><span class="line">    ~<span class="built_in">Person</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Person 的析构函数的调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">18</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p2</span><span class="params">(p1)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;p2.age = &quot;</span> &lt;&lt; p2.age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test01</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202302112257885.png" alt="image-20230211225704805"></p><p><strong>③定义了拷贝构造函数，编译器不提供其他的普通构造函数</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 无参构造</span></span><br><span class="line">    <span class="comment">// Person()</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     cout &lt;&lt; &quot;Person 的无参构造调用！&quot; &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// // 有参构造</span></span><br><span class="line">    <span class="comment">// Person(int age)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     this-&gt;age = age;</span></span><br><span class="line">    <span class="comment">//     cout &lt;&lt; &quot;Person 的有参构造的调用!&quot; &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拷贝构造</span></span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">const</span> Person &amp;p)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Person 的拷贝构造函数的调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">this</span>-&gt;age = p.age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 析构函数</span></span><br><span class="line">    ~<span class="built_in">Person</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Person 的析构函数的调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">18</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p2</span><span class="params">(p1)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;p2.age = &quot;</span> &lt;&lt; p2.age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test01</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会出现以下报错</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202302112300976.png" alt="image-20230211230029924"></p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202302112300295.png" alt="image-20230211230047239"></p><p>通过以上的例子我们可以发现，实际有参构造，无参构造，拷贝构造有一种地位的感觉，如果定义了地位高的构造就不会提供低级构造。</p><h3 id="（6）深拷贝和浅拷贝"><a href="#（6）深拷贝和浅拷贝" class="headerlink" title="（6）深拷贝和浅拷贝"></a>（6）深拷贝和浅拷贝</h3><h4 id="①浅拷贝"><a href="#①浅拷贝" class="headerlink" title="①浅拷贝"></a>①浅拷贝</h4><p>一般<code>编译器会默认提供的拷贝操作</code>，也是简单的一种拷贝操作。</p><p>比如以下的代码就是编译器提供浅拷贝操作的一个案例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Person</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Person的默认构造函数的调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">int</span> age)</span><br><span class="line">    &#123;</span><br><span class="line">        m_age = age;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Person的有参构造函数的调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Person</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Person的析构函数的调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> m_age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;p1的年龄为：&quot;</span> &lt;&lt; p1.m_age &lt;&lt; endl;</span><br><span class="line">    <span class="function">Person <span class="title">p2</span><span class="params">(p1)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;p2的年龄为：&quot;</span> &lt;&lt; p2.m_age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test01</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是编译器默认提供了一个拷贝构造函数，将p1对象拷贝给了p2对象。输出结果如下</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202302221940766.png" alt="image-20230222194017660"></p><p>但是如果我们想要把一个身高的数据开辟到堆区的话，如果我们继续利用浅拷贝会发生什么呢？我们来看下面的代码。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Person</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Person的默认构造函数的调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">int</span> age, <span class="type">int</span> height)</span><br><span class="line">    &#123;</span><br><span class="line">        m_age = age;</span><br><span class="line">        m_height = <span class="keyword">new</span> <span class="built_in">int</span>(height); <span class="comment">// 在堆区开辟内存</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Person的有参构造函数的调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Person</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> m_height;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Person的析构函数的调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> m_age;</span><br><span class="line">    <span class="type">int</span> *m_height;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">10</span>, <span class="number">180</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;p1的年龄为：&quot;</span> &lt;&lt; p1.m_age &lt;&lt; <span class="string">&quot; 身高为：&quot;</span> &lt;&lt; *p1.m_height &lt;&lt; endl;</span><br><span class="line">    <span class="function">Person <span class="title">p2</span><span class="params">(p1)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;p2的年龄为：&quot;</span> &lt;&lt; p2.m_age &lt;&lt; <span class="string">&quot; 身高为：&quot;</span> &lt;&lt; *p2.m_height &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test01</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们都知道在堆区开辟内存之后，程序员应该手动将它释放，此时<code>析构函数</code>的作用就展现出来啦，就是<code>释放堆区开辟的内存</code>！所以我们也必须用到delete函数将堆区开辟的内存给释放掉，上面的代码究竟会出现什么情况呢？</p><p>很遗憾的告诉你，程序崩了<img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202302221953591.png" alt="image-20230222195325360"></p><p>在vs2017里面，会出现这样的结果，当然其他编译器可能也会出现不一样的结果，但是还是以vs2017的这个结果为准，所以为什么会崩呢？请看下图</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202302222006346.png" alt="image-20230222200608276"></p><p>此时我相信很多人都看出来问题了，就是重复释放的问题，在释放了第一次之后，此时的指针变成了一个<code>悬挂指针</code>，它所指向的内存空间为空，但是指针不为空，所以导致了重复释放。</p><p>解决以上的问题有以下的几种解决方法</p><ol><li>在释放指针所指向的内存之后，将指针赋值为NULL或nullptr，以避免指针悬挂问题。</li><li>禁止对象的浅拷贝，使用深拷贝或者移动语义来确保对象的生命周期内不会出现悬挂指针。</li><li>使用智能指针等RAII技术，来管理动态内存的分配和释放，从而避免手动管理内存带来的问题。</li></ol><p>此处演示下第二种深拷贝的方法</p><h4 id="②深拷贝"><a href="#②深拷贝" class="headerlink" title="②深拷贝"></a>②深拷贝</h4><p>深拷贝就是<code>在堆区重新申请一个内存空间</code>，将数据拷贝进去。</p><p>此时的代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person的默认构造函数的调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个执行深拷贝的拷贝构造函数</span></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">const</span> Person &amp;p)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person的拷贝构造函数的调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">m_age = p.m_age;<span class="comment">//编译器默认执行的拷贝</span></span><br><span class="line">m_height = <span class="keyword">new</span> <span class="built_in">int</span>(*p.m_height);<span class="comment">//程序员自己定义的深拷贝操作</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">int</span> age, <span class="type">int</span> height)</span><br><span class="line">&#123;</span><br><span class="line">m_age = age;</span><br><span class="line">m_height = <span class="keyword">new</span> <span class="built_in">int</span>(height); <span class="comment">// 在堆区开辟内存</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person的有参构造函数的调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> m_height;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person的析构函数的调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> m_age;</span><br><span class="line"><span class="type">int</span> *m_height;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">10</span>, <span class="number">180</span>)</span></span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;p1的年龄为：&quot;</span> &lt;&lt; p1.m_age &lt;&lt; <span class="string">&quot; 身高为：&quot;</span> &lt;&lt; *p1.m_height &lt;&lt; endl;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(p1)</span></span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;p2的年龄为：&quot;</span> &lt;&lt; p2.m_age &lt;&lt; <span class="string">&quot; 身高为：&quot;</span> &lt;&lt; *p2.m_height &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此代码就在拷贝构造函数里面又开辟了堆区的内存，实现了深拷贝。输出结果正常如下</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202302222018873.png" alt="image-20230222201850796"></p><p>此时的图解如下所示</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202302222024004.png" alt="image-20230222202139225"></p><h3 id="（7）初始化列表"><a href="#（7）初始化列表" class="headerlink" title="（7）初始化列表"></a>（7）初始化列表</h3><p>C++提供了初始化列表的语法，用来初始化属性</p><p><strong>语法：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//此时值已经定死，不太灵活 </span></span><br><span class="line"><span class="number">1</span>、 构造函数():属性<span class="number">1</span>(值<span class="number">1</span>),属性<span class="number">2</span>(值<span class="number">2</span>)...属性<span class="built_in">n</span>(值n)&#123;&#125;</span><br><span class="line"><span class="comment">//此时可以灵活的赋值，相当于之前有参构造的写法</span></span><br><span class="line"><span class="number">2</span>、 构造函数(a1,a2,...,an):属性<span class="number">1</span>(a1),属性<span class="number">2</span>(a2)...属性<span class="built_in">n</span>(an)&#123;&#125;</span><br></pre></td></tr></table></figure><p>下面将用代码来演示下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用第一种方法进行初始化</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person1</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Person1</span>() : <span class="built_in">name</span>(<span class="string">&quot;luoxi&quot;</span>), <span class="built_in">age</span>(<span class="number">18</span>) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">PrintfPerson</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;name :&quot;</span> &lt;&lt; name &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;age :&quot;</span> &lt;&lt; age &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    string name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//利用第二种方式进行初始化 </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person2</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Person2</span>(string a1, <span class="type">int</span> a2) : <span class="built_in">name</span>(a1), <span class="built_in">age</span>(a2) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">PrintfPerson</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;name :&quot;</span> &lt;&lt; name &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;age :&quot;</span> &lt;&lt; age &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    string name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Person1 p1;</span><br><span class="line">    p1.<span class="built_in">PrintfPerson</span>();</span><br><span class="line">    <span class="function">Person2 <span class="title">p2</span><span class="params">(<span class="string">&quot;luoxi2&quot;</span>, <span class="number">19</span>)</span></span>;</span><br><span class="line">    p2.<span class="built_in">PrintfPerson</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test01</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上为上例代码输出的结果</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202303111547724.png" alt="image-20230311071741639"></p><h3 id="（8）类对象作为类成员"><a href="#（8）类对象作为类成员" class="headerlink" title="（8）类对象作为类成员"></a>（8）类对象作为类成员</h3><p>C++类中的成员可以是另一个类的对象，我们称该成员为<code>对象成员</code></p><p>它的形式通常如下所示</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span></span><br><span class="line">&#123;</span><br><span class="line">A a;<span class="comment">//在B类中有A类的对象</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>对于上面的例子可以看到B类中有A类的对象，被称为对象成员</p><p>那么是先有A对象还是先有B对象呢？或者说A和B的构造和析构的顺序是谁先谁后呢？</p><p>下面将用代码来进行演示</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Eye</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Eye</span>(string a1) : <span class="built_in">eyesname</span>(a1)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Eye构造函数的调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Eye</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Eye析构函数的调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    string eyesname;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">int</span> a1, string a2) : <span class="built_in">age</span>(a1), <span class="built_in">eyes</span>(a2)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Person构造函数的调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Person</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Person的析构函数调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    Eye eyes;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Person <span class="title">p</span><span class="params">(<span class="number">18</span>, <span class="string">&quot;Blue eyes&quot;</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;年龄: &quot;</span> &lt;&lt; p.age &lt;&lt; <span class="string">&quot; 眼睛: &quot;</span> &lt;&lt; p.eyes.eyesname &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test01</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于上面代码的输出结果如下所示</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202303120201982.png" alt="image-20230312020145805"></p><p>可以看出来，是必须现有眼睛这个对象才能有人，其实这也不难想，如果没有了眼睛该如何构造出来一个人呢？同理后面的析构也一样，只有人死去了，眼睛才会慢慢腐烂而去。</p><h3 id="（9）静态成员"><a href="#（9）静态成员" class="headerlink" title="（9）静态成员"></a>（9）静态成员</h3><p>静态成员就是在成员变量和成员函数中加上关键字static，称为<code>静态成员</code></p><p>静态成员分类有以下两点：<br>1、静态成员变量</p><p>（1）所有对象共享同一份数据</p><p>（2）在编译阶段分配内存</p><p>（3）<strong>类内声明，类外初始化</strong></p><p>2、静态成员函数</p><p>（1）所有成员共享同一个函数</p><p>（2）静态成员只能访问静态成员变量</p><h4 id="①静态成员变量"><a href="#①静态成员变量" class="headerlink" title="①静态成员变量"></a>①静态成员变量</h4><p>首先是先给出静态成员变量相关的示例代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态成员变量</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> m_A;</span><br><span class="line">    <span class="comment">// 静态成员也有访问权限</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> m_B;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类内声明，类外进行初始化(这一步必须执行！！！)</span></span><br><span class="line"><span class="type">int</span> Person::m_A = <span class="number">114514</span>;</span><br><span class="line"><span class="type">int</span> Person::m_B = <span class="number">520</span>;</span><br><span class="line"><span class="comment">// 静态成员变量的相关定义以及赋值</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;========test01========&quot;</span> &lt;&lt; endl;</span><br><span class="line">    Person p1;</span><br><span class="line">    cout &lt;&lt; p1.m_A &lt;&lt; endl;</span><br><span class="line">    Person p2;</span><br><span class="line">    <span class="comment">// 其他对象也可以对这个变量进行改值，可以影响到其他成员这个属性的值</span></span><br><span class="line">    p2.m_A = <span class="number">1919810</span>;</span><br><span class="line">    cout &lt;&lt; p1.m_A &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态成员变量的相关访问操作</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;========test02========&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// 对象访问</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;通过对象进行访问:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    Person p;</span><br><span class="line">    cout &lt;&lt; p.m_A &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// 无法访问!!!</span></span><br><span class="line">    <span class="comment">//  cout &lt;&lt; p.m_B &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">//  类名访问</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;通过类名进行访问:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; Person::m_A &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// 无法访问!!!</span></span><br><span class="line">    <span class="comment">//  cout &lt;&lt; Person::m_B &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test01</span>();</span><br><span class="line">    <span class="built_in">test02</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于上面的代码的输出结果如下所示</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202303122304800.png" alt="image-20230312230416687"></p><p><strong>注：对于上面的代码，以及前面的标注，记得在定义静态成员变量的时候一定一定要在类外进行初始化！！！</strong></p><p>对于静态成员也是有访问权限，如下图：<img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202303122303190.png" alt="image-20230312230347990"></p><h4 id="②静态成员函数"><a href="#②静态成员函数" class="headerlink" title="②静态成员函数"></a>②静态成员函数</h4><p>静态成员函数大部分其实都跟静态成员变量很相似，请看如下的代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 成员函数</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 静态成员函数</span></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">func1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 静态成员函数只能访问静态成员变量</span></span><br><span class="line">        m_A = <span class="number">1919810</span>;</span><br><span class="line">        <span class="comment">// 静态成员函数不能访问非静态成员变量</span></span><br><span class="line">        <span class="comment">// 原因是因为非静态成员变量是对象特定的属性，不属于公共部分，所以导致静态成员函数无法进行确定此属性是哪个对象的，所以无法进行访问</span></span><br><span class="line">        <span class="comment">// m_B = 11415l;</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;static void func 的调用!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 静态成员变量</span></span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> m_A;</span><br><span class="line">    <span class="comment">// 非静态成员变量</span></span><br><span class="line">    <span class="type">int</span> m_B;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 静态成员函数也有访问权限</span></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">func2</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 一定要类外进行初始化!!!</span></span><br><span class="line"><span class="type">int</span> Person::m_A = <span class="number">114514</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试访问的方式</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;通过对象来进行访问：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    Person p;</span><br><span class="line">    p.<span class="built_in">func1</span>();</span><br><span class="line">    <span class="comment">// p.func2();</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;通过类名来进行访问：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    Person::<span class="built_in">func1</span>();</span><br><span class="line">    <span class="comment">// Person::func2();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test01</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于以上的代码的输出结果如下所示:</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202303122358967.png" alt="image-20230312235836775"></p><p>对于上面的代码有关静态成员函数不能访问非静态成员变量的报错如下：</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202303130000797.png" alt="image-20230313000000728"></p><p><code>原因是因为非静态成员变量是对象特定的属性，不属于公共部分，所以导致静态成员函数无法进行确定此属性是哪个对象的，所以无法进行访问</code></p><p>还有静态成员函数有访问权限的地方和静态成员变量类似。</p><h4 id="③成员变量和成员函数的分开存储"><a href="#③成员变量和成员函数的分开存储" class="headerlink" title="③成员变量和成员函数的分开存储"></a>③成员变量和成员函数的分开存储</h4><p>在C++中，类内的成员函数和成员变量是分开存储的。</p><p>请看如下代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person1</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person2</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> b; <span class="comment">// 类内声明</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func1</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">func2</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> Person2::b = <span class="number">114514</span>; <span class="comment">// 类外初始化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 空对象占一个字节</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Person1 p1;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof of p1 = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(p1) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非空对象中只有成员变量占内存空间，成员函数和静态成员都不占</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Person2 p2;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof of p2 = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(p2) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test01</span>();</span><br><span class="line">    <span class="built_in">test02</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于上面的两个test，输出结果如下</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202304120058578.png" alt="image-20230412005841006"></p><p>对于上面的代码，肯定会有人很好奇为什么空对象会占一个字节的空间？对于空对象为什么会占一个字节的空间，请看以下的解释。</p><p>在 C++ 等编程语言中，空对象通常会占据一个字节的内存空间。这是因为，在使用一个类或结构体定义的变量时，编译器需要知道该变量所占据的内存空间大小，以便<code>正确地计算内存地址等信息</code>。而如果不为空对象分配任何内存空间，则在<code>使用 sizeof 运算符等操作时可能会得到意外的结果</code>。</p><p>另外，一个字节的内存空间相对较小，并不会对程序的性能和内存占用产生明显的影响。因此，<code>为了避免出现未知的问题，一般会将空对象分配至少一个字节的内存空间。</code></p><p>其实总的来说这一个字节的空间是为了防止操作出现的一些问题。</p><h3 id="（10）this指针的用途"><a href="#（10）this指针的用途" class="headerlink" title="（10）this指针的用途"></a>（10）this指针的用途</h3><p>在C++中，成员函数和成员变量是分开存储的，每一个非静态的成员函数只会诞生一个函数的实例，也就是说多个同类型的对象只会共用这一个函数实例。</p><p>对于以上的问题我们应该如何去进行区分呢？此时就要用到C+<br>+特殊的对象指针–this指针，来解决上面的相关问题，this指针指向被调用成员函数所属的对象。</p><p><strong>注意：</strong></p><p>1、this指针算隐含在每一个<code>静态成员函数</code>内的一种指针</p><p>2、this指针不需要定义，直接使用</p><p><strong>用途：</strong></p><p>1、当<code>形参和成员变量同名</code>时，可用this指针来区分。</p><p>2、可在类的非静态成员函数中<code>返回对象本身</code></p><p><strong>用途一、</strong></p><p>对于用途一，先举个例子</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">Person</span>(<span class="type">int</span> age)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//让同名的形参给对象的属性进行赋值操作</span></span><br><span class="line">    age = age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">18</span>)</span></span>;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;p1的年龄：&quot;</span> &lt;&lt; p1.age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">test01</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于以上的代码就是通过在类中写一个有参构造，然后在实例化对象的时候进行初始化操作，输出结果如下。</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202305191714105.png" alt="image-20230519171416466"></p><p>通过输出结果我们可以看到此时的值不是我们所预期的结果，就是因为存在<code>同名的变量</code>而导致的。因为此时编译器就分不清左右两个age哪个才是成员属性哪个是形参变量。正确应该更改有参构造里面的内容如下。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//age = age</span></span><br><span class="line"><span class="comment">//this指针指向被调用成员函数所属的对象</span></span><br><span class="line"><span class="keyword">this</span>-&gt;age = age</span><br></pre></td></tr></table></figure><p>对于上面this-&gt;age = age的注释，我们可以理解哪个对象调用了类中的函数，this指针就指向哪个对象，比如你p1调用啦有参构造函数，那么this指针就指向p1对象，同理如果你是p2对象也是一样的。</p><p><strong>用途二、</strong></p><p>如果我们想要实现两个类中的成员属性进行相加的操作，我们应该如何去实现呢？一般人可能第一想到在类中写一个成员函数去实现此功能，比如以下的代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">int</span> age)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//实现相加的成员函数</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">PersonAgeAdd</span><span class="params">(Person &amp;p)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;age += p.age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">11</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">45</span>)</span></span>;</span><br><span class="line">    p1.<span class="built_in">PersonAgeAdd</span>(p2);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;age of p1 = &quot;</span> &lt;&lt; p1.age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test01</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，这个代码还是存在一定的缺陷的，比如我们想要去完成一个累加的操作，就比如将p1的年龄进行重复加上p2的年龄，此时应该怎么办呢？</p><p>下面提供我的几种思路</p><p><strong>思路一：利用循环进行解决重复性的问题</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">11</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">45</span>)</span></span>;</span><br><span class="line">    <span class="comment">// p1.PersonAgeAdd(p2);</span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> (i--)</span><br><span class="line">    &#123;</span><br><span class="line">        p1.<span class="built_in">PersonAgeAdd</span>(p2);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;age of p1 = &quot;</span> &lt;&lt; p1.age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上的思路就是修改test01里面的内容，<code>将里面对于p1对象的年龄相加的成员函数的调用次数进行循环实现自己想要的次数</code>。</p><p><strong>思路二：理解用途二，巧用this指针</strong></p><p>对于思路二，可能会有人存在一个错误的想法如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">11</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">45</span>)</span></span>;</span><br><span class="line">    <span class="comment">// p1.PersonAgeAdd(p2);</span></span><br><span class="line">    p1.<span class="built_in">PersonAgeAdd</span>(p2).<span class="built_in">PersonAgeAdd</span>(p2).<span class="built_in">PersonAgeAdd</span>(p2);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;age of p1 = &quot;</span> &lt;&lt; p1.age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个错误是个特别明显的错误，因为PersonAgeAdd这个成员函数是个void类型的函数，所以它没有返回值，所以这样重复调用毫无意义。</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202305191734945.png" alt="image-20230519173446838"></p><p>所以，根据返回的类型来想，如果PersonAgeAdd这个成员函数的类型是Person类型呢？比如我们看一下的修改方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">int</span> age)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义一个Person类型的成员函数</span></span><br><span class="line">    <span class="function">Person <span class="title">PersonAgeAdd</span><span class="params">(Person &amp;p)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;age += p.age;</span><br><span class="line">        <span class="comment">//返回调用该函数的对象本身</span></span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这样改编译器就不会显示报错了，但是这样改真的是正确的吗？我们来看下这样的修改的输出结果将会怎么样。</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202305191739725.png" alt="image-20230519173929084"></p><p>我们会看到，这样的代码不能实现该有的功能！这是为什么呢？</p><p>对于以上的疑问我们还是要想想成员函数的类型返回的真的是对象的本身吗？还是一直返回的是它的“替身”。</p><p>我们利用一个代码来帮助理解下为什么会这样吧</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> count = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">int</span> age)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 定义一个Person类型的成员函数</span></span><br><span class="line">    <span class="function">Person <span class="title">PersonAgeAdd</span><span class="params">(Person &amp;p)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//注意是先进行加的操作，所以第一次经历过这个操作才有了p1年龄等于56的结果，后面都是新的对象</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;age += p.age;</span><br><span class="line">        <span class="comment">// 返回调用该函数的对象本身</span></span><br><span class="line">        cout &lt;&lt; count &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">11</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">45</span>)</span></span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;p1);</span><br><span class="line">    p1.<span class="built_in">PersonAgeAdd</span>(p2).<span class="built_in">PersonAgeAdd</span>(p2).<span class="built_in">PersonAgeAdd</span>(p2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;p1);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;age of p1 = &quot;</span> &lt;&lt; (p1.age) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test01</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于以上的代码，我们通过监视地址来看每次到底是不是p1本身，输出结果如下</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202305191822998.png" alt="image-20230519182226507"></p><p>我们发现除了第一次，<code>每一次经过返回之后地址就发生了更改</code>，这就是导致了不能累加的原因，利用了Person的类型，每次返回都会导致创建一个新的对象进行储存改变后新的对象。</p><p>通过这点我们该如何进行应对呢？此时应该利用引用的知识了。</p><p>因为引用作为函数类型的话此时返回的就是对象的本身，也就是每次的地址都会相同。修改如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">int</span> age)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 定义一个Person&amp;类型的成员函数</span></span><br><span class="line">    <span class="function">Person &amp;<span class="title">PersonAgeAdd</span><span class="params">(Person &amp;p)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;age += p.age;</span><br><span class="line">        <span class="comment">// 返回调用该函数的对象本身</span></span><br><span class="line">        cout &lt;&lt; count &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后的输出结果也可以发现每次的地址都是一样的</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202305191827365.png" alt="image-20230519182741950"></p><h3 id="（11）空指针调用成员函数"><a href="#（11）空指针调用成员函数" class="headerlink" title="（11）空指针调用成员函数"></a>（11）空指针调用成员函数</h3><p>对于C++中其实空指针也是可以调用成员函数的，其中的关键在于是否运用到了<code>this指针</code></p><p>比如以下的案例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;func 函数的调用!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">ShowAge</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//使用了成员属性age，默认为this-&gt; age</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;age = &quot;</span> &lt;&lt; age &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> age = <span class="number">16</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Person *p1 = <span class="literal">NULL</span>;</span><br><span class="line">    p1-&gt;<span class="built_in">func</span>();</span><br><span class="line">    p1-&gt;<span class="built_in">ShowAge</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在test函数中就用空指针p1调用运用了this指针的ShowAge成员函数，这会导致未定义的行为从而使得程序崩溃，但是如果调用未运用到this指针的func就不会出现这个问题。</p><h3 id="（12）const关键字在类和对象的运用"><a href="#（12）const关键字在类和对象的运用" class="headerlink" title="（12）const关键字在类和对象的运用"></a>（12）const关键字在类和对象的运用</h3><p>C++中在类和对象中也有对于const关键字的相关运用，对此运用分为两方面，一个是对<code>成员函数的修饰</code>，另外一个是对<code>成员对象的修饰</code>。</p><h4 id="①const修饰成员函数"><a href="#①const修饰成员函数" class="headerlink" title="①const修饰成员函数"></a>①const修饰成员函数</h4><p>通常情况下在<code>成员函数后加上const关键字</code>的函数我们一般成为<code>常函数</code></p><p>对于常函数有以下几个知识点：<br>1、常函数内不可以修改成员属性</p><p>2、成员属性声明时加关键字mutable后，在常函数中依然可以修改</p><p>对于上面几点我们来举以下的几个例子 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">ShowPerson</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//此时这个地方就会报错</span></span><br><span class="line">        <span class="comment">//报错信息为表达式必须是可修改的左值</span></span><br><span class="line">        <span class="type">int</span> age = <span class="number">18</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>对于上面的例子就是对于知识点1的相关内容，我们可以发现如果在成员函数后面加上const修饰之后就会导致成员函数内无法修改成员属性的值，这个的原因在于<code>this指针的本质</code>。</p><p>this指针的本质是一个指针常量，指针的指向是不可修改的。this指针在C++中的声明如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//无法修改指向 </span></span><br><span class="line">(类名) * <span class="type">const</span> <span class="keyword">this</span>;</span><br></pre></td></tr></table></figure><p>因为const在<code>(类名)  *</code>后面，所以我们无法修改this指针的指向。如果我们想不修改它指向的值该怎么办呢？那就应该在(类名)前加上一个const。如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//既无法修改指向，也无法修改指向的值</span></span><br><span class="line"><span class="built_in">const</span> (类名) * <span class="type">const</span> <span class="keyword">this</span>;</span><br></pre></td></tr></table></figure><p>通过这一点就可以知道为什么在类中的成员函数无法修改对应成员属性的值了，其实<code>在函数后面加上const就同等于在每个你要在里面修改的属性中加上了一个const</code>。</p><p>但是我们如果偏偏要修改那该怎么办呢？这就涉及到知识点2的内容了，此时就需要用到<code>mutable</code>关键字了。即在想要在常函数修改的成员属性的声明前加上mutable就行，比如就上面举例的那个类修改如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">ShowPerson</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//此时这个地方就不会报错</span></span><br><span class="line">        <span class="comment">//因为mutable关键字发挥的作用</span></span><br><span class="line">        <span class="type">int</span> age = <span class="number">18</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">mutable</span> <span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="②const修饰对象"><a href="#②const修饰对象" class="headerlink" title="②const修饰对象"></a>②const修饰对象</h4><p>const修饰的对象的话我们一般称作为<code>常对象</code>。</p><p>常对象的知识点有如下几点</p><p>1、常对象不可以修改对象对应的属性的值，除非属性声明前有mutable关键字。</p><p>2、常对象只能调用常函数</p><p>我们可以发现以上的知识点和常函数有一些十分的相似，对于以上的知识点我们可以举以下的几个例子。</p><p>比如我们先声明一个类</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">ShowPerson</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">mutable</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="type">int</span> weight;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后我们开始实例化一个常对象</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">const</span> Person p;</span><br><span class="line">    <span class="comment">//这里不会报错，因为属性age被mutable关键字修饰的特殊属性</span></span><br><span class="line">    p.age = <span class="number">18</span>;</span><br><span class="line">    <span class="comment">//这里会报错，因为常对象无法修改对应属性的值</span></span><br><span class="line">    p.weight = <span class="number">60</span>;</span><br><span class="line">    <span class="comment">//这里不会报错，因为常对象只能调用常函数</span></span><br><span class="line">    p.<span class="built_in">ShowPerson</span>();</span><br><span class="line">    <span class="comment">//这里会报错，因为常对象无法调用非常函数</span></span><br><span class="line">    p.<span class="built_in">func</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于第2个知识点为什么常对象无法调用类中的普通的成员函数，是因为<code>普通的成员函数我们知道是可以进行修改类中的属性的</code>。而<code>常对象是不能进行修改对应的属性</code>，所以这点与其违背，所以常对象无法调用普通的成员函数。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 类和对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>封装</title>
      <link href="/2023/02/06/2023/Feb/1/"/>
      <url>/2023/02/06/2023/Feb/1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1><h2 id="①封装的意义"><a href="#①封装的意义" class="headerlink" title="①封装的意义"></a>①封装的意义</h2><p>1.将属性和行为作为一个整体，表现生活中的事物。</p><p>2.将属性和行为加以<code>权限</code>进行控制</p><h3 id="（1）封装意义一"><a href="#（1）封装意义一" class="headerlink" title="（1）封装意义一"></a>（1）封装意义一</h3><p>设计类的时候，属性和行为写在一起，表现事物</p><p><strong>语法：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> 类名&#123;</span><br><span class="line">访问权限:</span><br><span class="line">属性（行为）</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>例子：</strong></p><p>设计一个<code>圆类</code>，求圆的周长。</p><p>对于上面的案例可以知道要我们设计一个<code>类是圆类</code>，它的类之间执行一个<code>行为是求圆的周长</code>，然后对于执行这个行为必不可少的<code>属性是圆的半径</code>。</p><p>所以关于该案例的代码可以这样写</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个全局区的变量PI表示圆周率</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设计一个圆类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 访问权限是public</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// 属性(定义整形变量r为半径)</span></span><br><span class="line"><span class="type">int</span> r;</span><br><span class="line"><span class="comment">// 行为(计算周长)</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">calculateZC</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span> * PI * r;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 通过圆类创建具体的圆(实例化对象)</span></span><br><span class="line">Circle c1;</span><br><span class="line"><span class="comment">// 给该对象的属性进行赋值</span></span><br><span class="line">c1.r = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 执行该对象的行为获取该周长</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;圆的周长为: &quot;</span> &lt;&lt; c1.<span class="built_in">calculateZC</span>() &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（2）封装意义二"><a href="#（2）封装意义二" class="headerlink" title="（2）封装意义二"></a>（2）封装意义二</h3><p>类在设计是，可以把属性和行为放在不同的权限下，加以控制</p><p>访问权限有以下三种：</p><p><strong>1、public（公共权限）</strong></p><p>类内可以访问，类外不能访问</p><p><strong>2、protected（保护权限）</strong></p><p>类内可以访问，类外不可以访问</p><p><strong>3、private（私有权限）</strong></p><p>类内可以访问，类外不可以访问</p><p><strong>注：</strong>虽然看起来保护权限和私有权限很像，但是在后面继承之中它们之间是存在很大的区比。比如继承相当于是父子关系，父亲类内的私有内容被儿子继承之后是无法进行访问的。</p><p>其实我们可能可以发现C++中的类其实和结构体有很大的相似之处，这确实如此！但是它们最大的<code>区别</code>就是在它们的<code>默认访问权限不同</code>。</p><p>比如以下的代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个结构体</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Test1</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//默认权限为公共权限</span></span><br><span class="line"><span class="type">int</span> t1;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test2</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//默认权限为私有权限</span></span><br><span class="line"><span class="type">int</span> t2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//创建一个结构体变量</span></span><br><span class="line">Test1 st;</span><br><span class="line">Test2 ct;</span><br><span class="line">st.t1 = <span class="number">114514</span>;</span><br><span class="line">ct.t2 = <span class="number">114514</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不注释掉第24行代码将会发生以下的报错信息</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202302080133738.png" alt="image-20230208013320611"></p><p>意思就是说无法访问到在类内私有权限的内容，所以由上可知，class创建的一个类默认的访问权限为<code>private</code>。</p><h2 id="②权限的重要作用"><a href="#②权限的重要作用" class="headerlink" title="②权限的重要作用"></a>②权限的重要作用</h2><p>通过上面的描述我们可以知道在类中一共有三种类型的权限，但是它们都有什么重要的作用呢？以下为私有权限的作用。</p><p>对于私有权限，我们可以将所有成员的属性设置为私有，它有以下几个优点。</p><p>1、将所有成员属性设置为私有，可以<code>自己控制读写权限</code>。</p><p>2、对于写权限 ，我们可以<code>检测数据的有效性</code>。</p><p>比如以下的代码，将展现其优点</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设计一个类代表一个人</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// 设计接口去访问私有权限的内容</span></span><br><span class="line"><span class="comment">// 写姓名（设置姓名）</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Setname</span><span class="params">(string name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">p_name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 读姓名(获取姓名)</span></span><br><span class="line"><span class="function">string <span class="title">Getname</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 调用该函数之后就返回改姓名的字符串</span></span><br><span class="line"><span class="keyword">return</span> p_name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 读年龄(获取年龄)</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Getage</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> p_age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 写情人(设置情人)</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Setlover</span><span class="params">(string lover)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">p_lover = lover;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="comment">// 该人的姓名(类外可读可写)</span></span><br><span class="line">string p_name;</span><br><span class="line"><span class="comment">// 该人的年龄(类外只读)</span></span><br><span class="line"><span class="type">int</span> p_age = <span class="number">18</span>;</span><br><span class="line"><span class="comment">// 该人的情人（类外只写）</span></span><br><span class="line">string p_lover;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 实例化一个对象</span></span><br><span class="line">Person p;</span><br><span class="line"><span class="comment">// 通过以上成员函数提供的接口进行访问私有权限的内容</span></span><br><span class="line"><span class="comment">// 通过成员函数Setname接口写入姓名</span></span><br><span class="line">p.<span class="built_in">Setname</span>(<span class="string">&quot;luoxi&quot;</span>);</span><br><span class="line"><span class="comment">// 通过成员函数Getname接口读取姓名</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; p.<span class="built_in">Getname</span>() &lt;&lt; endl;</span><br><span class="line"><span class="comment">// 通过成员函数Getage接口读取年龄</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;年龄：&quot;</span> &lt;&lt; p.<span class="built_in">Getage</span>() &lt;&lt; endl;</span><br><span class="line"><span class="comment">// 通过成员函数Setlover接口写入情人</span></span><br><span class="line">p.<span class="built_in">Setlover</span>(<span class="string">&quot;纳西妲&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下所示：</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202302080158964.png" alt="image-20230208015832898"></p><p>可以看出来输出的结果都是提供了可读接口的成员属性</p><p>这样写可以很好的展现出代码的自由度以及程序员可以更加灵活的运用类中的成员属性。</p><h2 id="③相关案例"><a href="#③相关案例" class="headerlink" title="③相关案例"></a>③相关案例</h2><h3 id="（1）案例一：设计立方体类"><a href="#（1）案例一：设计立方体类" class="headerlink" title="（1）案例一：设计立方体类"></a>（1）案例一：设计立方体类</h3><p><strong>题目：</strong></p><p>设计立方体类（Cube）</p><p>求出立方体的面积和体积</p><p>分别用全局函数和成员函数判断两个立方体是否相等</p><p><strong>代码如下：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设计立方体类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cube</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// 提供接口给私有属性赋值</span></span><br><span class="line"><span class="comment">// 设置长，宽，高</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SetCube</span><span class="params">(<span class="type">int</span> length, <span class="type">int</span> wide, <span class="type">int</span> height)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">c_length = length;</span><br><span class="line">c_wide = wide;</span><br><span class="line">c_height = height;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分别获取长宽高</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Getlength</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> c_length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Getwide</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> c_wide;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Getheight</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> c_height;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义成员行为求面积或体积</span></span><br><span class="line"><span class="comment">// 计算面积的成员行为</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">CubeS</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span> * c_length * c_wide + <span class="number">2</span> * c_length * c_height + <span class="number">2</span> * c_wide * c_height;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 计算体积的成员行为</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">CubeV</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> c_length * c_wide * c_height;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 利用成员函数来判断C1和C2立方体是否相等</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">IssameCube</span><span class="params">(Cube &amp;c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (c_length == c.c_length &amp;&amp; c_wide == c.c_wide &amp;&amp; c_height == c.c_height)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="comment">// 定义长这个成员属性</span></span><br><span class="line"><span class="type">int</span> c_length;</span><br><span class="line"><span class="comment">// 定义宽这个成员属性</span></span><br><span class="line"><span class="type">int</span> c_wide;</span><br><span class="line"><span class="comment">// 定义高这个成员属性</span></span><br><span class="line"><span class="type">int</span> c_height;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用全局函数判断两个立方体是否相等</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">IssameCube2</span><span class="params">(Cube &amp;c1, Cube &amp;c2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (c1.<span class="built_in">Getlength</span>() == c2.<span class="built_in">Getlength</span>() &amp;&amp; c1.<span class="built_in">Getwide</span>() == c2.<span class="built_in">Getwide</span>() &amp;&amp; c1.<span class="built_in">Getheight</span>() == c2.<span class="built_in">Getheight</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 实例化两个对象</span></span><br><span class="line">Cube c1, c2;</span><br><span class="line">c1.<span class="built_in">SetCube</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;C1立方体的表面积为：&quot;</span> &lt;&lt; c1.<span class="built_in">CubeS</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;C1立方体的体积为：&quot;</span> &lt;&lt; c1.<span class="built_in">CubeV</span>() &lt;&lt; endl;</span><br><span class="line">c2.<span class="built_in">SetCube</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line"><span class="comment">// 利用成员函数判断立方体C1和C2是否相等</span></span><br><span class="line"><span class="comment">// 定义布尔类型的ret取接收成员行为下的返回值</span></span><br><span class="line"><span class="type">bool</span> ret = c1.<span class="built_in">IssameCube</span>(c2);</span><br><span class="line"><span class="keyword">if</span> (ret)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;C1和C2立方体相同！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;C1和C2立方体不相同！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用全局函数判断立方体C1和C2是否相等</span></span><br><span class="line"><span class="type">bool</span> ret2 = <span class="built_in">IssameCube2</span>(c1, c2);</span><br><span class="line"><span class="keyword">if</span> (ret2)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;C1和C2立方体相同！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;C1和C2立方体不相同！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（2）案例二：点和圆的关系"><a href="#（2）案例二：点和圆的关系" class="headerlink" title="（2）案例二：点和圆的关系"></a>（2）案例二：点和圆的关系</h3><p>设计一个圆形类（circle），和一个点类（point），计算点和圆的位置关系。</p><p>对于这个案例，可能会存在一些地方容易出错，因为对于圆这个类，它里面还包含了一个点类，所以我们应该先定义点类在定义圆类，或者在圆类声明点这个类。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个点类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 设置x,y坐标</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">SetCoord</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// this指针是指向自身类的指针</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;x = x;</span><br><span class="line">        <span class="keyword">this</span>-&gt;y = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取x坐标</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">GetcoordX</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取y坐标</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">GetcoordY</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 定义xy坐标</span></span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 获取圆心</span></span><br><span class="line">    <span class="comment">// 如果后续需要对改点进行修改坐标必须返回引用的类型，这样才能是点本身。</span></span><br><span class="line">    <span class="function">Point &amp;<span class="title">Getcenterpoint</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> centerpoint;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 设置半径</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Setr</span><span class="params">(<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;r = r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取半径</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">Getr</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 定义圆心</span></span><br><span class="line">    <span class="comment">// 在类中可以将其他类作为一个成员</span></span><br><span class="line">    Point centerpoint;</span><br><span class="line">    <span class="comment">// 定义半径</span></span><br><span class="line">    <span class="type">int</span> r;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个函数判断圆和直线的位置关系</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Postion</span><span class="params">(Circle &amp;c, Point &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> length = <span class="built_in">pow</span>(c.<span class="built_in">Getcenterpoint</span>().<span class="built_in">GetcoordX</span>() - p.<span class="built_in">GetcoordX</span>(), <span class="number">2</span>) + <span class="built_in">pow</span>(c.<span class="built_in">Getcenterpoint</span>().<span class="built_in">GetcoordY</span>() - p.<span class="built_in">GetcoordY</span>(), <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> (length == <span class="built_in">pow</span>(c.<span class="built_in">Getr</span>(), <span class="number">2</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;点在圆上！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (length &lt; <span class="built_in">pow</span>(c.<span class="built_in">Getr</span>(), <span class="number">2</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;点在圆内！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;点在圆外&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 分别实例化一个点和一个圆</span></span><br><span class="line">    Circle c1;</span><br><span class="line">    Point p1;</span><br><span class="line">    <span class="comment">// 分别给对应的属性进行赋值</span></span><br><span class="line">    c1.<span class="built_in">Getcenterpoint</span>().<span class="built_in">SetCoord</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    c1.<span class="built_in">Setr</span>(<span class="number">2</span>);</span><br><span class="line">    p1.<span class="built_in">SetCoord</span>(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">    <span class="comment">// 调用函数Postion来判断点和圆的位置关系</span></span><br><span class="line">    <span class="built_in">Postion</span>(c1, p1);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注：</strong>该代码有一个需要特别注意的点，比如第39行为什么返回类型是<code>引用</code>的方式，是因为这样返回的是本身的指针，<code>因为引用本身是一种常量指针，如果返回的是点类的话，返回的圆心并不是圆心本身，而是一个被一一复制的数据</code>，所以在后面的调用中很有可能会发生错误！！！</p><p>对于以上的代码的输出结果是：<br><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202302081726539.png" alt="image-20230208172628409"></p><p>可以发现是符合预期的，根据所设置的点和圆心以及半径来说</p><p>其实对于这种类比较多的还有其他的写法，比如如下所示</p><p>编写Point.h</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 此处编写声明</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">SetCoord</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">GetcoordX</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">GetcoordY</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 定义xy坐标</span></span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">int</span> y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>编写Circle.h</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">// 引用头文件Point.h,因为Circle类中含有点类</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Point.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Point &amp;<span class="title">Getcenterpoint</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Setr</span><span class="params">(<span class="type">int</span> r)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">Getr</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Point centerpoint;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> r;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>编写Circle.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Circle.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">Point &amp;<span class="title">Circle::Getcenterpoint</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> centerpoint;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设置半径</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Circle::Setr</span><span class="params">(<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;r = r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取半径</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Circle::Getr</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写Point.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Point.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 此处编写实现</span></span><br><span class="line"><span class="comment">// 需要加Point::即指明作用域</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Point::SetCoord</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// this指针是指向自身类的指针</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;x = x;</span><br><span class="line">    <span class="keyword">this</span>-&gt;y = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取x坐标</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Point::GetcoordX</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取y坐标</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Point::GetcoordY</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过编写了以上的相关文件之后，对于主文件里面的代码就会变得十分简洁啦！</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Circle.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Point.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个函数判断圆和直线的位置关系</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Postion</span><span class="params">(Circle &amp;c, Point &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> length = <span class="built_in">pow</span>(c.<span class="built_in">Getcenterpoint</span>().<span class="built_in">GetcoordX</span>() - p.<span class="built_in">GetcoordX</span>(), <span class="number">2</span>) + <span class="built_in">pow</span>(c.<span class="built_in">Getcenterpoint</span>().<span class="built_in">GetcoordY</span>() - p.<span class="built_in">GetcoordY</span>(), <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> (length == <span class="built_in">pow</span>(c.<span class="built_in">Getr</span>(), <span class="number">2</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;点在圆上！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (length &lt; <span class="built_in">pow</span>(c.<span class="built_in">Getr</span>(), <span class="number">2</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;点在圆内！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;点在圆外&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 分别实例化一个点和一个圆</span></span><br><span class="line">    Circle c1;</span><br><span class="line">    Point p1;</span><br><span class="line">    <span class="comment">// 分别给对应的属性进行赋值</span></span><br><span class="line">    c1.<span class="built_in">Getcenterpoint</span>().<span class="built_in">SetCoord</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    c1.<span class="built_in">Setr</span>(<span class="number">2</span>);</span><br><span class="line">    p1.<span class="built_in">SetCoord</span>(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">    <span class="comment">// 调用函数Postion来判断点和圆的位置关系</span></span><br><span class="line">    <span class="built_in">Postion</span>(c1, p1);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 类和对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类和对象</title>
      <link href="/2023/01/31/2023/Mon/13/"/>
      <url>/2023/01/31/2023/Mon/13/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h1><h2 id="①三大特性"><a href="#①三大特性" class="headerlink" title="①三大特性"></a>①三大特性</h2><p>C++面向对象的三大特性为：<code>封装、继承、多态</code></p><h2 id="②属性和行为"><a href="#②属性和行为" class="headerlink" title="②属性和行为"></a>②属性和行为</h2><p>C++认为万事万物都皆为对象，对象上有其属性和行为</p><p><strong>例如：</strong></p><p>人可以作为对象，是属于人这个类，属性有姓名、年龄、身高等，行为有走，跑，吃饭等。</p><h2 id="③成员"><a href="#③成员" class="headerlink" title="③成员"></a>③成员</h2><p><strong>类中的属性和行为都可以被称为成员</strong>。比如属性和行为都有以下的几个“绰号”。</p><p><strong>属性：</strong>成员属性、成员变量</p><p><strong>行为：</strong>成员函数、成员方法</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 类和对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数提高</title>
      <link href="/2023/01/31/2023/Mon/12/"/>
      <url>/2023/01/31/2023/Mon/12/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="函数提高"><a href="#函数提高" class="headerlink" title="函数提高"></a>函数提高</h1><h2 id="①函数默认参数"><a href="#①函数默认参数" class="headerlink" title="①函数默认参数"></a>①函数默认参数</h2><p>在C++中，<code>函数形参列表中的形参是可以有默认值的</code></p><p>语法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">返回值类型 函数名(参数 = 默认值)&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种形式可以给程序员提供很大的自由度，比如以下的代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数默认参数 </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b = <span class="number">2</span>, <span class="type">int</span> c = <span class="number">3</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="built_in">func</span>(<span class="number">1</span>) &lt;&lt; endl;<span class="comment">//给此时为被赋默认值的a进行赋值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比如以上的代码给了b还有c默认值，而a没有，此时函数调用的时候只需要给a进行赋值，此时的输出结果如下</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301302226317.png" alt="image-20230130222629235"></p><p>那给了默认值的b还有c是否可以进行改值呢？答案是可以的，比如以下的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数默认参数 </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">func</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b = <span class="number">2</span>, <span class="type">int</span> c = <span class="number">3</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; func(<span class="number">1</span>,<span class="number">3</span>) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//给此时为被赋默认值的a进行赋值,再给b赋值为3</span></span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301302229999.png" alt="image-20230130222921924"></p><p>通过以上的例子我们可以总结如下</p><p><code>如果我们自己传入数据，就用自己的数据，如果没有，那么用默认值</code></p><p>但是，还是有些我们应该注意到以下的几点。</p><p>1、如果<code>某个位置已经有了默认参数</code>，那么从<code>这个位置往后</code>，<code>从左到右都必须有默认值</code>。</p><p>比如会出现下图的报错信息</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301302234439.png" alt="image-20230130223426374"></p><p>2、如果函数<code>声明有了默认参数</code>，函数<code>实现就不能有默认参数了</code> 。</p><p>比如以下例子</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明和实现只能有一个有默认参数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a = <span class="number">114514</span>, <span class="type">int</span> b = <span class="number">114514</span>)</span></span>;<span class="comment">//声明函数func</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a = <span class="number">114514</span>, <span class="type">int</span> b = <span class="number">114514</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">func</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可能代码本身在编译器不会报错，但是运行之后会出现如下错误信息</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301302240605.png" alt="image-20230130224011549"></p><h2 id="②函数占位参数"><a href="#②函数占位参数" class="headerlink" title="②函数占位参数"></a>②函数占位参数</h2><p>C++中函数的形参列表里是可以和有占位参数，<code>用来进行占位，调用函数时候必须补该位置</code>。</p><p>语法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">返回值类型 函数名 (数据类型)&#123;&#125;</span><br></pre></td></tr></table></figure><p>比如以下的代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//占位参数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;成功调用func函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">func</span>(<span class="number">10</span>）;<span class="comment">//必须在括号内输入一个整形数据才能成功调用，起到占位的作用</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于上面学的内容，其实占位参数也可以进行赋予基础值，比如以下的代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//占位参数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> = <span class="number">10</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;成功调用func函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">func</span>(<span class="number">10</span>);<span class="comment">//必须在括号内输入一个整形数据才能成功调用，起到占位的作用</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 这样起到的作用与①中相似，不过占位参数只需要作为了解，等到后面才能发挥其大用。</p><h2 id="③函数重载"><a href="#③函数重载" class="headerlink" title="③函数重载"></a>③函数重载</h2><h3 id="（1）函数重载的概述"><a href="#（1）函数重载的概述" class="headerlink" title="（1）函数重载的概述"></a>（1）函数重载的概述</h3><p>作用：函数名可以相同，<code>提高复用性</code>。</p><p><strong>函数重载满足条件：</strong>-</p><p>1、处于同一作用域下</p><p>2、函数名称相同</p><p>3、函数<code>参数类型不同</code>，或者<code>个数不同或者顺序不同</code>。</p><p>比如以下的例子</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//以下函数都处于全局作用域</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;func 调用成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;func(int a) 调用成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">double</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;func(double a) 调用成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a,<span class="type">float</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;func(int a,float b) 调用成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">float</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;func(float a, int b)调用成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">func</span>();</span><br><span class="line">    <span class="built_in">func</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">func</span>(<span class="number">3.14</span>);</span><br><span class="line">    <span class="built_in">func</span>(<span class="number">10</span>, <span class="number">3.14</span>);</span><br><span class="line">    <span class="built_in">func</span>(<span class="number">3.14</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上四个函数分别可以代表几个点，然后输出结果如下</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301310037097.png" alt="image-20230131003700032"></p><p>都是通过参数类型的不同以及位置的不同来进行调用同名的函数。</p><p><strong>注意：</strong>函数的返回值不可以作为函数重载的条件</p><p>不然会出现以下的报错信息</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301310038535.png" alt="image-20230131003826498"></p><h3 id="（2）函数重载的注意事项"><a href="#（2）函数重载的注意事项" class="headerlink" title="（2）函数重载的注意事项"></a>（2）函数重载的注意事项</h3><p><code>1、引用作为重载条件</code></p><p>如以下的例子</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span>&amp; a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;func(int&amp; a)调用成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;func(const int&amp; a)调用成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">func</span>(a);<span class="comment">//此时实参是一个操控内存空间的变量a，所以应当调用第一个func</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下位输出结果</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301310044703.png" alt="image-20230131004420633"></p><p>如果我们将实参变为一个常量呢？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span>&amp; a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;func(int&amp; a)调用成功！&quot;</span> &lt;&lt; endl;<span class="comment">//int &amp;a = 10//不合法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; a)</span> <span class="comment">// const int&amp;a = 10//合法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;func(const int&amp; a)调用成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">func</span>(<span class="number">10</span>);<span class="comment">//此时实参为常量10，为什么调用了第二个函数也可以看上面关于是否合法的解释</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下为输出结果</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301310045524.png" alt="image-20230131004512457"></p><p>我们会发现常量引用在参数列表的函数被成功调用了，这就是引用在函数重载之间的不同点。</p><p><code>2、函数重载碰到默认参数</code></p><p>对于函数重载碰到默认参数，究竟会碰出什么样的花火呢？比如以下的例子</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b = <span class="number">10</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;func(int a, int b = 10)成功调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;func(int a)成功调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">func</span>(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比如这个例子编译器就会蒙圈，因为第一个函数和第二个函数都能满足调用的情况，所以编译器就不清楚应该调用哪个函数所以会产生报错，报错信息如下</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301310056175.png" alt="image-20230131005601097"></p><p>这就是函数重载碰到默认参数，出现了<code>二义性</code>。一般这种歧义都要尽量避免。</p><p>但是上面的那个真的就都不能进行调用了吗？其实我们稍作修改就可以调用第一个函数！比如以下的例子。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b = <span class="number">10</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;func(int a, int b = 10)成功调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;func(int a)成功调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">func</span>(<span class="number">10</span>,<span class="number">10</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下所示</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301310056999.png" alt="image-20230131005638921"></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>引用</title>
      <link href="/2023/01/30/2023/Mon/11/"/>
      <url>/2023/01/30/2023/Mon/11/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><h2 id="①引用的基本使用"><a href="#①引用的基本使用" class="headerlink" title="①引用的基本使用"></a>①引用的基本使用</h2><p><strong>作用：</strong>给变量起别名</p><p><strong>语法：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型 &amp;别名 = 原名</span><br></pre></td></tr></table></figure><p>以下为引用的一个例子</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//创建引用</span></span><br><span class="line">    <span class="type">int</span>&amp; b = a;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">    b = <span class="number">114514</span>;<span class="comment">//即使是别名也可以操控内存</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="②引用注意事项"><a href="#②引用注意事项" class="headerlink" title="②引用注意事项"></a>②引用注意事项</h2><p>1、引用必须初始化</p><p>2、引用在初始化后，不可以改变</p><p>例子如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span>  a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span>  b = <span class="number">20</span>;</span><br><span class="line">    <span class="comment">//int &amp;c;//错误，引用必须初始化</span></span><br><span class="line">    <span class="type">int</span>&amp; c = a;<span class="comment">//一旦初始化后就不可以更改</span></span><br><span class="line">    c = b;<span class="comment">//这是赋值操作，不是更改引用</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下为输出结果：</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301282330135.png" alt="image-20230128233055057"></p><h2 id="③引用做函数参数"><a href="#③引用做函数参数" class="headerlink" title="③引用做函数参数"></a>③引用做函数参数</h2><p><strong>作用：</strong>函数传参时，可以利用引用的技术让形参修饰实参。</p><p><strong>优点：</strong>可以简化指针修饰实参。</p><p>比如以下的代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//交换函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.值传递</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mySwap01</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> temp = a;</span><br><span class="line">a = b;</span><br><span class="line">b = temp;</span><br><span class="line"></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;in swap01 a = &quot; &lt;&lt; a &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;in swap01 b = &quot; &lt;&lt; b &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.地址传递</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mySwap02</span><span class="params">(<span class="type">int</span>* a, <span class="type">int</span>* b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> temp = *a;</span><br><span class="line">*a = *b;</span><br><span class="line">*b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.引用传递</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mySwap03</span><span class="params">(<span class="type">int</span>&amp; a, <span class="type">int</span>&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">a ^= b ^= a ^= b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">114514</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">1919810</span>;</span><br><span class="line"><span class="comment">/*mySwap01(a, b);*/</span><span class="comment">//值传递，形参不会修饰实参</span></span><br><span class="line"><span class="comment">/*mySwap02(&amp;a, &amp;b);*/</span><span class="comment">//地址传递，形参会修饰实参</span></span><br><span class="line"><span class="built_in">mySwap03</span>(a, b);<span class="comment">//引用传递，形参会修饰实参</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于这串代码的<code>mySwap03</code>函数的参数列表中的<code>int &amp;a</code>和<code>int &amp;b</code>分别对应的是实参a和b的别名，即在函数<code>mySwap03</code>的别名，可以通过别名之间值的交换来达到实参的值的交换，对比<code>mySwap01</code>就是多了<code>&amp;</code>。</p><p>以下为上面代码的输出结果：</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301291653501.png" alt="image-20230129165333418"></p><h2 id="④引用做函数的返回值"><a href="#④引用做函数的返回值" class="headerlink" title="④引用做函数的返回值"></a>④引用做函数的返回值</h2><p><strong>作用：</strong>引用是可以作为函数的返回值存在的</p><p><strong>注意：</strong>不要返回局部变量的引用，因为局部变量在栈上，随着函数的结束而被释放。</p><p>用法：函数调用作为左值</p><p>对于用法的功能如下面代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//引用做函数的返回值</span></span><br><span class="line"><span class="comment">//1、不要返回局部变量的引用</span></span><br><span class="line"><span class="function"><span class="type">int</span>&amp; <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">114514</span>;<span class="comment">//局部变量存放在四区中的栈区，出函数自动释放</span></span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2、函数的调用可以作为左值</span></span><br><span class="line"><span class="function"><span class="type">int</span>&amp; <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> a = <span class="number">114514</span>;<span class="comment">//加了static关键字变成了静态全局变量，随着程序的结束而释放</span></span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//int&amp; b = test01();</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; b &lt;&lt; endl;// 第一次编译器做了保留</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; b &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、函数的调用可以作为左值</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span>&amp; c = <span class="built_in">test02</span>();</span><br><span class="line">cout &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; c &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test02</span>() = <span class="number">1919810</span>;<span class="comment">//函数的调用被当作左值</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; c &lt;&lt; endl;<span class="comment">//因为c相当于是函数调用的别名，函数调用作为左值被修改，c就跟着也被修改</span></span><br><span class="line">cout &lt;&lt; c &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码的输出结果如下所示</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301291733158.png" alt="image-20230129173325080"></p><p>对test01函数的结果其实跟内存四区中不能把局部变量当为返回值一样，是因为出了函数将会被释放，而第一次编译器会做保留。</p><h2 id="⑤引用的本质"><a href="#⑤引用的本质" class="headerlink" title="⑤引用的本质"></a>⑤引用的本质</h2><p><strong>本质：</strong>引用的本质在C++内部实现是一个<code>指针常量</code></p><p>比如通过以下的图解</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301302144378.png" alt="image-20230130214417244"></p><h2 id="⑥常量引用"><a href="#⑥常量引用" class="headerlink" title="⑥常量引用"></a>⑥常量引用</h2><p>作用：常量引用主要来修饰形参，防止误操作。</p><p>像通过（5）我们能够清楚引用的本质是个常量指针所以引用必须引一块合法的内存空间，不然会出现以下的报错</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301302203523.png" alt="image-20230130220347467"></p><p>但是加上了const就不一样了，比如以下的代码</p><p>如果我们不用const，不小心在实现打印功能的函数里面修改了形参的值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Pritnffunc</span><span class="params">(<span class="type">int</span>&amp; a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">a = <span class="number">1919810</span>;</span><br><span class="line">cout &lt;&lt;<span class="string">&quot;在Printfunc a = &quot;</span>&lt;&lt; a &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//常量引用</span></span><br><span class="line"><span class="comment">//使用场景：用来修饰形参，防止误操作</span></span><br><span class="line"><span class="comment">/*int a = 10;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//加上const之后 编译器将代码识别修改为 int temp = 10; int &amp;b = temp;</span></span><br><span class="line"><span class="comment">//const int&amp; b = 10;//引用必须引一块合法的内存空间</span></span><br><span class="line"><span class="comment">//所以下面就不能对b进行修改了 </span></span><br><span class="line"><span class="comment">//b = 114514;//加入const之后变成为只读，不可以修改。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//比如我们想用个函数实现打印的功能</span></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">Pritnffunc</span>(a);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;在main a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<span class="comment">//</span></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下:</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301302211367.png" alt="image-20230130221103289"></p><p>我们发现这样导致值被修改了，如果我们加入了const呢？</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301302212294.png" alt="image-20230130221204229"></p><p>就会出现如上图的报错，通过const关键字修饰可以很好的避免误操作导致形参改变了实参的值。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内存分区模型</title>
      <link href="/2023/01/29/2023/Mon/10/"/>
      <url>/2023/01/29/2023/Mon/10/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="内存分区模型"><a href="#内存分区模型" class="headerlink" title="内存分区模型"></a>内存分区模型</h1><p>C++程序在执行中时，将内存划分为<code>4个区域</code></p><p><strong>1、代码区</strong>：存放函数的二进制代码，由操作系统进行管理。</p><p><strong>2、全局区</strong>：存放全局变量和静态变量以及常量。</p><p><strong>3、栈区</strong>：由编译器自动分配释放，存放函数的参数值，局部变量。</p><p><strong>4、堆区</strong>：由程序员分配和释放，若程序员不释放，结束时由操作系统回收</p><p><strong>内存四区的意义:</strong></p><p>不同区域存放的数据，赋予不同的生命周期，给我们更大的灵活编程。</p><h2 id="①程序运行前"><a href="#①程序运行前" class="headerlink" title="①程序运行前"></a>①程序运行前</h2><p>在程序编译后，生成了exe可执行程序，<code>未执行该程序前分为两个区域</code>。</p><p>以下为内存四区的特点</p><p><strong>代码区：</strong></p><p>1、存放CPU执行的机器命令</p><p>2、代码区是<code>共享</code>的,共享的目的是<code>对于频繁被执行的程序，只需要在内存中有一份代码即可</code>。（比如每执行了一次代码结束之后，就会生存一个exe文件，存储了之前执行成功的那份代码）</p><p>3、代码区是<code>只读</code>的，使其制度的原因是<code>防止程序意外的修改了它的代码</code></p><p><strong>全局区：</strong></p><p>1、全局变量和静态变量存放在此。</p><p>2、全局区还包含了<code>常量区</code>，<code>字符串常量</code>和<code>其他常量</code>也存放在此。</p><p>3、<code>读区域的数据在程序结束后由操作系统释放</code>。</p><p>那么对于全局区和不在全局区的变量究竟有什么样的区别呢？我们来看下面的代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局变量</span></span><br><span class="line"><span class="type">int</span> g_a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> g_b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// const修饰的全局变量</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> c_g_a = <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> c_g_b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 全局区</span></span><br><span class="line">    <span class="comment">// 全局变量、静态变量、常量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建普通的局部变量</span></span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">10</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;局部变量a的地址为: &quot;</span> &lt;&lt; (<span class="type">int</span>)&amp;a &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;局部变量b的地址为: &quot;</span> &lt;&lt; (<span class="type">int</span>)&amp;b &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;全局变量g_a的地址为: &quot;</span> &lt;&lt; (<span class="type">int</span>)&amp;g_a &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;全局变量g_a的地址为: &quot;</span> &lt;&lt; (<span class="type">int</span>)&amp;g_a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态变量</span></span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> s_a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> s_b = <span class="number">10</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;静态变量s_a的地址为: &quot;</span> &lt;&lt; (<span class="type">int</span>)&amp;s_a &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;静态变量s_b的地址为: &quot;</span> &lt;&lt; (<span class="type">int</span>)&amp;s_b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 常量</span></span><br><span class="line">    <span class="comment">// 字符串常量</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;字符串常量的地址为: &quot;</span> &lt;&lt; (<span class="type">int</span>)<span class="string">&quot;hello world&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// const修饰的变量</span></span><br><span class="line">    <span class="comment">// const修饰的全局变量</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;全局常量c_g_a的地址为: &quot;</span> &lt;&lt; (<span class="type">int</span>)&amp;c_g_a &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;全局常量c_g_b的地址为: &quot;</span> &lt;&lt; (<span class="type">int</span>)&amp;c_g_b &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// const修饰的局部变量</span></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> c_a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> c_b = <span class="number">10</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;局部常量c_a的地址为: &quot;</span> &lt;&lt; (<span class="type">int</span>)&amp;c_a &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;局部常量c_b的地址为: &quot;</span> &lt;&lt; (<span class="type">int</span>)&amp;c_b &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 代码的输出结果如下:<br><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301282110148.png" alt="image-20230128211013957"></p><p>我们可以发现处于全局区的变量地址十分相近，而局部变量就和全局区的变量相差很大，大概的图解如下。</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301282116525.png" alt="image-20230128211634405"></p><h2 id="②程序运行后"><a href="#②程序运行后" class="headerlink" title="②程序运行后"></a>②程序运行后</h2><p><strong>栈区:</strong></p><p>1、由编译器自动分配释放，存放函数的参数值，局部变量等</p><p><strong>2、注意事项</strong>：<code>不要返回局部变量的地址</code>，栈区开辟的数据由编译器自动释放。</p><p>注意事项中的实例如下所示:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span>* <span class="title">func</span><span class="params">()</span><span class="comment">//在函数参数列表的变量也存放在栈区</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;<span class="comment">//局部变量 存放在栈区，栈区的数据在函数执行完后自动释放</span></span><br><span class="line">    <span class="keyword">return</span> &amp;a;<span class="comment">//返回局部变量的地址。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//接收func函数的返回值 </span></span><br><span class="line">    <span class="type">int</span>* p = <span class="built_in">func</span>();</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; *p &lt;&lt; endl;<span class="comment">//第一个可以打印正确的数字是因为编译器做了保留</span></span><br><span class="line">    cout &lt;&lt; *p &lt;&lt; endl;<span class="comment">//第二次这个数据就不在保留了</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);   </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 由于多种编译器打印结果不一样，以下展示DEVC++，VSCODE，VS2019的结果</p><p><strong>DEVC++：</strong></p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301282133584.png" alt="image-20230128213301511"></p><p><strong>VSCODE：</strong></p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301282133388.png" alt="image-20230128213326319"></p><p><strong>报错信息:</strong></p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301282133856.png" alt="image-20230128213350814"></p><p><strong>VS2019:</strong></p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301282134134.png" alt="image-20230128213438074"></p><p>虽然可能编译器不同会产生不同的结果，但是对于这样错误的做法仍然不推荐！！！</p><p><strong>堆区:</strong></p><p>1、由程序员分配释放，若程序员不释放，<code>程序结束时由操作系统回收</code>。</p><p>2、在C++主要利用<code>new</code>在堆区开辟内存。 </p><p> 对于1、的解释我们可以用如下例子帮忙理解，同样是上面的代码，但是不太相同。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> *<span class="title">func</span><span class="params">()</span> <span class="comment">// 在函数参数列表的变量也存放在栈区</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//利用nex关键字 可以讲数据开辟在堆区</span></span><br><span class="line">    <span class="comment">//指针 本质也是局部变量，放在战上，指针保存的数据（堆区的编号地址）是放在堆区的。</span></span><br><span class="line">    <span class="type">int</span> *a = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">10</span>);<span class="comment">//用new关键字在堆区开辟数据并返回地址</span></span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 接收func函数的返回值</span></span><br><span class="line">    <span class="type">int</span> *p = <span class="built_in">func</span>();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; *p &lt;&lt; endl; <span class="comment">// 第一个可以打印正确的数字是因为编译器做了保留</span></span><br><span class="line">    cout &lt;&lt; *p &lt;&lt; endl; <span class="comment">// 第二次这个数据就不在保留了</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时打印的结果就无论如何都是对应的结果了</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301282144905.png" alt="image-20230128214425834"></p><p>对于上面的代码堆区以及栈区的图解如下：<br><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301282149613.png" alt="image-20230128214911547"></p><h2 id="③new操作符"><a href="#③new操作符" class="headerlink" title="③new操作符"></a>③new操作符</h2><p>C++中利用<code>new</code>操作符在堆区开辟数据</p><p>堆区开辟的数据，由程序员手动开辟，手动释放、释放利用操作符<code>delete</code></p><p><strong>语法：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> 数据类型</span><br></pre></td></tr></table></figure><p><code>利用new创建的数据，会返回该数据对应的类型指针。</code></p><p>对于new的基本语法，如下例子</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1、new的基本语法</span></span><br><span class="line"><span class="function"><span class="type">int</span>* <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//在堆区创建一个整形的数据</span></span><br><span class="line">    <span class="comment">//new返回的是该数据类型的指针</span></span><br><span class="line">    <span class="type">int</span>* p = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试案例一</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span>* p = <span class="built_in">func</span>();</span><br><span class="line">    cout &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line"><span class="comment">/*    delete p;</span></span><br><span class="line"><span class="comment">    cout &lt;&lt; *p &lt;&lt; endl;*/</span><span class="comment">//当程序执行到此处会报错，此操作非法</span></span><br><span class="line">    <span class="comment">//堆区的数据由程序员管理开辟，程序员来进行管理释放</span></span><br><span class="line">    <span class="comment">//如果想释放堆区的数据，利用关键字delete</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试案例二</span></span><br><span class="line"><span class="comment">//在堆区开辟数组</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//在堆区创建10整形数据的数组</span></span><br><span class="line">    <span class="type">int</span>* arr = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">10</span>];<span class="comment">//10代表数组由十个元素,返回数组连续空间的首地址</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//操控数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        arr[i] = <span class="number">100</span> + i;<span class="comment">//给10个元素赋值100-109</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//验证数据是否有</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; arr[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//释放堆区的数组</span></span><br><span class="line">    <span class="comment">//释放数组的时候，要加[]才可以</span></span><br><span class="line">    <span class="keyword">delete</span>[] arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test01</span>();</span><br><span class="line">    <span class="built_in">test02</span>();</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下为输出结果:</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301282307395.png" alt="image-20230128230715320"></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>结构体数组和结构体指针</title>
      <link href="/2023/01/23/2023/Mon/9/"/>
      <url>/2023/01/23/2023/Mon/9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="结构体数组和结构体指针"><a href="#结构体数组和结构体指针" class="headerlink" title="结构体数组和结构体指针"></a>结构体数组和结构体指针</h1><h2 id="①结构体数组"><a href="#①结构体数组" class="headerlink" title="①结构体数组"></a>①结构体数组</h2><h3 id="（1）定义结构体数组"><a href="#（1）定义结构体数组" class="headerlink" title="（1）定义结构体数组"></a>（1）定义结构体数组</h3><p>定义结构体数组有多种方法：</p><p>第一种方法是在声明结构体的时候进行定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> 结构体名称</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">结构体成员;</span><br><span class="line">&#125; 数组名[长度];</span><br></pre></td></tr></table></figure><p>第二种方法是先声明一个结构体类型（比如上面的Book），再用此类型定义一个结构体数组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> 结构体名称</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">结构体成员;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> 结构体名称 数组名[长度];</span></span><br></pre></td></tr></table></figure><h3 id="（2）初始化结构体数组"><a href="#（2）初始化结构体数组" class="headerlink" title="（2）初始化结构体数组"></a>（2）初始化结构体数组</h3><p>我们也可以在定义结构体数组的时候将它进行初始化，比如以下代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Gal</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> title[<span class="number">144</span>];</span><br><span class="line">    <span class="type">char</span> tag[<span class="number">40</span>];</span><br><span class="line">    <span class="type">char</span> gametag[<span class="number">40</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Gal</span> <span class="title">gal</span>[3] =</span> &#123;</span><br><span class="line">    &#123;<span class="string">&quot;《ATRI》&quot;</span>, <span class="string">&quot;催泪&quot;</span>, <span class="string">&quot;全年龄&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;《星空列车与白的旅行》&quot;</span>, <span class="string">&quot;催泪&quot;</span>, <span class="string">&quot;全年龄&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;《Loopers》&quot;</span>, <span class="string">&quot;催泪&quot;</span>, <span class="string">&quot;全年龄&quot;</span>&#125;&#125;;</span><br></pre></td></tr></table></figure><h3 id="（3）结构体数组的访问"><a href="#（3）结构体数组的访问" class="headerlink" title="（3）结构体数组的访问"></a>（3）结构体数组的访问</h3><p>如果想要访问结构体数组，可能和前面访问数组有点类似，用到循环可以达到快速访问数组所有元素，数组内结构体所包含的元素用结构体的访问方法即可，代码如下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Gal</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> title[<span class="number">144</span>];</span><br><span class="line">    <span class="type">char</span> tag[<span class="number">40</span>];</span><br><span class="line">    <span class="type">char</span> gametag[<span class="number">40</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Gal</span> <span class="title">gal</span>[3] =</span> &#123;</span><br><span class="line">    &#123;<span class="string">&quot;《ATRI》&quot;</span>, <span class="string">&quot;催泪&quot;</span>, <span class="string">&quot;全年龄&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;《星空列车与白的旅行》&quot;</span>, <span class="string">&quot;催泪&quot;</span>, <span class="string">&quot;全年龄&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;《Loopers》&quot;</span>, <span class="string">&quot;催泪&quot;</span>, <span class="string">&quot;全年龄&quot;</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;======================\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;作品名字: %s\n&quot;</span>, gal[i].title);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;作品类型: %s\n&quot;</span>, gal[i].tag);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;游戏类型: %s\n&quot;</span>, gal[i].gametag);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;======================\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下所示:</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301231536440.png" alt="image-20230123153652354"></p><h2 id="②结构体指针"><a href="#②结构体指针" class="headerlink" title="②结构体指针"></a>②结构体指针</h2><h3 id="（1）定义结构体指针"><a href="#（1）定义结构体指针" class="headerlink" title="（1）定义结构体指针"></a>（1）定义结构体指针</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Gal</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> title[<span class="number">144</span>];</span><br><span class="line">    <span class="type">char</span> tag[<span class="number">40</span>];</span><br><span class="line">    <span class="type">char</span> gametag[<span class="number">40</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Gal</span> *<span class="title">pt</span>//定义结构体指针</span></span><br></pre></td></tr></table></figure><p>如果我们要把结构体指针指向一个已经初始化的结构体变量的话一定要在结构体变量名前加上<code>&amp;</code>因为结构体的变量名不像数组那样</p><p>比如以下例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Gal</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> title[<span class="number">144</span>];</span><br><span class="line">    <span class="type">char</span> tag[<span class="number">40</span>];</span><br><span class="line">    <span class="type">char</span> gametag[<span class="number">40</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Gal</span> <span class="title">gal</span> =</span> &#123;<span class="string">&quot;《ATRI》&quot;</span>, <span class="string">&quot;催泪&quot;</span>, <span class="string">&quot;全年龄&quot;</span>&#125;,</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Gal</span> *<span class="title">pt</span> =</span> &amp;gal; <span class="comment">// 定义结构体指针</span></span><br></pre></td></tr></table></figure><h3 id="（2）利用结构体指针访问"><a href="#（2）利用结构体指针访问" class="headerlink" title="（2）利用结构体指针访问"></a>（2）利用结构体指针访问</h3><p>通过结构体指针访问结构体成员有两种方法</p><p><strong>第一种：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(*结构体指针).成员名<span class="comment">//注意小括号，不然根据运算符优先级是先运算&quot;.&quot;</span></span><br></pre></td></tr></table></figure><p><strong>第二种（常用）：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">结构体指针-&gt;成员名</span><br></pre></td></tr></table></figure><p>比如以下的例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Gal</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> title[<span class="number">144</span>];</span><br><span class="line">    <span class="type">char</span> tag[<span class="number">40</span>];</span><br><span class="line">    <span class="type">char</span> gametag[<span class="number">40</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Gal</span> <span class="title">gal</span> =</span> &#123;<span class="string">&quot;《ATRI》&quot;</span>, <span class="string">&quot;催泪&quot;</span>, <span class="string">&quot;全年龄&quot;</span>&#125;,</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Gal</span> *<span class="title">pt</span> =</span> &amp;gal; <span class="comment">// 定义结构体指针</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;作品名字: %s\n&quot;</span>, pt-&gt;title);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;作品类型: %s\n&quot;</span>, pt-&gt;tag);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;游戏类型: %s\n&quot;</span>, pt-&gt;gametag);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下所示</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301231611907.png" alt="image-20230123161130835"></p>]]></content>
      
      
      <categories>
          
          <category> c语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>结构体初步</title>
      <link href="/2023/01/22/2023/Mon/8/"/>
      <url>/2023/01/22/2023/Mon/8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="结构体初步"><a href="#结构体初步" class="headerlink" title="结构体初步"></a>结构体初步</h1><h2 id="①结构体的声明"><a href="#①结构体的声明" class="headerlink" title="①结构体的声明"></a>①结构体的声明</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> 结构体名称</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    结构体成员<span class="number">1</span>;</span><br><span class="line">    结构体成员<span class="number">2</span>;</span><br><span class="line">    结构体成员<span class="number">3</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;;<span class="comment">//注意分号</span></span><br><span class="line"><span class="comment">//比如以下的声明</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Book</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> title[<span class="number">128</span>];</span><br><span class="line">    <span class="type">char</span> author[<span class="number">40</span>];</span><br><span class="line">    <span class="type">float</span> price;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> date;</span><br><span class="line">    <span class="type">char</span> publisher[<span class="number">40</span>];</span><br><span class="line">&#125;;<span class="comment">//用结构体变量存储一本书籍的诸多信息</span></span><br></pre></td></tr></table></figure><h2 id="②结构体的定义"><a href="#②结构体的定义" class="headerlink" title="②结构体的定义"></a>②结构体的定义</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> 结构体名称 结构体变量名</span></span><br></pre></td></tr></table></figure><p> 比如以下的例子。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Book</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> title[<span class="number">128</span>];</span><br><span class="line">    <span class="type">char</span> author[<span class="number">40</span>];</span><br><span class="line">    <span class="type">float</span> price;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> date;</span><br><span class="line">    <span class="type">char</span> publisher[<span class="number">40</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Book</span> <span class="title">book</span>;</span><span class="comment">//定义结构体变量</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="③结构体的访问"><a href="#③结构体的访问" class="headerlink" title="③结构体的访问"></a>③结构体的访问</h2><p>要访问结构体的成员，我们需要引入一个新的运算符 – 点号(.)运算符。比如book.title就是引用book结构体的title成员，它是一个字符数组;而book.price则是引用book结构体的price成员，它是一个浮点型的变量。</p><p>比如以下的例子。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Book</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> title[<span class="number">128</span>];</span><br><span class="line">    <span class="type">char</span> author[<span class="number">40</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Book</span> <span class="title">book</span>;</span> <span class="comment">// 定义结构体变量</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入书名:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, book.title);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入作者:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, book.author);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=====数据录入完毕=====\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;书名:%s\n&quot;</span>, book.title);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;作者:%s\n&quot;</span>, book.author);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;===================\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下为输出结果:</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301221118706.png" alt="image-20230122111807635"></p><h2 id="④结构体变量的一般初始化"><a href="#④结构体变量的一般初始化" class="headerlink" title="④结构体变量的一般初始化"></a>④结构体变量的一般初始化</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化结构体变量</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Book</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> title[<span class="number">128</span>];</span><br><span class="line">    <span class="type">char</span> contry[<span class="number">40</span>];</span><br><span class="line">&#125; book = &#123;</span><br><span class="line">    <span class="string">&quot;《星空列车与白的旅行》&quot;</span>,</span><br><span class="line">    <span class="string">&quot;日本galgame&quot;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>注: 结构体变量的类型必须对号入座，比如我上面写的都是字符串类型，所以也就只能用字符串类型。</strong> </p><h2 id="⑤初始结构体的指定成员值"><a href="#⑤初始结构体的指定成员值" class="headerlink" title="⑤初始结构体的指定成员值"></a>⑤初始结构体的指定成员值</h2><p>语法和数组类似，不过结构体指定初始化成员使用点号(.)运算符和成员名。</p><p>比如我们可以让程序只初始化Book的price成员：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Book</span> <span class="title">book</span> =</span> &#123;.price = <span class="number">48.8</span>&#125;;</span><br></pre></td></tr></table></figure><p>还可以不按结构体声明的成员顺序进行初始化 ：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BOOk</span> <span class="title">book</span> =</span> &#123;</span><br><span class="line">    .publisher = <span class="string">&quot;清华大学出版社&quot;</span>,</span><br><span class="line">    .price = <span class="number">4838</span>,</span><br><span class="line">    .date = <span class="number">20171111</span>&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="⑥结构体变量所占的内存空间"><a href="#⑥结构体变量所占的内存空间" class="headerlink" title="⑥结构体变量所占的内存空间"></a>⑥结构体变量所占的内存空间</h2><p>关于结构体变量所占的空间内存，先给出几个例子来看最后的结果。</p><p><strong>例子1:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Book</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> title[<span class="number">128</span>];<span class="comment">//128</span></span><br><span class="line">    <span class="type">char</span> author[<span class="number">40</span>];<span class="comment">//40</span></span><br><span class="line">    <span class="type">float</span> price;<span class="comment">//4</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> date;<span class="comment">//4</span></span><br><span class="line">    <span class="type">char</span> publisher[<span class="number">40</span>];<span class="comment">//40</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;struct Book sizeof = %d&quot;</span>,<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Book));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>例子2:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Book</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> title;<span class="comment">//1</span></span><br><span class="line">    <span class="type">int</span> price;<span class="comment">//4</span></span><br><span class="line">    <span class="type">char</span> author;<span class="comment">//1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;struct Book sizeof = %d&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> Book));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>例子3:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Book</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> title;<span class="comment">//1</span></span><br><span class="line">    <span class="type">char</span> author;<span class="comment">//1</span></span><br><span class="line">    <span class="type">int</span> price;<span class="comment">//4</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;struct Book sizeof = %d&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> Book));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>例子4:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Book</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> m[<span class="number">5</span>];<span class="comment">//5</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line"></span><br><span class="line">        <span class="type">char</span> c;<span class="comment">//1</span></span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> j;<span class="comment">//8</span></span><br><span class="line"></span><br><span class="line">    &#125; ss; </span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> a[<span class="number">4</span>];<span class="comment">//4</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;struct Book sizeof = %d&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> Book));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于上面四个例子输出结果分别是</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301221135642.png" alt="image-20230122113512567"></p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301221135908.png" alt="image-20230122113535843"></p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301221136411.png" alt="image-20230122113601346"></p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301221447062.png" alt="image-20230122144740964"></p><p>看到上面的结果可能会感觉很奇怪？如果结构体内部如例子2一样的话应该常理来说是占6个字节啊，可是为什么却占了12个字节？其实这之间发生了<code>内存对齐</code>。</p><p>内存对齐一般都占小字节的类型向占最大字节(<strong>除去字符串类型以及结构体类型之外</strong>)的类型保持一致,比如以下图解。</p><p><strong>例子1:</strong></p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301221501845.png" alt="image-20230122150108781"></p><p><strong>例子2:</strong></p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301221506165.png" alt="image-20230122150626105"></p><p><strong>例子3:</strong></p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301221512898.png" alt="image-20230122151215853"></p><p><strong>例子4:</strong></p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301221520068.png" alt="image-20230122152057996"></p><h2 id="⑦结构体嵌套"><a href="#⑦结构体嵌套" class="headerlink" title="⑦结构体嵌套"></a>⑦结构体嵌套</h2><p>对⑥中例子的代码，我们可以发现，其实结构体也可以发生嵌套，而其实有时候我们是需要结构体的嵌套来完成一些事情的，比如以下例子。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Date</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> year;</span><br><span class="line">    <span class="type">int</span> month;</span><br><span class="line">    <span class="type">int</span> day;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Book</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> title[<span class="number">128</span>];</span><br><span class="line">    <span class="type">char</span> author[<span class="number">40</span>];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Date</span> <span class="title">date</span>;</span></span><br><span class="line">&#125; book = &#123;</span><br><span class="line">    <span class="string">&quot;《约会大作战》&quot;</span>,</span><br><span class="line">    <span class="string">&quot;橘公司&quot;</span>,</span><br><span class="line">    &#123;<span class="number">2012</span>, <span class="number">4</span>, <span class="number">26</span>&#125; <span class="comment">// 同样的方式进行初始化</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;书名 : %s\n&quot;</span>, book.title);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;作者 : %s\n&quot;</span>, book.author);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;日期 : %d-%d-%d&quot;</span>, book.date.year, book.date.month, book.date.day);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下为输出结果</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301222159821.png" alt="image-20230122215923716"></p><h2 id="⑧结构体变量的传递"><a href="#⑧结构体变量的传递" class="headerlink" title="⑧结构体变量的传递"></a>⑧结构体变量的传递</h2><p>对于结构体变量其实可以想其他变量一样，将<code>同类型的变量</code>进行相互赋值，比如以下的例子。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Gal</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> title[<span class="number">144</span>];</span><br><span class="line">    <span class="type">char</span> tag[<span class="number">40</span>];</span><br><span class="line">    <span class="type">char</span> gametag[<span class="number">40</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Gal</span> <span class="title">gal1</span> =</span> &#123;<span class="string">&quot;《ATRI》&quot;</span>, <span class="string">&quot;催泪&quot;</span>, <span class="string">&quot;全年龄&quot;</span>&#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Gal</span> <span class="title">gal2</span> =</span> &#123;<span class="string">&quot;《Loopers》&quot;</span>, <span class="string">&quot;催泪&quot;</span>, <span class="string">&quot;全年龄&quot;</span>&#125;;</span><br><span class="line">    <span class="comment">//交换gal1和gal2的值</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Gal</span> <span class="title">temp</span> =</span> gal1;</span><br><span class="line">    gal1 = gal2;</span><br><span class="line">    gal2 = temp;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;作品名字: %s\n&quot;</span>, gal1.title);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;作品类型: %s\n&quot;</span>, gal1.tag);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;游戏类型: %s\n&quot;</span>, gal1.gametag);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;======================\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;作品名字: %s\n&quot;</span>, gal2.title);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;作品类型: %s\n&quot;</span>, gal2.tag);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;游戏类型: %s\n&quot;</span>, gal2.gametag);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;======================\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下为输出结果</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301231630784.png" alt="image-20230123163003688"></p><p>但是注意一点，就是必须两个<code>结构体类型完全一致</code>才能进行交换和互相赋值！！！</p><h2 id="⑨结构体函数"><a href="#⑨结构体函数" class="headerlink" title="⑨结构体函数"></a>⑨结构体函数</h2><p>其实结构体也可以作为函数的返回值，比如看下个例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Gal</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> title[<span class="number">144</span>];</span><br><span class="line">    <span class="type">char</span> tag[<span class="number">40</span>];</span><br><span class="line">    <span class="type">char</span> gametag[<span class="number">40</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> Gal <span class="title function_">ChangeGal</span><span class="params">(<span class="keyword">struct</span> Gal gal)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 利用字符串处理函数将结构体的值进行修改</span></span><br><span class="line">    <span class="built_in">strcpy</span>(gal.title, <span class="string">&quot;《星空列车与白的旅行》&quot;</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(gal.tag, <span class="string">&quot;催泪&quot;</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(gal.gametag, <span class="string">&quot;全年龄&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> gal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Gal</span> <span class="title">gal1</span> =</span> &#123;<span class="string">&quot;《ATRI》&quot;</span>, <span class="string">&quot;催泪&quot;</span>, <span class="string">&quot;全年龄&quot;</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;进入ChangGal函数之前:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;作品名字: %s\n&quot;</span>, gal1.title);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;作品类型: %s\n&quot;</span>, gal1.tag);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;游戏类型: %s\n&quot;</span>, gal1.gametag);</span><br><span class="line">    gal1 = ChangeGal(gal1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;进入ChangGal函数之后:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;作品名字: %s\n&quot;</span>, gal1.title);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;作品类型: %s\n&quot;</span>, gal1.tag);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;游戏类型: %s\n&quot;</span>, gal1.gametag);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>里面用到的字符串处理函数不懂的可以参考我以前的博客：<a href="https://bg.luoxi.work/2022/12/01/DEnot/1/">❤️</a></p><p>以下为输出结果</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301231644722.png" alt="image-20230123164429626"></p><p>可以看到结构体其实也可以作为函数的返回值！</p>]]></content>
      
      
      <categories>
          
          <category> c语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态内存管理</title>
      <link href="/2023/01/21/2023/Mon/6/"/>
      <url>/2023/01/21/2023/Mon/6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="动态内存管理"><a href="#动态内存管理" class="headerlink" title="动态内存管理"></a>动态内存管理</h1><h2 id="①内存管理函数"><a href="#①内存管理函数" class="headerlink" title="①内存管理函数"></a>①内存管理函数</h2><p>当我们对于一个数组<code>申请内存空间</code>的时候，一开始我们<code>都必须先定义好数组的长度来进行存放相应的数据</code>，或者采用<code>宏定义的方式来进行修改宏定义相应的值来改变数组的长度</code>。那有没有一种方式能够动态的申请我们所需要的空间呢？其实只需要调用&lt;stdlib.h&gt;头文件的库函数中的动<code>态内存管理相应的函数</code>就能灵活的实现此功能，大大的提高了效率！</p><p>下面将展示常用的几个内存管理的函数，</p><p><code>malloc</code>：申请动态内存空间。</p><p><code>free</code>：释放动态内存空间。</p><p><code>calloc</code> :  申请并初始化一系列内存空间。</p><p><code>realloc</code>：重新分配内存空间。</p><h3 id="（1）malloc"><a href="#（1）malloc" class="headerlink" title="（1）malloc"></a>（1）malloc</h3><p><strong>函数原型:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *<span class="title function_">malloc</span><span class="params">(<span class="type">size_t</span> size)</span>;<span class="comment">//使用void类型是因为void类型可以转换为任何一种类型的空间</span></span><br></pre></td></tr></table></figure><p><code>malloc</code>函数向系统申请分配size个字节的内存空间，并返回一个指向这块空间的指针。</p><p>如果<code>函数调用成功</code>，<code>返回一个指向申请的内存空间的指针</code>，由于返回类型是void指针(void *)，所以它可以被转换为任何类型的数据；如果<code>函数调用失败</code>，<code>返回值是NULL</code>。另外，如果<code>size参数设置为零</code>，<code>返回值也可能是NULL</code>，但这并不意味着函数调用失败。</p><p>下面我们用一串代码来展示它的作用吧</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">void</span> *ptr = (<span class="type">void</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入一个整数:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, ptr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;你输入的整数是:%d\n&quot;</span>, *(<span class="type">int</span> *)ptr);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301202153334.png" alt="image-20230120215354273"></p><p>可能很多人觉得有没有malloc其实都一样，但是用malloc申请的内存之后，这个内存是位于<code>堆</code>上的，他<code>不会</code>因为出了作用域而<code>被程序自动释放</code>，而是需要<code>程序员自己进行释放或者程序结束</code>。而于它相对的是<code>栈</code>。所以以上的代码是存在一个错误就是没有释放内存，这样会导致<code>内存泄漏</code>。那么我们应该怎么释放呢？那就要用到<code>free</code>函数了</p><h3 id="（2）free"><a href="#（2）free" class="headerlink" title="（2）free"></a>（2）free</h3><p><strong>函数原型：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">free</span><span class="params">(<span class="type">void</span> *ptr)</span></span><br></pre></td></tr></table></figure><p>free函数释放ptr参数指向的内存空间。<code>该内存空间必须是由malloc,calloc,或realloc函数申请的。否则，该函数将导致未定义行为</code>。如果ptr参数是NULL，则不执行任何操作。</p><p><strong>注意：该函数并不会修改ptr参数的值，所以调用后它仍然指向原来的地方（变为非法空间）。</strong></p><p>所以上面的代码我们需要稍作一点点修改</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">void</span> *ptr = (<span class="type">void</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入一个整数:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, ptr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;你输入的整数是:%d\n&quot;</span>, *(<span class="type">int</span> *)ptr);</span><br><span class="line">    <span class="built_in">free</span> (ptr);<span class="comment">//释放占用的堆内存</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 如果我们提前用free函数进行释放的话</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">void</span> *ptr = (<span class="type">void</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入一个整数:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, ptr);</span><br><span class="line">    <span class="built_in">free</span>(ptr); <span class="comment">// 释放占用的堆内存</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;你输入的整数是:%d\n&quot;</span>, *(<span class="type">int</span> *)ptr);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时输出的结果就会很奇怪</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301202210646.png" alt="image-20230120221017570"></p><h3 id="（3）calloc"><a href="#（3）calloc" class="headerlink" title="（3）calloc"></a>（3）calloc</h3><p><strong>函数原型：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *<span class="title function_">calloc</span><span class="params">(<span class="type">size_t</span> nmemb, <span class="type">size_t</span> size)</span>;</span><br></pre></td></tr></table></figure><p>上面形式的意思是：</p><p>calloc函数在内存中动态地申请nmemb个长度为size的内存空间（即申请的总空间尺寸为nmemb*size），这些内存空间全部被初始化为0。</p><p>calloc函数于malloc函数的一个重要区别是：</p><p><strong>calloc函数在申请完内存后，自动初始化该内存空间为0。</strong></p><p><strong>malloc函数不进行初始化操作，里边数据是随机的。</strong></p><p>比如以下的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">void</span> *ptr = (<span class="type">void</span> *)<span class="built_in">calloc</span>(<span class="number">1</span>,<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*ptr:%d\n&quot;</span>, *(<span class="type">int</span> *)ptr);</span><br><span class="line">    <span class="built_in">free</span>(ptr);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下为输出结果</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301202330984.png" alt="image-20230120233012904"></p><h3 id="（4）realloc"><a href="#（4）realloc" class="headerlink" title="（4）realloc"></a>（4）realloc</h3><p><strong>函数原型：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *<span class="title function_">realloc</span><span class="params">(<span class="type">void</span> *ptr, <span class="type">size_t</span> size)</span></span><br></pre></td></tr></table></figure><p>realloc函数是C语言标准库中的一个函数，用于<code>重新分配内存</code>。它可以<code>更改已分配内存的大小</code>，并返回指向新内存块的指针。</p><p>以下由几点需要注意：</p><p>1.realloc函数修改ptr指向的内存空间大小为size字节</p><p>2.如果新分配的内存空间比原来的打，则旧内存块的数据不会发生改变，如果新的内存空间大小小于旧的内存空间，可能会导致数据丢失！</p><p>3.该函数将移动内存空间的数据并返回新的指针</p><p>4.<strong>如果ptr参数为NULL，那么调用该函数就相当于调用malloc(size)。</strong></p><p>以下用一串代码来展示它的作用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i, num;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> *ptr = <span class="literal">NULL</span>; <span class="comment">// 注意！这里必须初始化为NULL！</span></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入一个整数(输入 -1表示结束):&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line">        count++;</span><br><span class="line">        ptr = (<span class="type">int</span> *)<span class="built_in">realloc</span>(ptr, count * <span class="keyword">sizeof</span>(<span class="type">int</span>)); <span class="comment">// 实时根据要求重新分配空间</span></span><br><span class="line">        <span class="keyword">if</span> (ptr == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;内存分配失败！&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ptr[count - <span class="number">1</span>] = num;</span><br><span class="line">    &#125; <span class="keyword">while</span> (num != <span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入的整数分别是:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; count - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, ptr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下为输出结果</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301210002460.png" alt="image-20230121000239380"></p><h2 id="②内存泄漏"><a href="#②内存泄漏" class="headerlink" title="②内存泄漏"></a>②内存泄漏</h2><p>程序中已动态分配的堆内存由于某种原因程序未释放或无法释放，造成系统内存的浪费，导致程序运行速度减慢甚至系统崩溃等严重后果。</p><p>导致内存泄漏主要有两种情况：</p><p><strong>1.隐式内存泄漏（即用完内存块没有及时使用free函数释放）</strong></p><p><strong>2.丢失内存地址</strong></p><p>对于2的情况比如以下的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">void</span> *ptr = (<span class="type">void</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="type">int</span> a = <span class="number">520</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入一个整数:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, ptr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;你输入的整数是:%d\n&quot;</span>, *(<span class="type">int</span> *)ptr);</span><br><span class="line">    ptr = &amp;a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;你输入的整数是:%d\n&quot;</span>, *(<span class="type">int</span> *)ptr);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> c语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高级宏定义</title>
      <link href="/2023/01/21/2023/Mon/7/"/>
      <url>/2023/01/21/2023/Mon/7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="高级宏定义"><a href="#高级宏定义" class="headerlink" title="高级宏定义"></a>高级宏定义</h1><h2 id="①不带参数的宏定义"><a href="#①不带参数的宏定义" class="headerlink" title="①不带参数的宏定义"></a>①不带参数的宏定义</h2><p>基本形式例如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PI 3.14</span></span><br></pre></td></tr></table></figure><p>关于宏定义需要注意以下几点：</p><p>1.为了和普通的变量进行区分。<code>宏的名字通常我们约定是全部由大写字母组成</code>。</p><p>2.宏定义只是简单地进行替换，并且由于预处理是在编译之前进行，而编译工作的任务之一是语法检查，所以<code>编译器不会对宏定义进行语法检查</code>。</p><p>3<code>宏定义不是说明或语句，在末尾不必加分号</code>。</p><p>4.宏定义的作用域是从定义的位置开始到整个程序结束。</p><p>5.可以用<code>#undef</code>来终止宏定义的作用域。</p><p>6.宏定义允许嵌套。</p><p>对于5我们来举个例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PI 3.14</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> r;</span><br><span class="line">    <span class="type">float</span> s;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入半径:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;r);</span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> PI<span class="comment">//使得PI的作用域终结于此</span></span></span><br><span class="line">    s = PI * r * r;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;圆的面积是:%.2f&quot;</span>, s);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于5的用法可以使得PI的作用域终结于对应的那一行。</p><p>输出之后报错信息如下</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301210922895.png" alt="image-20230121092216849"></p><p>对于6我们来举个例子:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PI 3.14</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> R 6371</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> V PI *R *R *R * 4 / 3<span class="comment">//对于宏定义的嵌套</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;地球的体积大概是:%.2f&quot;</span>, V);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下:</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301210926218.png" alt="image-20230121092646152"></p><h2 id="②带参数的宏定义"><a href="#②带参数的宏定义" class="headerlink" title="②带参数的宏定义"></a>②带参数的宏定义</h2><p>对于带参数的宏定义，我们先看下面的例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX(x, y) ((x) &gt; (y) ? (x) : (y))</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;最大的数是:%d&quot;</span>, MAX(x, y));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很明显这个是在宏定义MAX中带了参数x，y然后根据三目运算符来进行比较x和y的大小，这个代码的输出结果如下</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301210939370.png" alt="image-20230121093949294"></p><p>看到这里你们是否发现这是用宏定义写了比较两个数大小的函数，但是宏定义和函数可是有着本质的区别，比如函数一般是带着相应的类型，比如浮点型，整形等等，而宏定义却不是如此。</p><p>关于带参数的宏定义我们还需要注意的是，对于我上面的代码为什么要加个括号？这是不是多次一举，那请我们看下面的这个例子。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SQUARE(x) x*x</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入一个整数:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;该整数的平分是:%d&quot;</span>,SQUARE(x);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;该(整数+1)的平方是%d&quot;</span>,SQUARE(x+<span class="number">1</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于该代码的输出结果如下</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301210948589.png" alt="image-20230121094848521"></p><p> 可以发现对于x+1的运算结果其实应该是36，但是这里却变成了11,其实是因为宏定义中没有加入()而导致运算为<code>x+1*x+1 = 5+5*1+1=11</code>所以括号虽然没有必要，但是还是需要加上。</p><h2 id="③-和"><a href="#③-和" class="headerlink" title="③ # 和"></a>③ # 和</h2><p>**#<strong>和</strong>##**是预处理运算符。</p><p><strong>#</strong></p><p>在带参数的宏定义中，**#**运算符后面应该跟一个参数，预处理器会把这个参数转换为一个字符串。</p><p>比如以下的一个例子。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STR(s) # s</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,STR(hello bg.luoxi.work !!!));<span class="comment">//将hello bg.luoxi.work变成字符串。   </span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下为输出结果</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301221050216.png" alt="image-20230122105005106"></p><p><strong>##</strong></p><p>**##**运算符被称为记号<code>连接运算符</code>，比如我们可以使用##运算符<code>连接两个参数</code>。</p><p>比如以下的一个例子。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TOGETHERE(x, y) x##y</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, TOGETHERE(<span class="number">2</span>, <span class="number">50</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下为输出结果</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301221050700.png" alt="image-20230122105059635"></p>]]></content>
      
      
      <categories>
          
          <category> c语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生存期和存储类型</title>
      <link href="/2023/01/19/2023/Mon/5/"/>
      <url>/2023/01/19/2023/Mon/5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="生存期和存储类型"><a href="#生存期和存储类型" class="headerlink" title="生存期和存储类型"></a>生存期和存储类型</h1><h2 id="①-生存期"><a href="#①-生存期" class="headerlink" title="① 生存期"></a>① 生存期</h2><h3 id="（1）种类"><a href="#（1）种类" class="headerlink" title="（1）种类"></a>（1）种类</h3><p>C语言的变量拥有两种生存期</p><p>– <strong>静态存储期 (static storage duration)</strong></p><p>– <strong>自动存储期 (automatic storage duration)</strong></p><h3 id="（2）区别"><a href="#（2）区别" class="headerlink" title="（2）区别"></a>（2）区别</h3><p>一般来说，具有文件作用域的变量属于<code>静态存储期</code>，函数也属于静态存储期。属于静态存储期的变量在程序执行期间将一直占据存储空间，直到<code>程序关闭才释放</code>。</p><p>具有代码块作用域的变量一般情况下属于自动存储期。属于自动存储期的变量在代码结束时将自动释放存储空间。 </p><h3 id="（3）例子"><a href="#（3）例子" class="headerlink" title="（3）例子"></a>（3）例子</h3><p>以下用一串代码来举个例子，便于区分它们</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> A;        <span class="comment">// 静态存储器（具有文件作用域）</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> B; <span class="comment">// 静态存储器（具有文件作用域）</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> C; <span class="comment">// 静态存储器（具有文件作用域）</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span> <span class="comment">// 静态存储器（具有文件作用域）</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a, b, c; <span class="comment">// 自动存储期（具有代码块作用域）</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> <span class="comment">// 静态存储器（具有文件作用域）</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i, j, k; <span class="comment">// 自动存储期（具有代码块作用域）</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;    <span class="comment">// 自动存储期（具有代码块作用域）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="②存储类型"><a href="#②存储类型" class="headerlink" title="②存储类型"></a>②存储类型</h2><h3 id="（1）种类-1"><a href="#（1）种类-1" class="headerlink" title="（1）种类"></a>（1）种类</h3><p>存储类型其实是指存储变量值的内存类型，C语言提供了5种不同的存储类型，它们分别是:<code>auto , register , static , extern , typedef</code></p><h3 id="（2）自动变量-auto"><a href="#（2）自动变量-auto" class="headerlink" title="（2）自动变量(auto)"></a>（2）自动变量(auto)</h3><p>在<code>代码块</code>种声明变量默认的存储类型就是自动变量，使用关键字auto来描述。</p><p>比如以下举个例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">auto</span> <span class="type">int</span> a, b, c; <span class="comment">// 一般不写auto</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，有时候auto也有一定的作用，如果我们想要<code>局部变量屏蔽全局变量</code>的话，此时可以在变量名前面加上auto，比如以下例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line">in i;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">auto</span> <span class="type">int</span> i; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过一般不推荐这样做</p><h3 id="（3）寄存器变量-register"><a href="#（3）寄存器变量-register" class="headerlink" title="（3）寄存器变量(register)"></a>（3）寄存器变量(register)</h3><p>将一个变量声明为寄存器变量，那么该变量就有可能被存放于CPU的寄存器中。</p><p>寄存器变量和自动变量在很多方面都是一样的，它们都拥有代码块作用域，自动存储期和空连接属性。</p><p>不过有一点需要注意的是，当你将变量声明为寄存器变量时，那么你就无法通过取地址运算符获得该变量的地址。 </p><p>以下用一个例子帮忙理解</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="type">int</span> a = <span class="number">114514</span>;</span><br><span class="line">    printff(<span class="string">&quot;&amp;a = %p&quot;</span>, &amp;a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这串代码在编译器中运行就会导致报错，报错信息如下。</p><p><img src="https://s1.vika.cn/space/2023/01/19/de347d6adc00464ca3bd653c339485a9" alt="image-20230119014942898"></p><h3 id="（4）静态局部变量-static"><a href="#（4）静态局部变量-static" class="headerlink" title="（4）静态局部变量(static)"></a>（4）静态局部变量(static)</h3><p>使用static来声明局部变量，那么久可以<code>将局部变量指定为静态局部变量</code>，即它的<code>生存期从自动生存期转换为静态生存期</code>。</p><p>以下用一个例子来帮忙理解</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;count = %d\n&quot;</span>, count);</span><br><span class="line">    count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        func();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下为输出结果</p><p><img src="https://s1.vika.cn/space/2023/01/19/1a463399c0ef4825ae401cfc3b5c64cb" alt="image-20230119015516944"></p><p>可以看到每次func结束调用之后count的值并没有被释放，它具有了和全局变量一样的生存期。但是要注意到的是它的<code>作用域并没有改变</code>！</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      <categories>
          
          <category> c语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>作用域和链接属性</title>
      <link href="/2023/01/09/2023/Mon/4/"/>
      <url>/2023/01/09/2023/Mon/4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="作用域和链接属性"><a href="#作用域和链接属性" class="headerlink" title="作用域和链接属性"></a>作用域和链接属性</h1><h2 id="①作用域的定义"><a href="#①作用域的定义" class="headerlink" title="①作用域的定义"></a>①作用域的定义</h2><p>当变量被定义在程序都是不同位置时， 它的作用范围是不一样的，这个作用范围就是我们所说的作用域。<code>C语言编译器可以确定4种不同类型的作用域:代码块作用域，文件作用域，原型作用域，函数作用域</code></p><h3 id="（1）代码块作用域-block-scope"><a href="#（1）代码块作用域-block-scope" class="headerlink" title="（1）代码块作用域(block scope)"></a>（1）代码块作用域(block scope)</h3><p>在代码块中定义变量，具有代码块作用域。<code>作用范围是从变量定义的位置开始，对标志该代码块结束的有大括号“&#125;”处。</code></p><p>尽管<code>函数的形式参数不在大括号内定义，但其同样具有代码块作用域</code>，隶属于包含函数体的代码块。以下来用一串代码举个例子。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">114</span>; <span class="comment">// i1</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">1145</span>; <span class="comment">// i2</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;in i2 block scope i = %d\n&quot;</span>, i);</span><br><span class="line">            <span class="type">int</span> i = <span class="number">11451</span>; <span class="comment">// i3</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;i3 = %d\n&quot;</span>, i);</span><br><span class="line">        &#125; <span class="comment">// i3代码块内</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> i = <span class="number">114514</span>; <span class="comment">// i4</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;i4 = %d\n&quot;</span>, i);</span><br><span class="line">        &#125; <span class="comment">// i4代码块内</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;i2 = %d\n&quot;</span>, i);</span><br><span class="line">    &#125; <span class="comment">// i2代码块内</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;i1 = %d\n&quot;</span>, i);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比如以上的代码虽然重复定义了i，但是作用域各不相同,所以不会进行报错，在不同作用域会会打印出出不同i的值，不过在i3的代码块中如果先打印后将i赋值为11451此时在i2代码块内所以对应的i值是1145。</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301101427452.png" alt="image-20230110142704337"></p><h3 id="（2）文件作用域-file-scope"><a href="#（2）文件作用域-file-scope" class="headerlink" title="（2）文件作用域(file scope)"></a>（2）文件作用域(file scope)</h3><p><code>任何在代码块之外声明的标识符都具有文件作用域</code>，<code>作用范围是从它们声明的位置开始，到文件的结尾</code>处都是可以访问的。</p><p>另外，函数名也具有文件作用域，因为函数名本来是在代码块之外。以下将用一串代码做个例子。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">()</span>; <span class="comment">// 声明func，告诉编译器调用函数时别急着报，看看下面再说</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">extern</span> <span class="type">int</span> count; <span class="comment">// 告诉编译器别急着报错，看看下面再说</span></span><br><span class="line">    func();</span><br><span class="line">    count++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;in main count = %d\n&quot;</span>, count);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>; <span class="comment">// 定义全局变量count，文件作用域从10-14</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">()</span>    <span class="comment">// 定义函数，文件作用域从11-14</span></span><br><span class="line">&#123;</span><br><span class="line">    count++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;in func count = %d\n&quot;</span>, count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于以上的代码，下面定义的全局变量以及函数本来文件作用域是对应定义地方向下的，但是因为前面进行了声明，所以编译器没有报错，但是文件作用域没变。</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301101441452.png" alt="image-20230110144151379"></p><h3 id="（3）原型作用域-prototype-scope"><a href="#（3）原型作用域-prototype-scope" class="headerlink" title="（3）原型作用域(prototype scope)"></a>（3）原型作用域(prototype scope)</h3><p>原型作用域<code>只适用于那些在函数原型中声明的参数名</code>。函数在<code>声明的时候可以不写参数的名字（但参数类型是必须写上的）</code>，其实函数原型的参数名还可以随便写一个名字，不必与形式参数相匹配（当然，这样做无任何意义！）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c)</span>;<span class="comment">//作用域为一个括号</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">(<span class="type">int</span> d,<span class="type">int</span> e,<span class="type">int</span> f)</span></span><br><span class="line">&#123;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（4）函数作用域-function-scope"><a href="#（4）函数作用域-function-scope" class="headerlink" title="（4）函数作用域(function scope)"></a>（4）函数作用域(function scope)</h3><p>函数作用域只适用于goto语句的标签，作用将goto语句的标签限制在一个函数内部，以及防止出现重名标签。</p><p>注：一般不推荐用goto语句跳来跳去，这样会<code>破坏代码的整体性</code>。</p><h2 id="②定义和声明"><a href="#②定义和声明" class="headerlink" title="②定义和声明"></a>②定义和声明</h2><p>当一个变量被<code>定义</code>的时候，<code>编译器为变量申请内存空间并填充一些值</code>。</p><p>当一个变量被<code>声明</code>的时候，<code>编译器就知道变量被定义在其他地方</code>。</p><p>声明是<code>通知编译器该变量名及相关的类型已存在</code>，不需要再为此申请内存空间。</p><p><code>局部变量即是定义又是声明</code>。</p><p><code>定义只允许一次</code>，否则就叫做重复定义某个同名变量；而<code>声明可以有很多次</code>。</p><h2 id="③链接属性"><a href="#③链接属性" class="headerlink" title="③链接属性"></a>③链接属性</h2><h3 id="（1）分类"><a href="#（1）分类" class="headerlink" title="（1）分类"></a>（1）分类</h3><p><strong>1.external（外部的）</strong></p><p>多个文件中声明的同名标识符表示同一个实体</p><p><strong>2.internal（内部的）</strong></p><p>单个文件中声明的同名标识符表示同一个实体</p><p><strong>3.none(无)</strong></p><p>声明的同名标识符被当作独立不同的实体。</p><p><strong>注：只有具备文件作用域的标识符才能拥有external或internal的链接属性，其他作用域的标识符都是none属性。默认情况下，具备文件作用域的标识符拥有external属性。也就是说该标识符允许跨文件访问。对于external属性的标识符，无论在不同文件中声明多少次，都表示一个实体。</strong></p><h3 id="（2）static"><a href="#（2）static" class="headerlink" title="（2）static"></a>（2）static</h3><p>使用static关键字可以使得原先拥有external属性的标识符变为internal属性。这里有两点需要注意。</p><p>1.使用static关键字修改链接属性，<code>只对具有文件作用域的标识符生效</code>（对于拥有其他作用域的标识符是另一种功能）</p><p>2.<code>链接属性只能修改一次</code>，也就是说一旦将标识符链接属性变为internal，就无法变回iexternal了。</p>]]></content>
      
      
      <categories>
          
          <category> c语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指针函数和函数指针</title>
      <link href="/2023/01/08/2023/Mon/3/"/>
      <url>/2023/01/08/2023/Mon/3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="指针函数和函数指针"><a href="#指针函数和函数指针" class="headerlink" title="指针函数和函数指针"></a>指针函数和函数指针</h1><h2 id="①指针函数"><a href="#①指针函数" class="headerlink" title="①指针函数"></a>①指针函数</h2><h3 id="（1）定义"><a href="#（1）定义" class="headerlink" title="（1）定义"></a>（1）定义</h3><p>使用<code>指针变量作为函数的返回值</code>的函数，被称为指针函数。</p><p>比如以下的代码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">char</span> *<span class="title function_">getword</span><span class="params">(<span class="type">char</span> a)</span>;</span><br><span class="line"><span class="type">char</span> *<span class="title function_">getword</span><span class="params">(<span class="type">char</span> a)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (a)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Appel&quot;</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;B&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Banana&quot;</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Cat&quot;</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;None&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> a;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入该英文单词首字母(S停止):&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;a);</span><br><span class="line">        <span class="keyword">if</span> (a != <span class="string">&#x27;S&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;该单词为: &quot;</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, getword(a));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于以上的代码，输出结果如下</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301090020850.png" alt="image-20230109002046701"></p><h3 id="（2）注意"><a href="#（2）注意" class="headerlink" title="（2）注意"></a>（2）注意</h3><p>对于以上的代码，执行似乎没有什么问题，但是对于初学指针函数经常会犯个错误，那就是<code>“不要返回局部变量的指针”</code>以下用一串代码来进行演示下为什么不能这样做，然后解释原因。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">char</span> *<span class="title function_">getword</span><span class="params">(<span class="type">char</span> a)</span>;</span><br><span class="line"><span class="type">char</span> *<span class="title function_">getword</span><span class="params">(<span class="type">char</span> a)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (a)</span><br><span class="line">    &#123;</span><br><span class="line">            str1[] = <span class="string">&quot;Appel&quot;</span>;<span class="comment">//定义局部变量（在函数内的变量为局部变量，只在函数内生效，出函数外就不能生效了。）</span></span><br><span class="line">            str2[] = <span class="string">&quot;Banana&quot;</span>;</span><br><span class="line">            str3[] = <span class="string">&quot;Cat&quot;</span>;</span><br><span class="line">            str4[] = <span class="string">&quot;None&quot;</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> str1;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;B&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> str2;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> str3;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> str4;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> a;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入该英文单词首字母(S停止):&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;a);</span><br><span class="line">        <span class="keyword">if</span> (a != <span class="string">&#x27;S&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;该单词为: &quot;</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, getword(a));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于以上代码，有些编译器会直接报错，因为该函数返回了一个局部变量！所以无论编译是否成功，最后的结果都会是不尽人意，<code>因为局部变量仅仅只能在函数内部生效，出了函数之后就不能生效了。</code></p><h2 id="②函数指针"><a href="#②函数指针" class="headerlink" title="②函数指针"></a>②函数指针</h2><h3 id="（1）定义-1"><a href="#（1）定义-1" class="headerlink" title="（1）定义"></a>（1）定义</h3><p>对于指针函数和函数指针，其实和前面的数组指针和指针数组一样，侧重于后面的内容，根据运算符优先级来进行定义这个是否为指针还是数组，函数和指针也同理。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">指针函数 -&gt; <span class="type">int</span> *<span class="title function_">p</span><span class="params">()</span>;</span><br><span class="line">函数指针 -&gt; <span class="type">int</span> (*p)();</span><br></pre></td></tr></table></figure><p>对于函数指针的作用，我们先摆出一串代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">square</span><span class="params">(<span class="type">int</span> num)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">square</span><span class="params">(<span class="type">int</span> num)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> num * num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    <span class="type">int</span> (*fp)(<span class="type">int</span>); <span class="comment">// 定义int 函数名(int)形式函数的指针，与上面的函数形式相对应。</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入一个整数：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line">    fp = square; <span class="comment">// fp指针指向函数square,其实也可以对square取地址，即&amp;square，因为函数和数组类似，函数名也相当于是函数的地址。</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d*%d = %d\n&quot;</span>, num, num, (*fp)(num));<span class="comment">//(*fp)(num)其实也可以写成fp(num)，但是这样写很容易让人误会fp是个函数而不是指针，所以推荐一以上写法能够更加清晰一点，是良好的编程习惯。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（2）函数指针作为参数"><a href="#（2）函数指针作为参数" class="headerlink" title="（2）函数指针作为参数"></a>（2）函数指针作为参数</h3><p>其实函数指针因为本身也是一个指针变量，所以函数指针也可以作为函数中参数列表中的参数之一，以下将用一个小例子来进行理解。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">calc</span><span class="params">(<span class="type">int</span> (*fp)(<span class="type">int</span>, <span class="type">int</span>), <span class="type">int</span>, <span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> num1 - num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">calc</span><span class="params">(<span class="type">int</span> (*fp)(<span class="type">int</span>, <span class="type">int</span>), <span class="type">int</span> num1, <span class="type">int</span> num2)</span><span class="comment">//定义函数calc，参数列表第一个是函数指针指向一个函数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> (*fp)(num1, num2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> num1, num2;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入两个整数:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;num1, &amp;num2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;两数之和为:%d\n&quot;</span>, calc(add, num1, num2));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;两数之差为:%d\n&quot;</span>, calc(sub, num1, num2));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于以上代码就是定义了一个函数calc，并且它的参数列表第一个变量为整形的函数指针来进行指向函数add或者sub来进行运算，对于以上的代码的输出结果如下所示。</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301090139815.png" alt="image-20230109013943748"></p><p>既然函数指针可以在函数内的参数列表中，同样它也可以作为返回值来在函数内部。</p><h3 id="（3）函数指针作为返回值"><a href="#（3）函数指针作为返回值" class="headerlink" title="（3）函数指针作为返回值"></a>（3）函数指针作为返回值</h3><p>如果要把函数指针当为返回值的话，这可就难办了，我们知道<code>函数返回值的类型由函数首部定义的类型决定</code>，那么我们该如何取些函数定义的类型呢？<br>通过上面的代码进行增加，我们可以这样写，代码如下所示</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">calc</span><span class="params">(<span class="type">int</span> (*)(<span class="type">int</span>, <span class="type">int</span>), <span class="type">int</span>, <span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">int</span> (*select(<span class="type">char</span>))(<span class="type">int</span>, <span class="type">int</span>);</span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> num1 - num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">calc</span><span class="params">(<span class="type">int</span> (*fp)(<span class="type">int</span>, <span class="type">int</span>), <span class="type">int</span> num1, <span class="type">int</span> num2)</span> <span class="comment">// 定义函数calc，参数列表第一个是函数指针指向一个函数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> (*fp)(num1, num2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> (*select(<span class="type">char</span> ch))(<span class="type">int</span> num1, <span class="type">int</span> num2)<span class="comment">//定义函数select根据符号返回对应函数的地址</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (ch)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> add;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> sub;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> num1, num2;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    <span class="type">int</span> (*fp)(<span class="type">int</span>, <span class="type">int</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入式子(如1+1):&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%c%d&quot;</span>, &amp;num1, &amp;ch, &amp;num2);</span><br><span class="line">    fp = select(ch);<span class="comment">//select返回add或者sub地址给fp</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d%c%d = %d\n&quot;</span>, num1, ch, num2, calc(fp, num1, num2));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于以上代码，完美的阐述了这一点，其实新加的函数返回值为函数指针的作用就是把对应运算函数的地址给指针变量fp，然后就将对应的地址给calc函数的参数列表第一个来表示对应的运算。对于以上代码的输出结果如下</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301090252038.png"></p><p>其实对于函数select部分，我们如果将它返回结束之后其实就是最后就是一个函数指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> (*select(<span class="type">char</span> ch))(<span class="type">int</span> num1, <span class="type">int</span> num2)<span class="comment">//定义函数select根据符号返回对应函数的地址</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (ch)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> add;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> sub;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回结束后的结果</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> (*)(<span class="type">int</span> num1, <span class="type">int</span> num2)<span class="comment">//定义函数select根据符号返回对应函数的地址</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (ch)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> add;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> sub;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实对应的就是一个函数指针，可能是add也有可能是sub的地址。</p>]]></content>
      
      
      <categories>
          
          <category> c语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>参数和指针</title>
      <link href="/2023/01/06/2023/Mon/2/"/>
      <url>/2023/01/06/2023/Mon/2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="参数和指针"><a href="#参数和指针" class="headerlink" title="参数和指针"></a>参数和指针</h1><h2 id="①参数"><a href="#①参数" class="headerlink" title="①参数"></a>①参数</h2><h3 id="（1）形参和实参"><a href="#（1）形参和实参" class="headerlink" title="（1）形参和实参"></a>（1）形参和实参</h3><p>对于形参和实参的认识，我们可以根据以下的代码来进行理解。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span>,<span class="type">int</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span><span class="comment">//括号内的是形参</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> (x+y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    sum(<span class="number">3.5</span>);<span class="comment">//当函数被调用的时候，实参会传递给形参</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注：形参只有在函数内部才有效！出了函数就什么都不是！</strong></p><h3 id="（2）可变参数"><a href="#（2）可变参数" class="headerlink" title="（2）可变参数"></a>（2）可变参数</h3><p>如果想要使用可变参数，需要引用头文件stdarg.h，下面简单概述并用代码理解以下可变参数的四个相关的类型。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line">va_list 列表名;<span class="comment">//定义可变参数列表</span></span><br><span class="line">va-start(列表名,参数个数);<span class="comment">//初始化参数列表</span></span><br><span class="line">va-arg(列表名，参数数据类型);<span class="comment">//获取后面每一个参数的值</span></span><br><span class="line">va_end(列表名)<span class="comment">//关闭参数列表</span></span><br></pre></td></tr></table></figure><p>代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> n,...)</span>;<span class="comment">//定义sum函数，n表示参数的数量，...为占位符表示参数数目不确定。</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> n,...)</span><span class="comment">//这个参数列表不仅仅包括整形，字符串等等都行</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,sum = <span class="number">0</span>;</span><br><span class="line">    va_list vap;<span class="comment">//定义可变参数列表。</span></span><br><span class="line">    va_start(vap,n);<span class="comment">//将数目为n个参数的参数列表vap进行初始化。</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">sum += va_arg(vap,<span class="type">int</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    va_end(vap);<span class="comment">//关闭参数列表</span></span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">result = sum(<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;result = %d\n&quot;</span>,result);</span><br><span class="line">    result = sum(<span class="number">6</span>,<span class="number">-3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">-3</span>,<span class="number">3</span>,<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;result = %d\n&quot;</span>,result);</span><br><span class="line">    result = sum(<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;result = %d\n&quot;</span>,result);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于以上的代码输出结果入地下所示</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301080111189.png" alt="image-20230108011149118"></p><h2 id="②指针的运用"><a href="#②指针的运用" class="headerlink" title="②指针的运用"></a>②指针的运用</h2><h3 id="（1）传值和传址"><a href="#（1）传值和传址" class="headerlink" title="（1）传值和传址"></a>（1）传值和传址</h3><h3 id="1-传值的定义"><a href="#1-传值的定义" class="headerlink" title="1.传值的定义"></a>1.传值的定义</h3><p>通过上面形参和实参的例子我们可以发现，在这个过程中有个传递的内容，就说实参的值给了形参，而这就是我们常说的传值。它的定义<code>就是使用变量、常量、数组等作为函数的参数。实际是将实参的值复制到形参相应的存储单元中，即形参和实参分别占用不同的存储单元。</code></p><h3 id="2-传值的特点"><a href="#2-传值的特点" class="headerlink" title="2.传值的特点"></a>2.传值的特点</h3><p>传值的特点是<code>单向传递</code>，即主调函数被调用时给形参分配存储单元，把实参的值传递给形参，在调用结束后，形参的存储单元被<code>释放</code>，而形参值的任何变化都<code>不会影响</code>到实参的值，实参的存储单元仍保留并维持数值不变。</p><p>对于传值我们发现，形参的任何变化都不会影响到实参的值，它被定死在了对应的函数区域了，那么传址呢？</p><h3 id="3-传址的定义"><a href="#3-传址的定义" class="headerlink" title="3.传址的定义"></a>3.传址的定义</h3><p>通过了解了传值我们或许固定了一个思维，就是真的形参不会影响到实参吗？实际上并不是，而址传递却并不如此。我们都知道在C语言中数组名就代表数组的首地址。<code>所谓的址传递，指的就是函数的参数是数组名或者指针。传递的是数组的首地址或指针的值，而形参接收到的是地址，即指向实参的存储单元，形参和实参占用相同的存储单元，即形参和实参是相同的。</code></p><h3 id="4-传址的特点"><a href="#4-传址的特点" class="headerlink" title="4.传址的特点"></a>4.传址的特点</h3><p><code>形参并不存在存储空间</code>，编译系统不为形参数组分配内存。因此在数组名或指针作函数参数时所进行的传送只是地址传送，形参在取得该地址之后，与<code>实参共同拥有一段内存空间，形参的变化也就是实参的变化</code>。</p><p>以下，我们将对上面的一些概念加上例子进行理解。</p><h3 id="5-例子（区别传值和传址）"><a href="#5-例子（区别传值和传址）" class="headerlink" title="5.例子（区别传值和传址）"></a>5.例子（区别传值和传址）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;in swap funk swap before a=%d,b=%d\n&quot;</span>, a, b);<span class="comment">//在swap函数打印传值之后的a和b的值</span></span><br><span class="line">    <span class="type">int</span> temp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;in swap funk swap after a=%d,b=%d\n&quot;</span>, a, b);<span class="comment">//在swap函数打印传值之后交换之后的a和b的值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">114514</span>, b = <span class="number">1919810</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;in main funk swap before a=%d,b=%d\n&quot;</span>, a, b);<span class="comment">//在main函数打印调用函数之前的a和b的值</span></span><br><span class="line">    swap(a, b);<span class="comment">//调用swap函数进行值传递将a和b的值传递给swap函数内的形参</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;in main funk swap after a=%d,b=%d\n&quot;</span>, a, b);<span class="comment">//在main函数打印调用函数之后的a和b的值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下图所示</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301080010907.png" alt="image-20230108001054804"></p><p>如果我们用传址的思路，这代码应该怎么写？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> *b)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> *b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;in swap funk swap before a=%d,b=%d\n&quot;</span>, *a, *b); <span class="comment">// 在swap函数打印传值之后的a和b的值</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> temp = *a;</span><br><span class="line">        *a = *b;</span><br><span class="line">        *b = temp;</span><br><span class="line">    &#125;<span class="comment">//将a和b地址内的元素取出来进行交换，改变地址内的值</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;in swap funk swap after a=%d,b=%d\n&quot;</span>, *a, *b); <span class="comment">// 在swap函数打印传值之后交换之后的a和b的值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">114514</span>, b = <span class="number">1919810</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;in main funk swap before a=%d,b=%d\n&quot;</span>, a, b); <span class="comment">// 在main函数打印调用函数之前的a和b的值</span></span><br><span class="line">    swap(&amp;a, &amp;b);                                         <span class="comment">// 调用swap函数进行值传递将&amp;a和&amp;b的址传递给swap函数内的形参</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;in main funk swap after a=%d,b=%d\n&quot;</span>, a, b);  <span class="comment">// 在main函数打印调用函数之后的a和b的值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下所示</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301080018042.png" alt="image-20230108001845971"></p><p>我们可以清晰的发现，传值和传址的根本区别就是：<code>能否对实参产生影响</code></p><h3 id="（2）传数组"><a href="#（2）传数组" class="headerlink" title="（2）传数组"></a>（2）传数组</h3><p>对于传数组，它和传址很像，它也可以改变形参的值，因为我们之前学过，数组名本身也就是一个地址，所以我们真正传递过去的其实就是地址。以下用一个例子来方便理解。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">getarr</span><span class="params">(<span class="type">int</span> a[<span class="number">10</span>])</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">getarr</span><span class="params">(<span class="type">int</span> a[<span class="number">10</span>])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    a[<span class="number">1</span>] = <span class="number">114514</span>;</span><br><span class="line">    a[<span class="number">4</span>] = <span class="number">1919810</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;in getarr funk a[10] output:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;a[%d] = %d\n&quot;</span>, i, a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    getarr(a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;in main funk a[10] output:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;a[%d] = %d\n&quot;</span>, i, a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 以下为输出结果</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301080037783.png" alt="image-20230108003756695"></p><p>我们可以看到实参也受到了影响，其实这是因为我们传数组也是传的指针，而且在函数内更改了对应地址的值，所以实参受到了影响。</p><p>如果你对以上的代码有很大的疑惑，没关系，下面的例子绝对能够证明传递过去的实际上就是指针！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">getarr</span><span class="params">(<span class="type">int</span> b[<span class="number">10</span>])</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">getarr</span><span class="params">(<span class="type">int</span> b[<span class="number">10</span>])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;in getarr funk b[10] sizeof:%d\n&quot;</span>, <span class="keyword">sizeof</span>(b)); <span class="comment">// 用sizeof计算数组b的字节来确定它是指针</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    getarr(a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;in main funk a[10] sizeof:%d\n&quot;</span>, <span class="keyword">sizeof</span>(a)); <span class="comment">// 用sizeof计算数组a的字节来确定它是数组</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下为输出结果</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301080048739.png" alt="image-20230108004856670"></p>]]></content>
      
      
      <categories>
          
          <category> c语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数</title>
      <link href="/2023/01/03/2023/Mon/1/"/>
      <url>/2023/01/03/2023/Mon/1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="①目前开发的问题"><a href="#①目前开发的问题" class="headerlink" title="①目前开发的问题"></a>①目前开发的问题</h2><p><strong>随着程序规模的变大：</strong></p><p>1.<code>main函数变得相当冗杂</code></p><p>2.程序复杂度不断提高</p><p>3.代码前后关联度高，修改代码往往牵一发而动全身</p><p>4.变量的命名都成了问题</p><p>5.为了在程序中多次实现某些功能，不得不重复写相同的代码</p><h2 id="②主函数外的函数"><a href="#②主函数外的函数" class="headerlink" title="②主函数外的函数"></a>②主函数外的函数</h2><h3 id="（1）定义"><a href="#（1）定义" class="headerlink" title="（1）定义"></a>（1）定义</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类型名一定程度决定了返回值。</span></span><br><span class="line">类型名 函数名（参数列表）</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//执行过程</span></span><br><span class="line">    函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（2）声明"><a href="#（2）声明" class="headerlink" title="（2）声明"></a>（2）声明</h3><p>所谓声明，就说高速编译器我们使用这个函数，你现在没用找到它千万不要着急报错，稍后就把定义补上。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类型名 函数名（参数列表）;<span class="comment">//可以省略，但是不建议。</span></span><br></pre></td></tr></table></figure><p><strong>注意：因为编译器是从下到上执行，如果你的函数定义写在主函数下方，建议还是要把定义写上，这是给良好的习惯，</strong></p><h3 id="（3）函数的参数和返回值"><a href="#（3）函数的参数和返回值" class="headerlink" title="（3）函数的参数和返回值"></a>（3）函数的参数和返回值</h3><p>函数的参数就说参数列表对应的<code>形式参数</code>，返回值则是代表这个<code>函数的结束</code>，返回为某值。但是一定要注意<code>函数返回值的类型由函数首部定义的类型决定</code>！</p><h2 id="（4）例子"><a href="#（4）例子" class="headerlink" title="（4）例子"></a>（4）例子</h2><p>对于①中5所提到的，如果我们想要重复打印一段文字，应该怎么做呢？先举个简单的小例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//声明函数printc</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printc</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//定义函数printc</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printc</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;6&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">printc();<span class="comment">//调用函数printc</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于这个代码，我们在主函数外定义了一个函数printc，让它帮我们打印一些内容，以下为输出结果。</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301040047979.png" alt="image-20230104004745848"></p><p>如果我们想要这个函数的内容执行三次，只需要额外再调用两次就可以了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printc</span><span class="params">()</span>;<span class="comment">//定义函数print-c</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printc</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;6&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">printc();<span class="comment">//调用函数printc</span></span><br><span class="line">printc();</span><br><span class="line">printc();</span><br><span class="line"><span class="comment">//调用三次printc</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下所示</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301040049509.png" alt="image-20230104004928446"></p><p>但是，如果我们想要它无限调用这个函数的话，我们该怎么办呢？这就不得不用到所谓的<code>递归</code>思想了。递归和迭代有一点相似，但是它们不完全相同。</p><p><strong>递归:函数直接或间接调用函数自身,<code>直到满足终止条件</code>,再<code>逐层回归</code>。</strong></p><p><strong>迭代:利用已知的变量值,不断用变量的旧值递推新值,<code>直到到达结束状态</code></strong></p><p>所以，如果我们想要无限调用函数printc只需要在printc里面继续调用就行了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printc</span><span class="params">()</span>;<span class="comment">//定义函数print-c</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printc</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;6&quot;</span>);</span><br><span class="line">printc();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">printc();<span class="comment">//调用函数printc</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下所示</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301040053178.png" alt="image-20230104005317112"></p><p>递归的思想在很多地方也很适用，不过有一个非常经典的例子是有关一个小游戏名叫<code>汉诺塔</code>。</p><p>对于以上的例子是函数一个简单的小例子，如果我们想写一个函数帮忙我们计算阶乘的话？该如何写呢？代码如下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fact</span><span class="params">(<span class="type">int</span> n)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">fact</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> s = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    s *= i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回值必须是整数</span></span><br><span class="line">  <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> n;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;请输入一个数：&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">  <span class="comment">// 在printf里面调用fact函数</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;它的阶乘为%d\n&quot;</span>, fact(n));</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于以上代码，我们输入5来测试下。</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301040145060.png" alt="image-20230104014550984"></p><h2 id="③递归思想——汉诺塔问题"><a href="#③递归思想——汉诺塔问题" class="headerlink" title="③递归思想——汉诺塔问题"></a>③递归思想——汉诺塔问题</h2><p><strong>以下是一个汉诺塔的有关问题</strong>:</p><p>  相传在古印度圣庙中，有一种被称为汉诺塔的游戏。该游戏是在一块铜板装置上，有三根杆(编号A、B、C)，在A杆自下而上、由大到小按顺序放置64个金盘。                                          </p><p>游戏的目标：把A杆上的金盘全部移到C杆上，并仍保持原有顺序叠好。操作规则：每次只能移动一个盘子，并且在移动过程中三根杆上都始终保持大盘在下，小盘在上，操作过程中盘子可以置于A、B、C任一杆上。</p><p>如果，我们将金盘的数量定义为n，要求用代码实现移动过程，该怎么办呢？</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301040101310.png" alt="image-20230104010148248"></p><p><strong>思路：</strong></p><p>1.如果要<strong>把A中的n个金盘借助B移动到C去</strong>，且满足小在上大在下的规则的话，我们第一肯定是要把<code>n盘上面的n-1个金盘借助C移动到B</code>，然后就可以将n盘移动到C去了。</p><p>2.此时问题变成了要<strong>把B中的n-1个金盘借助A移动到C去</strong>，则是要把<code>n-2个金盘借助C移动到A去</code>，然后就可以把n-1盘移动到C去了。</p><p>3.此时问题就变成了<strong>把A中的n-2个金盘借助B移动到C去</strong>，则思路一样，是要把<code>n-3个金盘借助C移动到B去</code>，然后就可以将n-2盘移动到C去了。</p><p>通过上面的3次分析，我们发现其实这个问题的本质就是每个分析标注的两点以及下个分析的第一个标注点，此时核心问题为如下三点。</p><p><strong>①把A中的n个金盘借助B移动到C去</strong></p><p><strong>②n盘上面的n-1个金盘借助C移动到B</strong></p><p><strong>③把B中的n-1个金盘借助A移动到C去</strong></p><p>那我们应该如何去用代码实现呢？</p><p>此中我们需要定义金盘的数量这个变量，以及表述A,B,C三个柱子的变量。然后根据<code>递归思想</code>（根据上面分析，问题是一种重复的轮回。）去实现它。</p><p><strong>题解：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">// 定义一个实现这个流程的函数，函数括号的意思是(金盘数量，柱子a(起始)，柱子b(借助)，柱子c(终点))</span></span><br><span class="line"><span class="comment">// 而后面的三个字符变量后面的思路就是借助柱子b把金盘从柱子a移动到柱子c。</span></span><br><span class="line"><span class="comment">// 注意：前往别把这三个柱子定死理解为就说ABC柱子，后面会有调用函数的交换。</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">halot</span><span class="params">(<span class="type">int</span> n, <span class="type">char</span> a, <span class="type">char</span> b, <span class="type">char</span> c)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">halot</span><span class="params">(<span class="type">int</span> n, <span class="type">char</span> a, <span class="type">char</span> b, <span class="type">char</span> c)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 当此时只剩下一个盘的时候，只需要完成此时的目标，比如n-1个盘子以及到B柱子，这里n盘这一个盘就直接去目标。</span></span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 表示这个移动的过程，根据调用这个函数就是为了实现移动的这个过程。</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c --＞ %c\n&quot;</span>, a, c);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 交换b和c的字符导致字符变量a，b，c并非代表了柱子ABC，但是思路还是和上面所说一样</span></span><br><span class="line">    halot(n - <span class="number">1</span>, a, c, b);</span><br><span class="line">    <span class="comment">// 表示这个移动的过程，根据调用这个函数就是为了实现移动的这个过程。</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c --＞ %c\n&quot;</span>, a, c);</span><br><span class="line">    <span class="comment">// 交换b和a的字符导致字符变量a，b，c并非代表了柱子ABC，但是思路还是和上面所说一样</span></span><br><span class="line">    halot(n - <span class="number">1</span>, b, a, c);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> n;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;请输入金盘的数量:&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">  halot(n, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>); <span class="comment">// 将形参a命定为柱子A，形参b命定为柱子B，形参c命定为柱子C。</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>请不要定死了字符变量a，b，c所代表的柱子，它们在调用函数的时候会改变，但是<strong>核心思想永远不变</strong>！</p><p>代码的输出结果如下所示，测试数据为3</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301040126575.png" alt="image-20230104012610506"></p><p>最后根据这个步骤，游戏圆满成功！<br><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301040127312.png" alt="image-20230104012701255"></p>]]></content>
      
      
      <categories>
          
          <category> c语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常量和指针</title>
      <link href="/2022/12/30/DEnot/10/"/>
      <url>/2022/12/30/DEnot/10/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="常量和指针"><a href="#常量和指针" class="headerlink" title="常量和指针"></a>常量和指针</h1><h2 id="①常量"><a href="#①常量" class="headerlink" title="①常量"></a>①常量</h2><p>常量是编程中非常让人熟悉且重要的概念，以下是常见的几种</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">520</span>，<span class="string">&#x27;a&#x27;</span>,<span class="number">3.14</span><span class="comment">//常见常量</span></span><br><span class="line">或者如下</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PRICE 520</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> A <span class="string">&#x27;a&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PI 3.14</span></span><br></pre></td></tr></table></figure><p>其实用<code>const</code>关键字修饰的也被称为常量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> price = <span class="number">520</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> a = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">float</span> pi = <span class="number">3.14</span>;</span><br><span class="line"><span class="comment">//const使得变量也拥有了常量的特性</span></span><br></pre></td></tr></table></figure><p>以下举个例子来进行理解</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">float</span> pi = <span class="number">3.14</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%f\n&quot;</span>,pi);<span class="comment">//该值可以被正常打印出来</span></span><br><span class="line">    pi=<span class="number">3.1415</span>;<span class="comment">//尝试修改</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们根据以上代码一样尝试修改pi的值，程序的输出结果会怎么样呢？</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202212302348898.png" alt="image-20221230234846776"></p><p>程序很明显就会发生报错，因为const修饰的变量pi不能被修改了，而表达式左边的<code>左值必须是可以修改的变量</code>。</p><h2 id="②指向常量的指针"><a href="#②指向常量的指针" class="headerlink" title="②指向常量的指针"></a>②指向常量的指针</h2><p>对于上面的常量或许看起来没有那么复制，但是如果它跟指针联系一起那就复杂很多了，当一个指针指向一个常量的时候会发生什么呢？请看下面的例子。</p><h3 id="（1）例子"><a href="#（1）例子" class="headerlink" title="（1）例子"></a>（1）例子</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">114514</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> cnum = <span class="number">1919810</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> *pc = &amp;cnum;<span class="comment">//定义了指向常量的指针</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;cnum:%d &amp;cnum:%p\n&quot;</span>,cnum,&amp;cnum);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*pc:%d pc:%p\n&quot;</span>,*pc,pc);    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于以上的代码的输出结果如下所示</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202212310009189.png" alt="image-20221231000912095"></p><p>可以发现它们所打印出来的值一模一样，但是我们如果企图将pc进行解引用然后修改它的值会发生什么呢？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">114514</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> cnum = <span class="number">1919810</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> *pc = &amp;cnum;<span class="comment">//定义了指向常量的指针</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;cnum:%d &amp;cnum:%p\n&quot;</span>,cnum,&amp;cnum);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*pc:%d pc:%p\n&quot;</span>,*pc,pc);</span><br><span class="line">    *pc = <span class="number">114514</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202212310010133.png" alt="image-20221231001028090"></p><p>程序会出现和之前一样的错误，但是，我们如果只修改它的地址呢？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">114514</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> cnum = <span class="number">1919810</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> *pc = &amp;cnum;<span class="comment">//定义了指向常量的指针</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;cnum:%d &amp;cnum:%p\n&quot;</span>,cnum,&amp;cnum);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*pc:%d pc:%p\n&quot;</span>,*pc,pc);</span><br><span class="line">    pc = &amp;num;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;num:%d &amp;num:%p\n&quot;</span>,num,&amp;num);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*pc:%d pc:%p\n&quot;</span>,*pc,pc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下所示</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202212310011903.png" alt="image-20221231001157840"></p><p>可以发现是允许这样写的，而且我们其实是可以修改num的值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">114514</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> cnum = <span class="number">1919810</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> *pc = &amp;cnum;<span class="comment">//定义了指向常量的指针</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;cnum:%d &amp;cnum:%p\n&quot;</span>,cnum,&amp;cnum);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*pc:%d pc:%p\n&quot;</span>,*pc,pc);</span><br><span class="line">    pc = &amp;num;</span><br><span class="line">    num = <span class="number">1919810</span>;<span class="comment">//修改num的值</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;num:%d &amp;num:%p\n&quot;</span>,num,&amp;num);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*pc:%d pc:%p\n&quot;</span>,*pc,pc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202212310014338.png" alt="image-20221231001425274"></p><h3 id="（2）总结"><a href="#（2）总结" class="headerlink" title="（2）总结"></a>（2）总结</h3><p>1.指针可以修改为指向不同的常量</p><p>2.指针可以修改为指向不同的变量</p><p>3.可以通过解引用来读取指针指向的数据</p><p>4.不可以通过解引用修改指针指向的数据</p><h2 id="③常量指针"><a href="#③常量指针" class="headerlink" title="③常量指针"></a>③常量指针</h2><p>常量指针和前面的指向常量的指针的<code>区别就在于const的位置</code>，因为表达式是从左往右读的，如果const在int前面或者星号左侧，则const就是用来修饰指针所指向的变量(既*p),即指针指向为常量;如果const位于星号的右侧,const就是修饰指针本身(既p),即指针本身指向的地址是常量。以下来举个例子。</p><h3 id="（1）例子-1"><a href="#（1）例子-1" class="headerlink" title="（1）例子"></a>（1）例子</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">114514</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> cnum = <span class="number">1919810</span>;</span><br><span class="line">    <span class="type">int</span> * <span class="type">const</span> p =&amp;num;<span class="comment">//指向非常量的常量指针</span></span><br><span class="line">    *p =<span class="number">1919810</span>;<span class="comment">//来测试是否可以进行改变</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;num:%d *p:%d\n&quot;</span>,num,*p);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下所示</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202212310027825.png" alt="image-20221231002714757"></p><p>可以发现，通过解引用改变num的值是允许的，但是如果改变p所指向的地址呢？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">114514</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> cnum = <span class="number">1919810</span>;</span><br><span class="line">    <span class="type">int</span> * <span class="type">const</span> p =&amp;num;<span class="comment">//指向非常量的常量指针</span></span><br><span class="line">    *p =<span class="number">1919810</span>;<span class="comment">//来测试是否可以进行改变</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;num:%d *p:%d\n&quot;</span>,num,*p);</span><br><span class="line">    p = &amp;cnum;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;cnum:%d *p:%d\n&quot;</span>,cnum,*p);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202212310028352.png" alt="image-20221231002858314"></p><p>可以发现又出现了和之前一样的报错信息。</p><p>但是我们如果把常量指针指向常量会发生什么呢？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">114514</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> cnum = <span class="number">1919810</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> * <span class="type">const</span> p =&amp;cnum;<span class="comment">//指向常量的常量指针</span></span><br><span class="line">    *p =<span class="number">114514</span>;<span class="comment">//来测试是否可以进行改变</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;cnum:%d *p:%d\n&quot;</span>,cnum,*p);</span><br><span class="line">    p = &amp;num;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202212310043764.png" alt="image-20221231004323720"></p><p>编译器也会毫不留情将我们拒之门外，</p><h3 id="（2）总结-1"><a href="#（2）总结-1" class="headerlink" title="（2）总结"></a>（2）总结</h3><p><strong>1.指向非常量的常量指针</strong></p><p>①指针自身不可以被修改</p><p>②指针指向的值可以被修改</p><p><strong>2.指向常量的常量指针</strong></p><p>①指针自身不可以被修改</p><p>②指针指向的值也不可以被修改</p><h2 id="④指向”指向常量的常量指针“的指针"><a href="#④指向”指向常量的常量指针“的指针" class="headerlink" title="④指向”指向常量的常量指针“的指针"></a>④指向”指向常量的常量指针“的指针</h2><p>对于这个标题，可能会感觉有点绕口或者套娃，其实对于我们上面写的那一串代码就是指向常量的常量指针呢，如果我们需要再来个指针指向它，其实可以这样写</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">1919810</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> * <span class="type">const</span> p =&amp;num;<span class="comment">//指向常量的常量指针</span></span><br><span class="line">    <span class="type">int</span> **pp =&amp;p;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pp:%p &amp;p:%p\n&quot;</span>,pp,&amp;p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*pp:%p p:%p &amp;num:%p\n&quot;</span>,*pp,p,&amp;num);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;**pp:%d *p:%d num:%d\n&quot;</span>,**pp,*p,num);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果这样写的话输出结果会怎么样呢？</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202212310053746.png" alt="image-20221231005347710"></p><p>我们会发现，编译器会报错，因为我们指向的是一个指向常量的常量指针，所以如果我们要用一个指针来指向它，就必须用相似的形式，修改的形式如下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">1919810</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> * <span class="type">const</span> p =&amp;num;<span class="comment">//指向常量的常量指针</span></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> * <span class="type">const</span> *pp =&amp;p;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pp:%p &amp;p:%p\n&quot;</span>,pp,&amp;p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*pp:%p p:%p &amp;num:%p\n&quot;</span>,*pp,p,&amp;num);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;**pp:%d *p:%d num:%d\n&quot;</span>,**pp,*p,num);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202212310052557.png" alt="image-20221231005213478"></p>]]></content>
      
      
      <categories>
          
          <category> c语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指向指针的指针</title>
      <link href="/2022/12/29/DEnot/9/"/>
      <url>/2022/12/29/DEnot/9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="指向指针的指针"><a href="#指向指针的指针" class="headerlink" title="指向指针的指针"></a>指向指针的指针</h1><h2 id="①理解"><a href="#①理解" class="headerlink" title="①理解"></a>①理解</h2><p>对于指向指针的指针，我们听这个名字或许感觉非常的绕口，所以以下我将用一个例子来进行帮忙理解，顺便配有相应的图解。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> num = <span class="number">520</span>;</span><br><span class="line"><span class="type">int</span> *p = &amp;num;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于这串代码，我们或许不会感到陌生，它的大概图解如下所示。</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202212282241188.png" alt="image-20221228224131135"></p><p>但是，如果我们在定义一个 int **pp = &amp;p呢？代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> num = <span class="number">520</span>;</span><br><span class="line"><span class="type">int</span> *p = &amp;num;</span><br><span class="line"><span class="type">int</span> **pp = &amp;p;<span class="comment">//指向指针p的地址</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而对于这串新增的代码的图解如下所示</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202212282244336.png" alt="image-20221228224403289"></p><p>对于上面的例子其实我们不难发现，当我们在定义一个指针的时候，它就已经教我们该如何进行解引用了，比如定义指针p就是int  *p,而当我们定义指针pp的时候是int **pp；</p><p>对于以上的代码，我们来进行打印以下，来看看是否如上面所说的一样。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> num = <span class="number">520</span>;</span><br><span class="line"><span class="type">int</span> *p = &amp;num;</span><br><span class="line"><span class="type">int</span> **pp = &amp;p;<span class="comment">//指向指针p的地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;num: %d\n&quot;</span>,num);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*p: %d\n&quot;</span>,*p);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;**pp: %d\n&quot;</span>,**pp);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;p: %p pp: %p\n&quot;</span>,&amp;p,pp);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;num: %p p: %p *pp:%p\n&quot;</span>,&amp;num,p,*pp);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下所示</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202212282252544.png" alt="image-20221228225229478"></p><h2 id="②指针数组和指向指针的指针"><a href="#②指针数组和指向指针的指针" class="headerlink" title="②指针数组和指向指针的指针"></a>②指针数组和指向指针的指针</h2><p>对于指针数组和指向指针的指针，先用一串代码来举个例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span>* lgal[] = &#123;</span><br><span class="line"><span class="string">&quot;《ATRI》&quot;</span>,</span><br><span class="line"><span class="string">&quot;《星空列车与白的旅行》&quot;</span>,</span><br><span class="line"><span class="string">&quot;《昙花》&quot;</span>,</span><br><span class="line"><span class="string">&quot;《茸雪》&quot;</span> &#125;;<span class="comment">//定义一个指针数组存放喜欢的galgame</span></span><br><span class="line"><span class="type">char</span> **rbgal[<span class="number">2</span>];<span class="comment">//定义一个指向指针的指针存放日本galgame</span></span><br><span class="line"><span class="type">char</span> **zggal[<span class="number">2</span>];<span class="comment">//定义一个指向指针的指针存放中国galgame</span></span><br><span class="line">rbgal[<span class="number">0</span>] = &amp;lgal[<span class="number">0</span>];<span class="comment">//存放字符串指针的地址</span></span><br><span class="line">rbgal[<span class="number">1</span>] = &amp;lgal[<span class="number">1</span>];</span><br><span class="line">zggal[<span class="number">0</span>] = &amp;lgal[<span class="number">2</span>];</span><br><span class="line">zggal[<span class="number">1</span>] = &amp;lgal[<span class="number">3</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;洛希喜欢的日本galgame是:\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> m = <span class="number">1</span>; m &lt; <span class="number">2</span>; m++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, *rbgal[m]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;洛希喜欢的中国galgame是:\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> n = <span class="number">1</span>; n &lt; <span class="number">2</span>; n++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, *zggal[n]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于以上的代码的输出结果如下所示</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202212291910132.png" alt="image-20221229191007998"></p><p>对于这样写有三个好处</p><p>1.避免重复的分配内存</p><p>2.只需要进行一处修改</p><p>3.代码的灵活性和安全性都有了显著的提高！</p>]]></content>
      
      
      <categories>
          
          <category> c语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>void指针和NULL指针</title>
      <link href="/2022/12/29/DEnot/8/"/>
      <url>/2022/12/29/DEnot/8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="void指针和NULL指针"><a href="#void指针和NULL指针" class="headerlink" title="void指针和NULL指针"></a>void指针和NULL指针</h1><h2 id="①void指针"><a href="#①void指针" class="headerlink" title="①void指针"></a>①void指针</h2><h3 id="（1）定义"><a href="#（1）定义" class="headerlink" title="（1）定义"></a>（1）定义</h3><p><code>void指针我们把它称之为通用指针</code>，就是<code>可以指向任意类型的数据</code>。也就是说，任何类型的指针都可以赋值给void指针。以下，我们用一串代码来将它实现下！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> num = <span class="number">114514</span>;</span><br><span class="line"><span class="type">int</span>* pi = &amp;num;</span><br><span class="line"><span class="type">char</span>* ps = <span class="string">&quot;LOVE&quot;</span>;</span><br><span class="line"><span class="type">void</span>* pv;</span><br><span class="line">pv = pi;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;pi:%p pv:%p\n&quot;</span>, pi, pv);</span><br><span class="line">pv = ps;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ps:%p pv:%p\n&quot;</span>, ps, pv);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于以上代码的输出结果如下所示</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202212281918188.png" alt="image-20221228191808043"></p><p>可以发现int类型以及char类型的指针都成功的赋值给了void指针</p><h3 id="（2）注意"><a href="#（2）注意" class="headerlink" title="（2）注意"></a>（2）注意</h3><p>对于void指针虽然可以将其他类型的指针赋值，但是我们不能随意的给void指针进行解引用，比如以下的例子。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> num = <span class="number">114514</span>;</span><br><span class="line"><span class="type">int</span>* pi = &amp;num;</span><br><span class="line"><span class="type">char</span>* ps = <span class="string">&quot;LOVE&quot;</span>;</span><br><span class="line"><span class="type">void</span>* pv;</span><br><span class="line">pv = pi;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*pv:%d\n&quot;</span>, *pv);</span><br><span class="line">pv = ps;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;pv:%s\n&quot;</span>, pv);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下为报错信息</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202212281926735.png" alt="image-20221228192633699"></p><p>很显然我们对于void指针进行解引用之后，vscode里面就直接报错了</p><p>解决办法就是要进行强制的类型转换</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> num = <span class="number">114514</span>;</span><br><span class="line"><span class="type">int</span>* pi = &amp;num;</span><br><span class="line"><span class="type">char</span>* ps = <span class="string">&quot;LOVE&quot;</span>;</span><br><span class="line"><span class="type">void</span>* pv;</span><br><span class="line">pv = pi;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*pv:%d\n&quot;</span>, *(<span class="type">int</span> *)pv);</span><br><span class="line">pv = ps;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;pv:%s\n&quot;</span>, (<span class="type">char</span> *)pv);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下为输出结果</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202212281929630.png" alt="image-20221228192926570"></p><p>这样就能够成功的将其他类型指针的值通过赋值给void指针然后给解引用出来了。</p><h2 id="②NULL指针"><a href="#②NULL指针" class="headerlink" title="②NULL指针"></a>②NULL指针</h2><h3 id="（1）意义"><a href="#（1）意义" class="headerlink" title="（1）意义"></a>（1）意义</h3><p>当我们不清楚将指针初始化什么地址时，请将它初始化为NULL，在对指针进行解引用时，先检查该指针是否为NULL。这种策略可以为今后编写大型程序节省大量的调试时间。是一种编程的良好习惯。以下，我们来进行举个例子。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> *p1;</span><br><span class="line"><span class="type">int</span> *p2 = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*p1:%d\n&quot;</span>,p1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*p2:%d&quot;</span>\n,*p1);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>像第一个指针我们未将它进行初始化，它将随便乱指一气，这样的指针我们通常称为野指针，或者迷途指针，而且不会报错，但是第二个初始化为NULL就不一样了，它在程序里面会发生错误，有助于我们进行排查问题。</p><h3 id="（2）注意-1"><a href="#（2）注意-1" class="headerlink" title="（2）注意"></a>（2）注意</h3><p>我们可能之前在ASCII表里面看到第一个就是NUL而不是NULL。</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202212282236341.png" alt="image-20221228223630270"></p><p>但是它们是截然不同的，比如NULL用于指针和对象，表示的是控制，指向一个不被使用的地址；而’\0’表示字符串的结尾。</p>]]></content>
      
      
      <categories>
          
          <category> c语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指针和二维数组</title>
      <link href="/2022/12/29/DEnot/7/"/>
      <url>/2022/12/29/DEnot/7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="指针和二维数组"><a href="#指针和二维数组" class="headerlink" title="指针和二维数组"></a>指针和二维数组</h1><h2 id="①二维数组的定义"><a href="#①二维数组的定义" class="headerlink" title="①二维数组的定义"></a>①二维数组的定义</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> b[<span class="number">4</span>][<span class="number">5</span>];<span class="comment">//图解如下图所示</span></span><br></pre></td></tr></table></figure><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202212231640239.png" alt="image-20221223164028112"></p><h2 id="②二维数组的数组名"><a href="#②二维数组的数组名" class="headerlink" title="②二维数组的数组名"></a>②二维数组的数组名</h2><h3 id="（1）数组名array表示什么？"><a href="#（1）数组名array表示什么？" class="headerlink" title="（1）数组名array表示什么？"></a>（1）数组名<code>array</code>表示什么？</h3><p>根据上面的二维数组的定义，假设我们定义了一个二维数组<code>array[4][5]</code>，那么数组名array又代表什么呢？我们根据前面学的数组和指针估计可以很快明白数组名是数组的首地址！由于二维数组是一维数组的扩展，所以这个数组名也又类似的意思。即是<code>包含了第一维度第一个元素在第二维度的五个元素的指针</code>。图解如下所示。</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202212231646465.png" alt="image-20221223164605399"></p><p>如果想利用代码证明这个想法，我们可以这样写。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> <span class="built_in">array</span>[<span class="number">4</span>][<span class="number">5</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof int =%d\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;array = %p\n&quot;</span>,<span class="built_in">array</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;array+1 = %p\n&quot;</span>,<span class="built_in">array</span>+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 输出结果如下</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202212272229910.png" alt="image-20221227222956838"></p><p>我们知道%p打印出来的地址值是十六进制数，而根据这串代码的输出结果我们可以看出，<code>array到array+1相差了十六进制的14即为十进制的20</code>（不清楚的可以参考我的以往文章<a href="https://bg.luoxi.work/2022/11/19/OCnote/1/">进制及定点数和浮点数 | 洛希的智慧之殿堂 (luoxi.work)</a>）</p><p>可以发现指针在第一维度的首地址到下个地址跨度刚刚好是对应20个字节，则可以证明在二维数组的数组名<code>array[4][5]</code>的每一个地址之间跨度为5个整形数据。即数组名array包含了五个整形数据的指针。</p><h3 id="（2）-array-1-表示的是什么？"><a href="#（2）-array-1-表示的是什么？" class="headerlink" title="（2）*(array+1)表示的是什么？"></a>（2）<code>*(array+1)</code>表示的是什么？</h3><p>通过上面的结论我们可以知道array+1表示的也是五个整形数据的地址，那么*(array+1)又表示的是什么呢？如下所示。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*(<span class="built_in">array</span>+<span class="number">1</span>) == <span class="built_in">array</span>[<span class="number">1</span>] <span class="comment">//指向下一个地址的第一个元素的地址</span></span><br></pre></td></tr></table></figure><p>我们再用一串代码来证明这个想法</p><p>1.先大概给每个二维数组的每个元素依次赋个值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> <span class="built_in">array</span>[<span class="number">4</span>][<span class="number">5</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> i,j,k;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">5</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">array</span>[i][j] = ++k;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;array[%d][%d] = %d\n&quot;</span>,i,j,<span class="built_in">array</span>[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202212272259149.png" alt="image-20221227225911073"></p><p>2.大概代码实现内容如下所示</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> <span class="built_in">array</span>[<span class="number">4</span>][<span class="number">5</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> i,j,k;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">5</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">array</span>[i][j] = ++k;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*(array+1) = %p\n&quot;</span>,*(<span class="built_in">array</span>+<span class="number">1</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;array[1] = %p\n&quot;</span>,<span class="built_in">array</span>[<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;array[1][0] = %p\n&quot;</span>,&amp;<span class="built_in">array</span>[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;**(array+1) = %d\n&quot;</span>,**(<span class="built_in">array</span>+<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果如下</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202212272306931.png" alt="image-20221227230602858"></p><p>我们可以通过结果来证明以上的想法确实是如此而且**[array+1]也刚刚好对应上了<code>array[1][0]</code>的值。</p><h3 id="（3）-（-array-1-3）表示的是什么？"><a href="#（3）-（-array-1-3）表示的是什么？" class="headerlink" title="（3）*（*(array+1)+3）表示的是什么？"></a>（3）<code>*（*(array+1)+3）</code>表示的是什么？</h3><p>通过上面的验证的理解我们不难发现这个<code>*(*(array+1)+3)</code>其实对应的就是<code>array[1][3]</code>的值，因为*(array+1)是指向下一个地址的第一个元素的地址</p><p>而+3是指向第三个元素的地址，然后再用取值运算符*即是取出这个地址的元素，以下我将用一串简单的代码来进行证明这个想法。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> <span class="built_in">array</span>[<span class="number">4</span>][<span class="number">5</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> i,j,k;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">5</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">array</span>[i][j] = ++k;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*(*(array+1)+3) = %d\n&quot;</span>,*（*(<span class="built_in">array</span>+<span class="number">1</span>)+<span class="number">3</span>）);<span class="comment">//*（*(array+1)+3）) == array[1][3]</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202212272315521.png" alt="image-20221227231525454"></p><p>通过以上的演示，我们不难知道<code>*(*(array+i)+j)</code>,其实也就是<code>array[i][j]</code>我们不妨用一串代码来讲他们全部打印出来证实以一下！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> <span class="built_in">array</span>[<span class="number">2</span>][<span class="number">3</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> i,j,k;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">array</span>[i][j] = ++k;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*(*(array+%d)+%d) = %d\n&quot;</span>,i,j,*(*(<span class="built_in">array</span>+i)+j));</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;array[%d][%d] = %d\n&quot;</span>,i,j,<span class="built_in">array</span>[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下所示</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202212272322911.png" alt="image-20221227232236842"></p><h3 id="（4）结论"><a href="#（4）结论" class="headerlink" title="（4）结论"></a>（4）结论</h3><p>根据上面的内容我们不难得到一个结论，如下所示</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*(<span class="built_in">array</span>+i) == <span class="built_in">array</span>[i]</span><br><span class="line">*(*(<span class="built_in">array</span>+i)+j) == <span class="built_in">array</span>[i][j]</span><br><span class="line">*(*(*(<span class="built_in">array</span>+i)+j)+k) == <span class="built_in">array</span>[i][j][k]</span><br></pre></td></tr></table></figure><h2 id="③数组指针和二维数组"><a href="#③数组指针和二维数组" class="headerlink" title="③数组指针和二维数组"></a>③数组指针和二维数组</h2><p>我们知道定义一个数组指针如下所示</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> (*p)[<span class="number">3</span>];</span><br></pre></td></tr></table></figure><p>那么请问如何解释以下的语句呢？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="built_in">array</span>[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line"><span class="type">int</span> (*p)[<span class="number">3</span>] = <span class="built_in">array</span>;</span><br></pre></td></tr></table></figure><p>对此，我们用一个例子来进行理解</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> <span class="built_in">array</span>[<span class="number">2</span>][<span class="number">3</span>] = &#123;&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;&#125;;</span><br><span class="line"><span class="type">int</span> *p[<span class="number">3</span>] = <span class="built_in">array</span>;<span class="comment">//跟第二维度的值对应</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;**(p+1) = %d\n&quot;</span>,**(p+<span class="number">1</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;**(array+1) = %d\n&quot;</span>,**(<span class="built_in">array</span>+<span class="number">1</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;array[1][0] = %d\n&quot;</span>,<span class="built_in">array</span>[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*(*p+1)+2) = %d\n&quot;</span>,*(*p+<span class="number">1</span>)+<span class="number">2</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*(*array+1)+2) = %d\n&quot;</span>,*(*(<span class="built_in">array</span>+<span class="number">1</span>)+<span class="number">2</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;array[1][2] = %d\n&quot;</span>,<span class="built_in">array</span>[<span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202212280134796.png" alt="image-20221228013427701"></p>]]></content>
      
      
      <categories>
          
          <category> c语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>兔子数列</title>
      <link href="/2022/12/28/CTM/4/"/>
      <url>/2022/12/28/CTM/4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>题目：</strong>古典问题（兔子生崽）：有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第三个月后每个月又生一对兔子，假如兔子都不死，问每个月的兔子总数为多少？（输出前40个月即可）</p><hr><p><strong>信息：</strong></p><p>这个是很经典的斐波拉契数列，也称为兔子数列的问题，它的规律是1，1，2，3，5，8，13，21,…</p><p><strong>思路：</strong></p><p>1.定义一个存放四十个元素（40个月的数据）的数组。</p><p>2.初始化数组的第一个元素和第二个元素的值为1。</p><p>3.根据兔子数列的规律，利用for循环40-2次，循环体内容为arr[i+2]=arr[i]+arr[i+1]（兔子数列的规律）。</p><p>4.再利用for循环将他们分别打印出来</p><p><strong>题解：</strong>  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">40</span>];</span><br><span class="line">    arr[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    arr[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;<span class="number">38</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        arr[i+<span class="number">2</span>]=arr[i]+arr[i+<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j&lt;<span class="number">40</span>;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,arr[j]);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202212310128681.png" alt="image-20221231012833609"></p>]]></content>
      
      
      <categories>
          
          <category> C语言经典100题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言经典100题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指针数组和数组指针</title>
      <link href="/2022/12/22/DEnot/6/"/>
      <url>/2022/12/22/DEnot/6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="指针数组和数组指针"><a href="#指针数组和数组指针" class="headerlink" title="指针数组和数组指针"></a>指针数组和数组指针</h1><h2 id="①指针和数组的区别"><a href="#①指针和数组的区别" class="headerlink" title="①指针和数组的区别"></a>①指针和数组的区别</h2><p>指针和数组虽然有很多看起来很相似，但是它们还是有区别的，比如以下的一个例子就能够看出它们之间的一个区别。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> str[]=<span class="string">&quot;I love you!&quot;</span>;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (*str++ != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">pprintf(<span class="string">&quot;&#x27;I love you!&#x27;的字符个数为%d&quot;</span>, count);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于以上的代码是来计算”I love you！”这串字符的长度，如果将他进行运行会出</p><p>现什么样的结果呢？</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202212131828755.png" alt="image-20221213182834641"></p><p>我们会惊奇的发现，编译器发生了报错！</p><p>这又是为什么呢？还有这里面提到的左值又是什么呢？</p><p><code>左值</code>（lvalue）指的是能够出现在<code>赋值语句</code>的左边的表达式。<code>左值通常是一个变量，或者可以获得变量地址的表达式</code>。这意味着，左值一般<code>具有内存空间</code>，并且<code>能够被改变</code>。</p><p><code>右值</code>（rvalue）指的是能够出现在赋值语句的右边的表达式。<code>右值通常是一个字面值，或者是一个计算结果，它们通常不具有内存空间，并且不能被改变</code>。例如，字符串字面值 “hello” 和整数字面值 5 就是右值。</p><p>根据上面对于左值和右值的解释我们不难发现。上面代码的错误在于，将数组名当作为了左值！ 而<code>数组地址是不可以改变的</code>！</p><p>所以对于以上的代码我们要引入一个可改变的指针变量来进行代表这个数组名地址，这就不仅让我们想到指针运算中的p++是访问下一个地址这个概念了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> str[]=<span class="string">&quot;I love you!&quot;</span>;</span><br><span class="line"><span class="type">char</span> *p =str;<span class="comment">//使用指针来间接访问数组的每一个元素</span></span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (*p != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line">p++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&#x27;I love you!&#x27;的字符个数为%d&quot;</span>, count);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后对于以上的代码的输出结果就是我们想要的结果了。</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202212141645772.png" alt="image-20221214164542612"></p><p>从这个例子，我不难发现数组和指针最根本的区别就在于，一个代表的是指针变量，是可以改变的值，而另外一个数组名是一个不可改变的地址。</p><h2 id="②指针数组和数组指针"><a href="#②指针数组和数组指针" class="headerlink" title="②指针数组和数组指针"></a>②指针数组和数组指针</h2><h3 id="（1）如何区分？"><a href="#（1）如何区分？" class="headerlink" title="（1）如何区分？"></a>（1）如何区分？</h3><p>对于指针数组和数组指针，相信很多人看到这里就会有点晕了，它俩咋又在一起了捏？其实对于指针数组和数组指针我们只需要看最后两个字就可以辨别出哪个是指针数组而哪个又是数组指针了！</p><p>很显然<code>指针数组是存放指针的数组</code>，而<code>数组指针是指向数组的指针</code>。以下我将会给出两种形式来进行判断。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *p1[<span class="number">5</span>]</span><br><span class="line"><span class="type">int</span> (*p2)[<span class="number">5</span>]</span><br></pre></td></tr></table></figure><p>对于以上的两个形式是不是看起来有点懵，究竟哪个是数组指针，而哪个又是指针数组呢？</p><p>好了，不卖关子了。其实第一种形式的是指针数组而第二种形式的是数组指针。我们先来了解下指针数组吧！</p><p>判断方法:<code>根据运算符的优先级</code></p><p>*p[5]：根据优先级，先看[]，则p是一个数组，再结合，这个数组的元素是指针类型，共5个元素，这是“指针的数组”，即指针数组。</p><p>（*p)[5]：根据优先级，先看括号内，则p是一个指针，这个指针指向一个数组，数组长度为5，这是“数组的指针”，即数组指针；</p><h3 id="（2）指针数组"><a href="#（2）指针数组" class="headerlink" title="（2）指针数组"></a>（2）指针数组</h3><h4 id="1-功能图"><a href="#1-功能图" class="headerlink" title="1.功能图"></a>1.功能图</h4><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202212221456003.png" alt="image-20221222145610949"></p><h4 id="2-例子"><a href="#2-例子" class="headerlink" title="2.例子"></a>2.例子</h4><p>我们从前面可以了解到指针数组是存放指针的数组，那么对于上面的那个形式我们可以理解到，它就是存放整形指针的数组，数组内的每一个元素都是一个整形指针。那么它在代码中应该怎么实现呢？以下一个例子来进行演示一下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> c = <span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span>* p[<span class="number">3</span>] = &#123; &amp;a,&amp;b,&amp;c &#125;;<span class="comment">//存放a，b，c的地址</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">2</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;*p[%d] = %d\n&quot;</span>, i, *p[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码就很好的展示了指针数组的功能，以下为输出结果。</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202212141719276.png" alt="image-20221214171924209"></p><p>但是一般人不会怎么写代码的，所以我们继续看下个例子。从这个例子我相信你就能发现指针数组的魅力所在！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> *p[<span class="number">4</span>] = &#123;</span><br><span class="line"><span class="string">&quot;大佬们好！&quot;</span>,</span><br><span class="line"><span class="string">&quot;欢迎你们能够访问我的个人博客网站&quot;</span>,</span><br><span class="line"><span class="string">&quot;我的博客网站的地址是bg.luoxi.work&quot;</span>,</span><br><span class="line"><span class="string">&quot;Thank you!&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//用指针数组来进行存放几个字符串也相当于几个字符串数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, p[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于以上的代码的输出结果如下。</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202212141732444.png" alt="image-20221214173211379"></p><h3 id="（3）数组指针"><a href="#（3）数组指针" class="headerlink" title="（3）数组指针"></a>（3）数组指针</h3><h4 id="1-功能图-1"><a href="#1-功能图-1" class="headerlink" title="1.功能图"></a>1.功能图</h4><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202212221457390.png" alt="image-20221222145702357"></p><h4 id="2-例子-1"><a href="#2-例子-1" class="headerlink" title="2.例子"></a>2.例子</h4><p>对于数组指针的话，我们知道它是指向数组的指针，所以我们的代码可以这样写。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">5</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span> &#125;;</span><br><span class="line"><span class="type">int</span>(*p)[<span class="number">5</span>] = &amp;a;<span class="comment">//a表示数组第一个元素的地址，&amp;a表示整个数组的地址</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, *(*p + i));<span class="comment">//括号内的*代表这个数组的地址括号外的*代表取这个数组地址的值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码的输出结果为:</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202212221526309.png" alt="image-20221222152634240"></p>]]></content>
      
      
      <categories>
          
          <category> c语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三位数</title>
      <link href="/2022/12/22/CTM/1/"/>
      <url>/2022/12/22/CTM/1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="题目：有-1、2、3、4-四个数字，能组成多少个互不相同且无重复数字的三位数？都是多少？"><a href="#题目：有-1、2、3、4-四个数字，能组成多少个互不相同且无重复数字的三位数？都是多少？" class="headerlink" title="题目：有 1、2、3、4 四个数字，能组成多少个互不相同且无重复数字的三位数？都是多少？"></a><strong>题目：</strong>有 <strong>1、2、3、4</strong> 四个数字，能组成多少个互不相同且无重复数字的三位数？都是多少？</h2><p><strong>信息：</strong></p><p>1.基于1，2，3，4的三位数</p><p>2.百十个位互不相同</p><p><strong>思路：</strong></p><p>1.定义变量g,s,b,count来分别表示个位，十位，百位，三位数的个数。</p><p>2.利用for循环使得g，s，b能够成功表示1-4。</p><p>3.用if语句来筛选百十个位不等的三位数,并且在if语句内利用count计数。</p><p><strong>题解：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> g, s, b, count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> b = <span class="number">1</span>; b &lt; <span class="number">5</span>; b++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> s = <span class="number">1</span>; s &lt; <span class="number">5</span>; s++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> g = <span class="number">1</span>; g &lt; <span class="number">5</span>; g++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (g != s &amp;&amp; g != b &amp;&amp; s != b)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, b * <span class="number">100</span> + s * <span class="number">10</span> + g);</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;能组成%d个互不相同且无重复数字的三位数&quot;</span>, count);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出结果:</strong></p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202212211630177.png" alt="image-20221221163026087"></p>]]></content>
      
      
      <categories>
          
          <category> C语言经典100题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言经典100题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>求利润</title>
      <link href="/2022/12/22/CTM/3/"/>
      <url>/2022/12/22/CTM/3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>题目：</strong>企业发放的奖金根据利润提成。</p><ul><li>利润(I)低于或等于10万元时，奖金可提10%；</li><li>利润高于10万元，低于20万元时0，低于10万元的部分按10%提成，高于10万元的部分，可提成7.5%；</li><li>20万到40万之间时，高于20万元的部分，可提成5%；</li><li>40万到60万之间时高于40万元的部分，可提成3%；</li><li>60万到100万之间时，高于60万元的部分，可提成1.5%；</li><li>高于100万元时，超过100万元的部分按1%提成。</li></ul><h2 id="从键盘输入当月利润I，求应发放奖金总数？"><a href="#从键盘输入当月利润I，求应发放奖金总数？" class="headerlink" title="从键盘输入当月利润I，求应发放奖金总数？"></a>从键盘输入当月利润I，求应发放奖金总数？</h2><p><strong>思路：</strong></p><p>1.定义变量l和w分别代表利润和发放奖金的总数</p><p>2.通过if–else if–else语句来限制利润的范围所得到的奖金</p><p><strong>题解：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> l,w;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入利润(单位:万元):&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>,&amp;l);</span><br><span class="line"><span class="keyword">if</span>(l&lt;=<span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">    w=l*<span class="number">0.1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(l&lt;=<span class="number">20</span>)</span><br><span class="line">&#123;</span><br><span class="line">    w=<span class="number">1</span>+(l<span class="number">-10</span>)*<span class="number">0.075</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(l&lt;=<span class="number">40</span>)</span><br><span class="line">&#123;</span><br><span class="line">    w=<span class="number">1</span>+<span class="number">0.75</span>+(l<span class="number">-20</span>)*<span class="number">0.05</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(l&lt;=<span class="number">60</span>)</span><br><span class="line">&#123;</span><br><span class="line">    w=<span class="number">1</span>+<span class="number">0.75</span>+<span class="number">0.5</span>+(l<span class="number">-40</span>)*<span class="number">0.03</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(l&lt;=<span class="number">100</span>)</span><br><span class="line">&#123;</span><br><span class="line">    w=<span class="number">1</span>+<span class="number">0.75</span>+<span class="number">0.5</span>+<span class="number">0.3</span>+(l<span class="number">-60</span>)*<span class="number">0.015</span>;</span><br><span class="line">&#125;                           </span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    w=<span class="number">1</span>+<span class="number">0.75</span>+<span class="number">0.5</span>+<span class="number">0.3</span>+<span class="number">0.15</span>+(l<span class="number">-100</span>)*<span class="number">0.01</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;你这个月的奖金是:%lf万元&quot;</span>,w);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C语言经典100题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言经典100题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>平方数</title>
      <link href="/2022/12/22/CTM/2/"/>
      <url>/2022/12/22/CTM/2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>题目：</strong>一个整数，它加上100后是一个完全平方数，再加上168又是一个完全平方数，请问该数是多少？</p><hr><p><strong>思路：</strong></p><p>1.我们假设这个数为x，则x+100=m ^2^；m^2^+168=n^2^；通过这两个式子中的m或者n我们可以来逆推x</p><p>2.然后第二个式子我们可以知道<code>n&gt;m</code>，且(n+m)(n-m)=168;我们再令n+m=i；n-m=j,可以很容易知道m和n必是一奇一偶或者两偶，因为偶偶=偶；奇偶=偶</p><p>3.再根据上面的n+m=i；n-m=j；我们可以知道m=i-j/2；n=i+j/2；且m和n都是整数，所以i和j一定都是偶数，范围容易得到为<code>2=&lt;i,j&lt;=168/2</code>;</p><p>4.所以可以根据for循环以及if语句来实现这个题目</p><p><strong>题解：</strong>  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i, j, m, n, x;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt;= <span class="number">168</span> / <span class="number">2</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">168</span> % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            j = <span class="number">168</span> / i;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; j &amp;&amp; i % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; j % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                m = (i - j) / <span class="number">2</span>;</span><br><span class="line">                n = (i + j) / <span class="number">2</span>;</span><br><span class="line">                x = m * m - <span class="number">100</span>;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;x=%d,%d+100=%d*%d,%d+268=%d*%d\n&quot;</span>, x, x, m, m, x, n, n);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202212221408606.png" alt="image-20221222140849491"></p>]]></content>
      
      
      <categories>
          
          <category> C语言经典100题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言经典100题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指针和数组</title>
      <link href="/2022/12/12/DEnot/4/"/>
      <url>/2022/12/12/DEnot/4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="指针和数组"><a href="#指针和数组" class="headerlink" title="指针和数组"></a>指针和数组</h1><p>当看到这个笔记的时候，你可能会感觉到奇怪，为什么数组和指针会有联系？？？其实它们俩不仅有联系，而且联系密切！</p><p>最后，你会惊讶到：”数组不就是指针吗！（）“</p><p>虽然数组和指针关系密切，好基友，但<code>数组绝不是指针</code>，他们只是鸽们而已！</p><h2 id="①它俩为什么是鸽们？"><a href="#①它俩为什么是鸽们？" class="headerlink" title="①它俩为什么是鸽们？"></a>①它俩为什么是鸽们？</h2><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202212121520199.png" alt="image-20221212152036972"></p><p>首先我们要再次了解下它俩的定义</p><p><strong>数组</strong>：数组是用于储存多个相同类型数据的集合。</p><p><strong>指针</strong>：指针相当于一个变量，但是它和不同变量不一样，它存放的是其它变量在内存中的地址。</p><p>数组和指针的最密切的联系在于，数组名本质上是一个指针常量，它指向数组中第一个元素的地址。因此，可以通过将数组名作为指针来访问数组中的各个元素。下面用一个例子来演示下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="type">int</span> *p = arr;<span class="comment">//此处没有&amp;是因为数组名本身就是一个首地址（数组存放第一个元素的地址），此处就是将数组的地址给指针存放。</span></span><br><span class="line"><span class="comment">//下面是利用for循环将通过指针间接访问数组的五个地址里面的元素</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;第%d个地址内存放的元素是:%d\n&quot;</span>,i,*p);</span><br><span class="line">    p++;<span class="comment">//访问下一个地址</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于上面代码的打印结果如下</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202212121848777.png" alt="image-20221212184844675"></p><p>由此可以看到i，我们可以将数组内的元素都可以通过指针进行访问，大概的解释如下。</p><p><strong>解释：</strong></p><p>指针存储了某个内存地址，通过对指针进行操作（如通过算术运算符来增加或减少指针的值），可以访问该地址对应的内存单元。对于数组，指针指向数组的第一个元素，通过对指针进行递增操作，可以依次访问数组中的每个元素。</p><h2 id="②数组名的真面目"><a href="#②数组名的真面目" class="headerlink" title="②数组名的真面目"></a>②数组名的真面目</h2><p>其实对于以上肯定还是有点疑惑的点是，<code>为什么数组名是个地址？</code></p><p>下面我将用到scanf函数来解释下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">int</span>* p = &amp;a;</span><br><span class="line"><span class="type">char</span> b[<span class="number">114514</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入一个整数:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;你输入的是%d\n&quot;</span>, a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请再输入一个整数:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, p);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;你输入的是%d\n&quot;</span>, a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请最后用英文评价这串代码:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;你输入的最后一串英文是%s\n&quot;</span>, b);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于以上的代码我们可以很明显看到用指针以及用数组之后，scanf函数内并未用到取地址操作符”&amp;”，这样就可以证明数组名就是一个存放数据的地址了！以下为输出结果</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202212121912277.png" alt="image-20221212191255210"></p><p>如果通过以上的例子还不能理解，我们不妨看下个例子。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">114514</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> &#125;;</span><br><span class="line">    <span class="type">char</span> b[<span class="number">114514</span>] = <span class="string">&quot;DOG&quot;</span>;</span><br><span class="line">    <span class="type">float</span> c[<span class="number">114514</span>] = &#123; <span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span> &#125;;</span><br><span class="line">    <span class="type">double</span> d[<span class="number">114514</span>] = &#123; <span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span> &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">2</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;a的第%i个地址是:%p\n&quot;</span>, i + <span class="number">1</span>, a[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;b的第%i个地址是:%p\n&quot;</span>, i + <span class="number">1</span>, b[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;c的第%i个地址是:%p\n&quot;</span>, i + <span class="number">1</span>, c[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;d的第%i个地址是:%p\n&quot;</span>, i + <span class="number">1</span>, d[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; \n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们知道%p是用来打印地址的，那么以上的打印结果会怎么样呢？我们来看下面的输出结果</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202212121931303.png" alt="image-20221212193146236"></p><p>通过以上的几个例子，我们大概也知道了数组名的真面目了。</p><p><code>数组名其实是地址！</code></p><h2 id="③指向数组的指针"><a href="#③指向数组的指针" class="headerlink" title="③指向数组的指针"></a>③指向数组的指针</h2><p>如果用一个指针指向数组，应该怎么做呢？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> a[<span class="number">114514</span>];</span><br><span class="line"><span class="type">char</span> *P;</span><br><span class="line">p=a;<span class="comment">//形式1</span></span><br><span class="line">p=&amp;a[i]<span class="comment">//形式2，i为数组的下标</span></span><br></pre></td></tr></table></figure><h2 id="④指针的运算"><a href="#④指针的运算" class="headerlink" title="④指针的运算"></a>④指针的运算</h2><p>其实对于最开始的那串代码，我们或许可能会存在一个疑惑。</p><p><strong>那就是为什么p++为访问下一个地址？</strong></p><p>那是因为当指针指向数组元素的时候，我们可以对指针变量进行加减运算，这样做的意义相当于指向距离指针所在位置向前或向后第n个元素。<code>这个不管数组是什么类型都是成立的</code>！因为p+1并不是简单地将地址加1，而是指向数组的下一个元素。</p><p>对比标准的下标法访问数组元素，这种<code>使用指针进行间接访问的方法叫做指针法</code>。</p><p>我们继续用个例子来运用指针运算的同时，而且来进一步了解指针和数组的关系。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span><span class="comment">//因为要使用字符串函数，所以必须引用此头文件</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span>  <span class="type">char</span>* a = <span class="string">&quot;I love you!&quot;</span>;</span><br><span class="line"><span class="comment">//字符串变量前面加上const这样做是为了避免通过指针变量修改字符串常量的内容，因为字符串常量是不可修改的，否则就会警告。</span></span><br><span class="line"><span class="type">int</span> i, len;</span><br><span class="line">len = <span class="built_in">strlen</span>(a);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, a[i]);<span class="comment">//这里可以充分证明其实指针某种意义上也是数组</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码的输出结果如下所示</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202212122009451.png" alt="image-20221212200942364"></p><p>通过这个输出结果可以发现，指针其实也意外的很像数组。</p>]]></content>
      
      
      <categories>
          
          <category> c语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BiliBili图床配置</title>
      <link href="/2022/12/12/DEnot/5/"/>
      <url>/2022/12/12/DEnot/5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="如何薅鼠鼠的羊毛？"><a href="#如何薅鼠鼠的羊毛？" class="headerlink" title="如何薅鼠鼠的羊毛？"></a>如何薅鼠鼠的羊毛？</h1><h2 id="①方法一"><a href="#①方法一" class="headerlink" title="①方法一"></a>①方法一</h2><h3 id="（1）下载插件文件和typora"><a href="#（1）下载插件文件和typora" class="headerlink" title="（1）下载插件文件和typora"></a>（1）下载插件文件和typora</h3><p><strong>插件</strong></p><p>windows：<a href="https://gitee.com/link?target=https://jiali0126.oss-cn-shenzhen.aliyuncs.com/typora/main.exe">( •̀ ω •́ )✧</a></p><p>Mac:  <a href="https://gitee.com/link?target=https://typora.io/dev_release.html">( •̀ ω •́ )✧</a></p><p><strong>typora</strong></p><p>windows:  <a href="https://gitee.com/link?target=https://typora.io/windows/dev_release.html">( •̀ ω •́ )✧</a></p><p>Mac:  <a href="https://gitee.com/link?target=https://typora.io/dev_release.html">( •̀ ω •́ )✧</a></p><h3 id="（2）获取BiliBili的SESSDATAc【重要】"><a href="#（2）获取BiliBili的SESSDATAc【重要】" class="headerlink" title="（2）获取BiliBili的SESSDATAc【重要】"></a>（2）获取BiliBili的SESSDATAc【重要】</h3><p>1.进入bilibili主页面</p><p>2.打开F12进行调试（推荐edge浏览器）</p><p>3.操作如下图所示1-4</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202212151745119.png" alt="image-20221215171447356"></p><p>4.复制SESSDATA，保存到后面有用。</p><h3 id="（3）放置插件文件并复制路劲"><a href="#（3）放置插件文件并复制路劲" class="headerlink" title="（3）放置插件文件并复制路劲"></a>（3）放置插件文件并复制路劲</h3><p>1.将main.exe插件随意放置在一个文件目录里面</p><p>2.复制相关的路劲地址，后面再到typora中进行复制</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202212151745018.png" alt="image-20221215170239766"></p><h3 id="（4）打开typora并选择下图对应选项然后复制路劲"><a href="#（4）打开typora并选择下图对应选项然后复制路劲" class="headerlink" title="（4）打开typora并选择下图对应选项然后复制路劲"></a>（4）打开typora并选择下图对应选项然后复制路劲</h3><p>1.先根据下面图片顺序进行更改设置</p><p>2.然后复制刚刚的路劲，空一格输入token，如下所示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;复制刚刚输入的路劲&quot; token=BiliBili的SESSDATAc</span><br></pre></td></tr></table></figure><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202212151745317.png" alt="image-20221215171619871"></p><p>3.最后点击验证图片的上传选项</p><p>显示如下就表示配置成功！</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202212151745716.png" alt="image-20221215171706127"></p><h2 id="②方法二"><a href="#②方法二" class="headerlink" title="②方法二"></a>②方法二</h2><h3 id="（1）下载Picgo和上面方法的插件和typora"><a href="#（1）下载Picgo和上面方法的插件和typora" class="headerlink" title="（1）下载Picgo和上面方法的插件和typora"></a>（1）下载Picgo和上面方法的插件和typora</h3><p><strong>Picgo</strong></p><p><a href="https://mirrors.sdu.edu.cn/github-release/Molunerfinn_PicGo/v2.3.1/">( •̀ ω •́ )✧</a></p><p><strong><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202212151745937.png" alt="image-20221215172103400"></strong></p><p>上面演示的是windows64位操作系统安装的picgo</p><p><strong>注：第一次下载Picgo记得打开Picgo设置内的自启动设置，也可以参考我的设置</strong></p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202212151745115.png" alt="image-20221215172433655"></p><h3 id="（2）打开Picgo下载BiliBili图床插件"><a href="#（2）打开Picgo下载BiliBili图床插件" class="headerlink" title="（2）打开Picgo下载BiliBili图床插件"></a>（2）打开Picgo下载BiliBili图床插件</h3><p>在插件设置中搜索BiliBili即可找到BiliBili图床的插件</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202212151745420.png" alt="image-20221215172255819"></p><h3 id="（3）配置BiliBili图床的设置"><a href="#（3）配置BiliBili图床的设置" class="headerlink" title="（3）配置BiliBili图床的设置"></a>（3）配置BiliBili图床的设置</h3><p>根据上面方法一的获取BiliBili的SESSDATAc然后复制进去即可</p><p><strong>记得将BiliBili图床设置为默认图床！</strong></p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202212151745822.png" alt="image-20221215172657821"></p><h3 id="（4）typora配置"><a href="#（4）typora配置" class="headerlink" title="（4）typora配置"></a>（4）typora配置</h3><p>根据我下图的配置即可</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202212151745065.png" alt="image-20221215173047148"></p>]]></content>
      
      
      <categories>
          
          <category> 经验分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指针初步</title>
      <link href="/2022/12/10/DEnot/3/"/>
      <url>/2022/12/10/DEnot/3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><h2 id="①地址和变量"><a href="#①地址和变量" class="headerlink" title="①地址和变量"></a>①地址和变量</h2><h3 id="（1）地址"><a href="#（1）地址" class="headerlink" title="（1）地址"></a>（1）地址</h3><p>在C语言中，<code>scanf</code>函数需要使用地址作为参数，因为它需要在内存中修改值。变量的地址就是指向该变量的内存位置的<code>指针</code>，所以如果要在函数内部修改变量的值，就必须使用取址符<code>&amp;</code>来获取变量的地址。</p><p><code>地址指的是在计算机内存中存储数据的位置。</code>在我们日常生活中，我们可能会收到一份信件，这份信件会有一个指定的地址，用于确定信件发送到哪里。在计算机内存中，每个数据都有一个唯一的地址，用于确定它在内存中的位置。</p><h3 id="（2）变量"><a href="#（2）变量" class="headerlink" title="（2）变量"></a>（2）变量</h3><p><code>变量是在计算机程序中用来存储数据的一种容器。</code>在我们日常生活中，我们可能会用一个背包来装东西，我们可以随时将东西放入背包或者从背包中取出东西。在计算机程序中，变量也可以用来存储数据，并且可以随时将数据存入变量或者从变量中取出数据。</p><p>地址和变量之间的关系：<code>当我们使用变量来存储数据时，计算机会在内存中的特定地址来存储这些数据。</code>这样，当我们需要使用这些数据时，就可以通过变量来访问数据所在的内存地址，从而取出数据。</p><h2 id="②指针和指针变量"><a href="#②指针和指针变量" class="headerlink" title="②指针和指针变量"></a>②指针和指针变量</h2><h3 id="（1）指针和地址"><a href="#（1）指针和地址" class="headerlink" title="（1）指针和地址"></a>（1）指针和地址</h3><p>通过上面对于地址和变量的解释，我们提到了<code>&quot;地址&quot;</code>这一个概念，而指针与它有着密切的联系。</p><p><code>指针存储的是某个数据在内存中的地址</code>，也就是说，指针实际上就是某个数据在内存中的地址。这就像在旅游时，一个人指着某个方向告诉你去哪里，这个方向就是某个地方的地址。</p><h3 id="（2）定义指针变量"><a href="#（2）定义指针变量" class="headerlink" title="（2）定义指针变量"></a>（2）定义指针变量</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">类型名 *指针变量名</span><br><span class="line"><span class="type">char</span> *pa;<span class="comment">//定义一个指向字符型的指针变量</span></span><br><span class="line"><span class="type">int</span> *pb;<span class="comment">//定义一个指向类型的指针变量</span></span><br></pre></td></tr></table></figure><h2 id="③取地址运算符和取值运算符-间接运算符"><a href="#③取地址运算符和取值运算符-间接运算符" class="headerlink" title="③取地址运算符和取值运算符(间接运算符)"></a>③取地址运算符和取值运算符(间接运算符)</h2><h3 id="（1）取地址运算符"><a href="#（1）取地址运算符" class="headerlink" title="（1）取地址运算符"></a>（1）取地址运算符</h3><p>如果需要获取某个变量的地址，可以使用取地址运算符(&amp;)：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *pa = &amp;a;</span><br><span class="line"><span class="type">int</span> *pb = &amp;f;</span><br></pre></td></tr></table></figure><h3 id="（2）取值运算符-间接运算符"><a href="#（2）取值运算符-间接运算符" class="headerlink" title="（2）取值运算符(间接运算符)"></a>（2）取值运算符(间接运算符)</h3><p>如果需要访问指针变量指向的数据，可以使用取值运算符(*):</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c, %d\n&quot;</span>, *pa, *pb);</span><br></pre></td></tr></table></figure><p>我们不难发现，在我们使用取值运算符的时候再回看前面的定义指针变量时候用的符号都是<code>&quot;*&quot;</code>。这很明显是一种符号的重用。但是在不同的地方它肯定是有不同的含义的，<code>在定义的时候，它定义的是指针变量。再其他地方的时候，它指的是取指针变量指向的那个变量的值。</code></p><p><strong>直接访问变量的值我们称为<code>直接访问</code></strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a);<span class="comment">//这里就是直接访问a的值</span></span><br></pre></td></tr></table></figure><p><strong>通过访问指针存放的地址指向的那个值我们称之为<code>间接访问</code></strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c, %d\n&quot;</span>, *pa);<span class="comment">//这里就是间接访问a的值</span></span><br></pre></td></tr></table></figure><p>注：所以根据以上的例子，<code>取值运算符有时候又被称为间接运算符</code>。</p><p>对于以上的内容，我将用有一串代码来帮助理解。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> m = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">114514</span>;</span><br><span class="line">    <span class="type">char</span>* pa = &amp;m;</span><br><span class="line">    <span class="type">int</span>* pb = &amp;n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;m = %c\n&quot;</span>, *pa);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;n = %d\n&quot;</span>, *pb);</span><br><span class="line">    *pa = <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">    *pb += <span class="number">1805296</span>;<span class="comment">//表示先加让地址b内的变量n先加1805296，再让n=这个加后的值，即是n = n + 1805296 </span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;现在m = %c\n&quot;</span>, *pa);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;现在n = %d\n&quot;</span>, *pb);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于以上的代码输出的结果如下所示</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202212102248384.png" alt="image-20221210224807297"></p><p>一般来说指针定义的地址变量一般只占用四个字节的内存空间，但是真的是这样吗？我们应该如何将它计算出来了，这个时候就可以用到sizeof函数来进行计算下指针定义的地址变量是否占用四个字节。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span>* pa ;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pa占用内存为%d个字节\n&quot;</span>,<span class="keyword">sizeof</span> (pa));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们分别测试两个编译器来看看结果吧！</p><p><strong>vscode</strong> </p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202212102255131.png" alt="image-20221210225503070"></p><p><strong>vs2019</strong></p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202212102255530.png" alt="image-20221210225515471"></p><p>我们发现不同的编译器的指针变量占用的内存空间不一样，在vscode里面是8个字节，而在vs2019中却是4个字节，但是一般的编译器都是占用4个字节</p><p>还有就是我们上面代码打印的地址指向的那个变量，接下来我们来试着把指针的地址打印出来，会出现什么样的结果呢？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span>* pa;</span><br><span class="line">    <span class="type">int</span>* pb;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pa = %p\n&quot;</span>, pa);<span class="comment">//%p的作用是打印变量地址</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pb = %p\n&quot;</span>, pb);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后打印出来的结果就是一个十六进制的地址，结果如下</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202212102307588.png" alt="image-20221210230750524"></p><h2 id="④避免访问未初始化的指针"><a href="#④避免访问未初始化的指针" class="headerlink" title="④避免访问未初始化的指针"></a>④避免访问未初始化的指针</h2><p>比如以下的代码就是十分的危险的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> *a;</span><br><span class="line">*a = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码中有一个严重的错误。它将一个未初始化的指针指向一个整数，并尝试对这个整数进行赋值。这种操作是不安全的，可能会导致程序崩溃或产生未定义的行为。</p>]]></content>
      
      
      <categories>
          
          <category> c语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二维数组</title>
      <link href="/2022/12/10/DEnot/2/"/>
      <url>/2022/12/10/DEnot/2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h1><h2 id="①二维数组的定义"><a href="#①二维数组的定义" class="headerlink" title="①二维数组的定义"></a>①二维数组的定义</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">类型 数组名[常量表达式][常量表达式]</span><br><span class="line"><span class="type">int</span> a[<span class="number">6</span>][<span class="number">6</span>];<span class="comment">//6*6, 6行6列</span></span><br><span class="line"><span class="type">char</span> b[<span class="number">4</span>][<span class="number">5</span>];<span class="comment">//4*5, 4行5列</span></span><br><span class="line"><span class="type">double</span> c[<span class="number">6</span>][<span class="number">3</span>];<span class="comment">//6*3,6行3列</span></span><br></pre></td></tr></table></figure><p>大概的存放形式于下图所示</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221203221324668.png" alt="image-20221203221324668"></p><h2 id="②二维数组的访问"><a href="#②二维数组的访问" class="headerlink" title="②二维数组的访问"></a>②二维数组的访问</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">数组名[下标][下标]；</span><br><span class="line">a[<span class="number">0</span>][<span class="number">0</span>];<span class="comment">//访问a数组中第1行第1列的元素</span></span><br><span class="line">b[<span class="number">1</span>][<span class="number">3</span>];<span class="comment">//访问b数组中第2行第4列的元素</span></span><br><span class="line">c[<span class="number">3</span>][<span class="number">3</span>];<span class="comment">//访问c数组中第4行第4列的元素</span></span><br></pre></td></tr></table></figure><p><code>注意:在二维数组中同样要注意下标的取值范围，以防止数组的越界访问</code></p><p>比如int a[3] [4]，其“行下标”的取值范围是0-2，“列下标”的取值范围是0-3，超出任何一个下标的访问都是越界访问。</p><h2 id="③二维数组的初始化"><a href="#③二维数组的初始化" class="headerlink" title="③二维数组的初始化"></a>③二维数组的初始化</h2><p><strong>1.由于二维数组在内存中是线性存放的，因此可以将所有的数据写在一个花括号内</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">3</span>][<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">12</span>&#125;</span><br></pre></td></tr></table></figure><p> 如果我们需要将这些数字打印出来，我们可以运用以下的一串代码将其实现，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">3</span>][<span class="number">4</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span> &#125;;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于以上的代码的输出结果如下图所示</p><p><img src="https://picbed.luoxi.work/img/202212102025067.png" alt="image-20221210202511998"></p><p><strong>2.为了更加直观地表示元素的分布，可以利用花括号将每一行的元素括起来</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">3</span>][<span class="number">4</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;,&#123;<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;&#125;;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">3</span>][<span class="number">4</span>] =</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;,</span><br><span class="line">&#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;,</span><br><span class="line">&#123;<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>3.二维数组也可以仅对部分的元素赋初值</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">3</span>][<span class="number">4</span>] = &#123;&#123;<span class="number">1</span>&#125;,&#123;<span class="number">5</span>&#125;,&#123;<span class="number">9</span>&#125;&#125;;</span><br></pre></td></tr></table></figure><p>对于以上这种形式大家是否有个疑惑。</p><p>就是这个究竟是给数组的第一行的前三个元素进行赋值，还是给前三行的第一个元素赋值呢？</p><p>对于以上的疑问我们可以进行用一串代码来解答下这个疑问。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">3</span>][<span class="number">4</span>] = &#123;&#123;<span class="number">1</span>&#125;,&#123;<span class="number">5</span>&#125;,&#123;<span class="number">9</span>&#125;&#125;;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这行代码就是将数组内的赋值改成以上的形式。</p><p>它的输出结果会是怎么样呢？</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202212102035460.png" alt="image-20221210203533403"></p><p>通过以上的结果可以看到，很明显第二个想法是正确的！</p><p><strong>4.如果希望整个二维数组初始化为0，那么直接在大括号里写一个0即可</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">3</span>][<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;;</span><br></pre></td></tr></table></figure><p> <strong>5. C99同样增加了一个新特性：指定初始化的元素。这样就可以只对数组中的某些指定元素初始化赋值，而未被赋值的元素自动初始化为0</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">3</span>][<span class="number">4</span>] = &#123;[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>, [<span class="number">1</span>][<span class="number">1</span>] = <span class="number">2</span>, [<span class="number">2</span>][<span class="number">2</span>] = <span class="number">3</span> &#125;;</span><br></pre></td></tr></table></figure><p><strong>6.二维数组的初始化也能偷懒，让编译器根据元素的数量计算数组的长度。但只有第一维度的元素个数可以不写，其他维度必须写上</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[][<span class="number">4</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;,&#123;<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> c语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串处理函数</title>
      <link href="/2022/12/01/DEnot/1/"/>
      <url>/2022/12/01/DEnot/1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="字符串处理函数"><a href="#字符串处理函数" class="headerlink" title="字符串处理函数"></a>字符串处理函数</h1><h2 id="1-存放和表示字符串的两种方法"><a href="#1-存放和表示字符串的两种方法" class="headerlink" title="1.存放和表示字符串的两种方法"></a>1.存放和表示字符串的两种方法</h2><h3 id="①字符串常量"><a href="#①字符串常量" class="headerlink" title="①字符串常量"></a>①字符串常量</h3><p>“I LOVE YOU”,”洛希”</p><h3 id="②字符数组"><a href="#②字符数组" class="headerlink" title="②字符数组"></a>②字符数组</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> main</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//初始化字符数组的每个元素</span></span><br><span class="line">    <span class="type">char</span> str1[<span class="number">10</span>] = &#123;<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;O&#x27;</span>,<span class="string">&#x27;V&#x27;</span>,<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line"><span class="comment">//可以不写元素的个数，因为编译器会自动计算</span></span><br><span class="line">    <span class="type">char</span> str2[] = &#123;<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;O&#x27;</span>,<span class="string">&#x27;V&#x27;</span>,<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line"><span class="comment">//使用字符串常量初始化字符数组</span></span><br><span class="line">    <span class="type">char</span> str3[] = &#123;<span class="string">&quot;LOVE&quot;</span>&#125;；</span><br><span class="line"><span class="comment">//使用字符串常量初始化，可以省略大括号</span></span><br><span class="line">    <span class="type">char</span> str4[] =<span class="string">&quot;LOVE&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="2-字符串处理函数"><a href="#2-字符串处理函数" class="headerlink" title="2.字符串处理函数"></a>2.字符串处理函数</h2><h3 id="①获取字符串的长度-strlen"><a href="#①获取字符串的长度-strlen" class="headerlink" title="①获取字符串的长度:strlen"></a>①获取字符串的长度:<code>strlen</code></h3><p>为了区分strlen和sizeof的区别，下面用一串代码来进行演示下他们最后所得到的长度</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span><span class="comment">//引用此头文件才能使用字符串函数，当然像vs2019就可以不用，不过最好写上。</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> str[] = <span class="string">&quot;LOVE&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">strlen</span>(str));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(str));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span> ;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面分别为用sizeof计算以及用strlen计算得到的结果</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221201133823416.png" alt="image-20221201133823416"></p><p>可以看到seziof比strlen多计算出来了一个，那就是我们常见的空字符’\0’</p><h3 id="②拷贝字符串的strcpy和strncpy"><a href="#②拷贝字符串的strcpy和strncpy" class="headerlink" title="②拷贝字符串的strcpy和strncpy"></a>②拷贝字符串的<code>strcpy</code>和<code>strncpy</code></h3><p>对于以上两个拷贝字符串的函数，它们到底有什么区别了，以下用一串代码来进行演示下它们的区别。</p><h4 id="（1）strcpy"><a href="#（1）strcpy" class="headerlink" title="（1）strcpy"></a>（1）strcpy</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> str1[]=<span class="string">&quot;LOVE&quot;</span>;</span><br><span class="line">    <span class="type">char</span> str2[]=<span class="string">&quot;LOVE YOU&quot;</span>;</span><br><span class="line">    <span class="type">char</span> str3[<span class="number">114514</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(str2,str1);<span class="comment">//将str1的字符串拷贝到str2中</span></span><br><span class="line">    <span class="built_in">strcpy</span>(str3,<span class="string">&quot;I LOVE YOU&quot;</span>);<span class="comment">//将&quot;T LOVE YOU&quot;这个字符串拷贝到str3中</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;str1=%s\n&quot;</span>,str1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;str2=%s\n&quot;</span>,str2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;str3=%s\n&quot;</span>,str3);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后打印出来的结果为</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221201135257682.png" alt="image-20221201135257682"></p><p>但是，如果我们将str2的字符串拷贝到str1中将会发生什么呢？</p><p>因为str1只储存了LOVE以及\0这五个字符，但是str2存了一共9个字符，很明显把str2的拷贝到str1中会出现错误，我们来看下这个错误的结果会带来什么吧！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> str1[]=<span class="string">&quot;LOVE&quot;</span>;</span><br><span class="line">    <span class="type">char</span> str2[]=<span class="string">&quot;LOVE YOU&quot;</span>;</span><br><span class="line">    <span class="type">char</span> str3[<span class="number">114514</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(str1,str2);<span class="comment">//将str2的字符串拷贝到str1中</span></span><br><span class="line">    <span class="built_in">strcpy</span>(str3,<span class="string">&quot;I LOVE YOU&quot;</span>);<span class="comment">//将&quot;T LOVE YOU&quot;这个字符串拷贝到str3中</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;str1=%s\n&quot;</span>,str1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;str2=%s\n&quot;</span>,str2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;str3=%s\n&quot;</span>,str3);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221201140516834.png" alt="image-20221201140516834"></p><p>但是并没有造成什么影响，这是为什么呢？实际上如果以上代码出现这种错误都是会覆盖掉一些字符的，但是本人用的是VSCODE的编译器，所以没有什么影响。</p><h4 id="（2）strncpy"><a href="#（2）strncpy" class="headerlink" title="（2）strncpy"></a>（2）strncpy</h4><p>strncpy对比strcpy的区别就是多了一个n！当然这是开玩笑的，实际上，多的这一个n就使得它拥有了限制字符拷贝的功能。</p><p>我们通过以下代码来进行理解吧。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> str1[]=<span class="string">&quot;LOVE&quot;</span>;</span><br><span class="line">    <span class="type">char</span> str2[]=<span class="string">&quot;LOVE YOU&quot;</span>;</span><br><span class="line">    <span class="type">char</span> str3[<span class="number">114514</span>];</span><br><span class="line">    <span class="built_in">strncpy</span>(str1,str2,<span class="number">6</span>);<span class="comment">//将str2的字符串拷贝到str1中,并且限制数量为6</span></span><br><span class="line">    <span class="built_in">strcpy</span>(str3,<span class="string">&quot;I LOVE YOU&quot;</span>);<span class="comment">//将&quot;T LOVE YOU&quot;这个字符串拷贝到str3中</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;str1=%s\n&quot;</span>,str1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;str2=%s\n&quot;</span>,str2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;str3=%s\n&quot;</span>,str3);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于以上的代码将会有怎样的输出结果呢？</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221201141257798.png" alt="image-20221201141257798"></p><p>这样我们就实现了限制拷贝的数量，但是我们发现以上打印结果有个很大的问题，就是love y后面出现了乱码？这又是为什么呢？这也是我们经常犯的一个致命的错误，就是把<code>空字符</code>又忘记了！这个在我往期的笔记也有提到过，空字符的重要程度，请参考我的往期文章<a href="https://bg.luoxi.work/2022/11/19/NOnote/5/">字符和字符串 | 洛希的智慧之殿堂 (luoxi.work)</a>。</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221201141557022.png" alt="image-20221201141557022"></p><p>对于以上出现的问题，我们就必须要使得str1的第七个字符用’\0’使其进行终止，修改后的代码如下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> str1[]=<span class="string">&quot;LOVE&quot;</span>;</span><br><span class="line">    str1[<span class="number">6</span>]=<span class="string">&#x27;\0&#x27;</span>;<span class="comment">//使其拷贝到第7个字符进行终止</span></span><br><span class="line">    <span class="type">char</span> str2[]=<span class="string">&quot;LOVE YOU&quot;</span>;</span><br><span class="line">    <span class="type">char</span> str3[<span class="number">114514</span>];</span><br><span class="line">    <span class="built_in">strncpy</span>(str1,str2,<span class="number">6</span>);<span class="comment">//将str2的字符串拷贝到str1中,并且限制数量为6</span></span><br><span class="line">    <span class="built_in">strcpy</span>(str3,<span class="string">&quot;I LOVE YOU&quot;</span>);<span class="comment">//将&quot;T LOVE YOU&quot;这个字符串拷贝到str3中</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;str1=%s\n&quot;</span>,str1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;str2=%s\n&quot;</span>,str2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;str3=%s\n&quot;</span>,str3);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后得到的结果才是我们如意的结果</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221201141859555.png" alt="image-20221201141859555"></p><h3 id="③连接字符串的strcat和strncat"><a href="#③连接字符串的strcat和strncat" class="headerlink" title="③连接字符串的strcat和strncat"></a>③连接字符串的<code>strcat</code>和<code>strncat</code></h3><p>对于连接字符串的strcat以及strncat的功能很明显就跟连接有很大的关系。而我们看这两个函数是不是也是第二个函数比第一个函数多了一个n？让我们来看看这两个函数的相关功能的演示代码吧！</p><h4 id="（1）strcat"><a href="#（1）strcat" class="headerlink" title="（1）strcat"></a>（1）strcat</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span>    </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> str1[] = <span class="string">&quot;I LOVE &quot;</span>;</span><br><span class="line">    <span class="type">char</span> str2[] = <span class="string">&quot;YOU&quot;</span>;</span><br><span class="line">    <span class="built_in">strcat</span>(str1,str2);<span class="comment">//将str2的字符串拼接到str1字符串的后面</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;str1:%s\n&quot;</span>,str1);    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于以上代码的打印结果如下</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221201142714923.png" alt="image-20221201142714923"></p><h4 id="（2）strncat"><a href="#（2）strncat" class="headerlink" title="（2）strncat"></a>（2）strncat</h4><p>对于这个函数，很明显也是起到了一共限制的作用，但是唯一有个不同的是，它会<code>自动追加空字符</code>将其结束！所以我们就可以”偷下懒”不用写’\0’了,我们用一串代码来进行演示一下吧！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span>    </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> str1[] = <span class="string">&quot;I LOVE &quot;</span>;</span><br><span class="line">    <span class="type">char</span> str2[] = <span class="string">&quot;YOU&quot;</span>;</span><br><span class="line">    <span class="built_in">strncat</span>(str1,str2,<span class="number">1</span>);<span class="comment">//将str2的字符串拼接到str1字符串的后面,限制字符为1</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;str1:%s\n&quot;</span>,str1);    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下为输出结果</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221201143357711.png" alt="image-20221201143357711"></p><h3 id="④比较字符串的strcmp和strncmp"><a href="#④比较字符串的strcmp和strncmp" class="headerlink" title="④比较字符串的strcmp和strncmp"></a>④比较字符串的strcmp和strncmp</h3><p>对于这两个函数的功能，和明显就是比较字符串啦！但是，它比较的究竟是什么呢？是字符串的长度吗？还是什么…如果是比较字符串的长度那第二个函数的限制字符串的长度是不是有点矛盾了，所以这里来讲它们不是用来比较字符串的长度的，而是<code>通过比较ASCII码值来比较两个字符串是否一致</code>。所以它们常在if语句内进行判断。</p><p>对于以上的内容，我将用以下的代码来进行演示它们的功能。</p><h4 id="（1）strcmp"><a href="#（1）strcmp" class="headerlink" title="（1）strcmp"></a>（1）strcmp</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> str1[] = <span class="string">&quot;I LOVE&quot;</span>;</span><br><span class="line">    <span class="type">char</span> str2[] = <span class="string">&quot;I LOVE&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(str1, str2))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;两个字符串一致&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;两个字符串不一致&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于以上代码，我们可以指定str1和str2的字符串是一致的，最后的结果是否会如意呢？我们来看打印结果</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221201144523932.png" alt="image-20221201144523932"></p><p>很奇怪，为什么会出现这个结果呢？它们不都是一致的吗？为什么会判断出来它们不一致，这是因为我们<code>忽略了这个函数最后返回的值的多少</code>。</p><p>而strcmp如何计算获得返回值呢？</p><ul><li>自左向右逐个按照<a href="https://blog.csdn.net/MQ0522/article/details/111246235">ASCII码</a>值进行比较，直到出现不同的字符或遇’\0’为止。</li><li>如果返回值 &lt; 0，则表示 s1 小于 s2。</li><li>如果返回值 &gt; 0，则表示 s1 大于 s2。</li><li>如果返回值 = 0，则表示 s1 等于 s2。</li></ul><p>我们用一串代码来计算下它们的返回值吧！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> a[] = <span class="string">&quot;LOVe&quot;</span>;</span><br><span class="line">    <span class="type">char</span> b[] = <span class="string">&quot;LOVE&quot;</span>;</span><br><span class="line">    <span class="type">char</span> c[] = <span class="string">&quot;love&quot;</span>;</span><br><span class="line">    <span class="type">char</span> d[] = <span class="string">&quot;LOVe&quot;</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//strcmp()只能比较字符串， 其他形式的参数不能比较 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;strcmp(a, b):%d\n&quot;</span>, <span class="built_in">strcmp</span>(a, b));<span class="comment">//字符串之间的比较b和a进行比较，对应上面s1和s2比较</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;strcmp(a, c):%d\n&quot;</span>, <span class="built_in">strcmp</span>(a, c));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;strcmp(a, d):%d\n&quot;</span>, <span class="built_in">strcmp</span>(a, d));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印结果如下</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221201145203140.png" alt="image-20221201145203140"></p><p>所以对于我们上面一开始写的代码，if语句里面因为它俩一致返回值为0，导致判断为假，所以我们只需要加个 ！就可以实现判断了。</p><p>修改的代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> str1[] = <span class="string">&quot;I LOVE&quot;</span>;</span><br><span class="line">    <span class="type">char</span> str2[] = <span class="string">&quot;I LOVE&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(str1, str2))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;两个字符串一致&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;两个字符串不一致&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时对应的输出结果才符合预期，以下为输出结果。</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221201145452913.png" alt="image-20221201145452913"></p><h4 id="（2）strncmp"><a href="#（2）strncmp" class="headerlink" title="（2）strncmp"></a>（2）strncmp</h4><p>对于这个函数，很明显是起到了限制比较字符个数的作用，我们用以下的代码来帮助理解吧！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> str1[] = <span class="string">&quot;I LOVE dasdjasdkasd&quot;</span>;</span><br><span class="line">    <span class="type">char</span> str2[] = <span class="string">&quot;I LOVE asdsaodiasd&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strncmp</span>(str1, str2,<span class="number">7</span>))<span class="comment">//限制比较前7个字符</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;两个字符串一致&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;两个字符串不一致&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下为打印的结果</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221201145736329.png" alt="image-20221201145736329"></p><p>相反的，如果我们限制前10个字符呢？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> str1[] = <span class="string">&quot;I LOVE dasdjasdkasd&quot;</span>;</span><br><span class="line">    <span class="type">char</span> str2[] = <span class="string">&quot;I LOVE asdsaodiasd&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strncmp</span>(str1, str2,<span class="number">10</span>))<span class="comment">//限制比较前10个字符</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;两个字符串一致&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;两个字符串不一致&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印结果如下</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221201145951821.png" alt="image-20221201145951821"></p>]]></content>
      
      
      <categories>
          
          <category> c语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组初步</title>
      <link href="/2022/12/01/NOnote/11/"/>
      <url>/2022/12/01/NOnote/11/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="数组初步"><a href="#数组初步" class="headerlink" title="数组初步"></a>数组初步</h1><h2 id="1-数组的定义"><a href="#1-数组的定义" class="headerlink" title="1.数组的定义"></a>1.数组的定义</h2><p>首先我们要了解应该如何去定义一个数组，我们可以通过以下这个形式来进行定义。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">类型 数组名 [元素个数]</span><br><span class="line"> <span class="type">int</span> a[<span class="number">6</span>];<span class="comment">//整形一个占4个字节</span></span><br><span class="line"><span class="type">char</span> b[<span class="number">24</span>];<span class="comment">//字符型一个占1个字节</span></span><br><span class="line"><span class="type">double</span> c[<span class="number">3</span>];<span class="comment">//浮点型一个占8个字节</span></span><br></pre></td></tr></table></figure><p><code>注：数组不能动态定义！</code></p><p>比如以下这个错误的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a ;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入字符个数:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="type">int</span> a[n];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于这串代码就是一个致命的错误，数组是不能进行动态定义的！！！</p><h2 id="2-数组元素的访问"><a href="#2-数组元素的访问" class="headerlink" title="2.数组元素的访问"></a>2.数组元素的访问</h2><p>当我们定义了一个数组之后，我们肯定是要对数组的元素进行访问的。</p><p>那么我们应该如何才能访问数组的元素呢？</p><p>我们可以通过以下的形式来进行访问数组里面的元素。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">数组名[下标]</span><br><span class="line">    a[<span class="number">0</span>];<span class="comment">//访问数组的第一个元素</span></span><br><span class="line">    b[<span class="number">1</span>];<span class="comment">//访问数组的第二个元素</span></span><br><span class="line">    c[<span class="number">5</span>];<span class="comment">//访问数组的第三个元素</span></span><br></pre></td></tr></table></figure><p>对于以上的形式，我们还有几个必须注意的点</p><p>我们先通过int a[5]来进行定义一个数组之后通常要注意以下两点</p><p><code>注：</code></p><ol><li><p>a[0]；访问第一个元素的下标但是0，而不是1</p></li><li><p>a[5] ;  会报错，因为访问第五个元素的下标是4</p></li></ol><h2 id="3-循环和数组的关系"><a href="#3-循环和数组的关系" class="headerlink" title="3.循环和数组的关系"></a>3.循环和数组的关系</h2><p>首先我们根据一个问题来进行分析循环和数组的关系</p><p>我们在通常实行一个执行10次的循环，我们通常是这么写；</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而不是这样写</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i=;i&lt;=<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是为什么呢？</p><p>这就素因为循环和数组是由有关系的！</p><p>因为我们常常需要使用循环来进行访问数组。</p><p>比如以下的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">10</span>]；</span><br><span class="line">   <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i=i+<span class="number">1</span>) </span><br><span class="line">   &#123;</span><br><span class="line">       a[i]= i;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>我们以下通过一个例子来理解吧！</p><p><em><strong>请尝试用数组存放班里10位同学的数学成绩，并计算出平均值</strong></em>。</p><p>对于以上这个问题，我们应该如何用代码来进行实现呢？<br>请看以下的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NUM 10</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> arr [NUM];</span><br><span class="line">    <span class="keyword">for</span> (a = <span class="number">0</span>; a &lt; <span class="number">10</span>; a = a + <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入第%d位同学的成绩: &quot;</span>, a + <span class="number">1</span>);<span class="comment">//可以输入%d或者%i</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;arr[a]);</span><br><span class="line">        sum = sum + arr[a];<span class="comment">//也可以输入sum+=arr[a]//+=(例如：a+=b等价于a=a+b)</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;成绩录入完毕，这次考试的平均成绩为:%.2f\n&quot;</span>, (<span class="type">double</span>)sum / NUM);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于%d和%i请参考文章<a href="https://blog.csdn.net/cxsjabcabc/article/details/107294745?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-107294745-blog-125890911.pc_relevant_multi_platform_whitelistv4&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-107294745-blog-125890911.pc_relevant_multi_platform_whitelistv4&utm_relevant_index=1">(15条消息) %d %i的区别(你想知道的C语言 2.3)_一丝晨光的博客-CSDN博客_c语言%i是什么</a></p><p>但是就上请注意一个关键：<code>%d和%i在printf里面输入无差别，而在scanf里面则可以用八进制以及十六进制数来进行输入</code></p><p>以上的输出结果如下图所示，我们进行随便写几个成绩。</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221130132622790.png" alt="image-20221130132622790"></p><h2 id="4-数组的初始化"><a href="#4-数组的初始化" class="headerlink" title="4.数组的初始化"></a>4.数组的初始化</h2><h3 id="①定义"><a href="#①定义" class="headerlink" title="①定义"></a>①定义</h3><p>当我们在给<code>一个数组定义的同时在给它进行赋值</code>，我们称它为数组的初始化。</p><p>以下将举出几个例子来进行理解下数组的初始化</p><p>1.将数组的所有元素初始化为0，我们可以这样写。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;<span class="comment">//事实上仅仅只是将第一个元素赋值为0</span></span><br></pre></td></tr></table></figure><p>2.如果是赋予不同的值，那么用逗号进行隔开即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">10</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span>&#125;;</span><br></pre></td></tr></table></figure><p>3.还可以只给其中一部分元素进行赋值，其他赋值的元素自动初始化为0；</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">10</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;<span class="comment">//表示前面6给元素被赋值，后面四个元素初始化为0</span></span><br></pre></td></tr></table></figure><p>对于上面的三个例子我们分别用代码进行实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="type">int</span> a[<span class="number">10</span>] = &#123;...&#125;;<span class="comment">//此处可以根据上面进行替换。</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i=i+<span class="number">1</span>)<span class="comment">//利用for循环将数组内的每一个元素都打印出来</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下分别对应1.2.3的输出结果</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221130132952333.png" alt="image-20221130132952333"></p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221130133013906.png" alt="image-20221130133013906"></p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221130133035815.png" alt="image-20221130133035815"></p><h3 id="②其他形式"><a href="#②其他形式" class="headerlink" title="②其他形式"></a>②其他形式</h3><p>1.其实有时候对于以上的几个形式中，在定义数组后面的[]可以偷懒不写，比如写成以下形式。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span>&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到以上的形式中，{}内有10个元素，[]内并未写出数组内元素的数量。</p><p><code>因为编译器会根据值的个数自动判断数组的长度</code></p><p>2.其次C99还增加了一个<code>新的特性</code>，<code>可以给数组的指定的元素进行赋值，而未被赋值的元素自动初始化为0</code>。比如以下的例子。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">5</span>] = &#123;[<span class="number">0</span>]=<span class="number">1</span>,[<span class="number">1</span>]=<span class="number">1</span>,[<span class="number">2</span>]=<span class="number">4</span>,[<span class="number">3</span>]=<span class="number">5</span>,[<span class="number">4</span>]=<span class="number">1</span>,[<span class="number">5</span>]=<span class="number">4</span>&#125;;</span><br></pre></td></tr></table></figure><p>对于以上这种情况在vscode以及vs2019都将会报错，报错内容为下。</p><p><strong>vscode</strong></p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221130191329783.png" alt="image-20221130191329783"></p><p><strong>vs2019</strong></p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221130191538588.png" alt="image-20221130191538588"></p><p><code>由此可见，在c语言中，数组内的元素并不能全部进行赋值，只能小于数组的总元素。</code></p>]]></content>
      
      
      <categories>
          
          <category> c语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三大循环语句</title>
      <link href="/2022/11/24/NOnote/10/"/>
      <url>/2022/11/24/NOnote/10/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="三大循环语句"><a href="#三大循环语句" class="headerlink" title="三大循环语句"></a>三大循环语句</h1><h2 id="1-while语句"><a href="#1-while语句" class="headerlink" title="1.while语句"></a>1.while语句</h2><h3 id="①形式"><a href="#①形式" class="headerlink" title="①形式"></a>①形式</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (表达式) <span class="comment">//循环体</span></span><br><span class="line">&#123;</span><br><span class="line">  语句序列</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="②功能流程图"><a href="#②功能流程图" class="headerlink" title="②功能流程图"></a>②功能流程图</h3><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221122231042964.png" alt="image-20221122231042964"></p><hr><p><code>注：其实while语句的工作原理是先判断表达式的内容是否为真，再进行实行while语句里面的内容，与后面的dowhile恰好相反</code></p><h3 id="③例子1"><a href="#③例子1" class="headerlink" title="③例子1"></a>③例子1</h3><p>以下用一个题目来进行理解循环语句中的while语句</p><p><em><strong>用while语句计算1+2+3…+100的结果</strong></em></p><p>对于上面的问题，我们应该如何进行实现呢？</p><p><strong>分析</strong>：</p><p>1.首先我们需要定义两个变量，一个是需要连续参与这个流程的a，和一个最终结果的sum。</p><p><code>注：a要从1开始，所以要定义a = 1，sum一开始为0，所以要定义sum = 0</code></p><p>2.我们要在while语句里面的表达式将a的范围给定义到a≤100，这样a一直循环下去到a=100之后就结束了流程</p><p>3.最后在语句序列中实现让a每经过一次循环都+1,则需要 a = a+1 进行实现,如果要实现sum为a一次一次累加的结果,则需要 sum = sum + a进行实现,</p><p><code>注:一定要先定义 sum = sum + a这个表达式,不然会导致a第一次被赋值为了2才参与sum这个表达式中,导致a是从2开始一直加到101</code></p><p>我们先展示第二个注意的错误代码</p><h4 id="1-错误演示"><a href="#1-错误演示" class="headerlink" title="(1)错误演示"></a>(1)错误演示</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a=<span class="number">1</span>, sum = <span class="number">0</span> ;</span><br><span class="line"><span class="keyword">while</span> (a&lt;=<span class="number">100</span>)</span><br><span class="line">&#123;</span><br><span class="line">a = a + <span class="number">1</span> ;</span><br><span class="line">sum = sum + a ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span> (<span class="string">&quot;%d\n&quot;</span>,sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//以上代码表示的是sum= 2+3+4...+101</span></span><br></pre></td></tr></table></figure><p>最后输出的结果是</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221122232914776.png" alt="image-20221122232914776"></p><h4 id="2-正确演示"><a href="#2-正确演示" class="headerlink" title="(2)正确演示"></a>(2)正确演示</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a=<span class="number">1</span>, sum = <span class="number">0</span> ;</span><br><span class="line"><span class="keyword">while</span> (a&lt;=<span class="number">100</span>)</span><br><span class="line">&#123;</span><br><span class="line">sum = sum + a ;</span><br><span class="line">a = a + <span class="number">1</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span> (<span class="string">&quot;%d\n&quot;</span>,sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//以上代码表示的是sum= 1+2+3...+100</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a=<span class="number">1</span>, sum = <span class="number">0</span> ;</span><br><span class="line"><span class="keyword">while</span> (a&lt;=<span class="number">100</span>)</span><br><span class="line">&#123;</span><br><span class="line">sum = sum + a ;</span><br><span class="line">a = a++ ;<span class="comment">//本人试过 a = ++a;也是符合情况</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span> (<span class="string">&quot;%d\n&quot;</span>,sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//以上代码表示的是sum= 1+2+3...+100</span></span><br></pre></td></tr></table></figure><p>对于上面的输出结果才是正确的，如下所示</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221122233843487.png" alt="image-20221122233843487"></p><h3 id="③例子2"><a href="#③例子2" class="headerlink" title="③例子2"></a>③例子2</h3><p>我们再来第二个例子来理解while语句</p><p><em><strong>用while语句统计键盘输入一串英文句子的字符数量。</strong></em></p><p>对于这个问题，我们又该如何去实现它呢？</p><p><strong>分析：</strong></p><p>1.首先一样要定义出一个变量sum来统计输入字符的数量，一样定义sum = 0，而且要引入getchar语句，<code>getchar语句的作用是从标准输入流中读取下一个字符</code>。</p><p>2.然后我们需要用回车键来表示英文句子的结束，即为循环语句while结束。</p><p>3.最后我们需要在语句序列中定义表达式sum = sum+1 ；来进行表示我们每当输入一个字符之后while语句里面的sum就+1。</p><p>下面来展示这个问题的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span> ;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入一串英文句子:&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (getchar() != <span class="string">&#x27;\n&#x27;</span>)<span class="comment">//getchar的作用是从标准输入流中读取下一个字符，在这里也充当了类似scanf的作用。</span></span><br><span class="line"><span class="comment">//而这个getchar语句代表的意思是如果输入的字符不是换行符（回车）的话，就继续循环下去。</span></span><br><span class="line">&#123;</span><br><span class="line">sum = sum + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;你一共输入了%d个字符\n&quot;</span>, sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来输入Hello World！来统计这串英语句子的数目吧！</p><p>以下为输出结果</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221123000722373.png" alt="image-20221123000722373"></p><p>一共包括空格还有英文字母以及标点符号一共为12个字符。</p><h2 id="2-dowhile语句"><a href="#2-dowhile语句" class="headerlink" title="2.dowhile语句"></a>2.dowhile语句</h2><h3 id="①形式-1"><a href="#①形式-1" class="headerlink" title="①形式"></a>①形式</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">语句序列</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(表达式)</span><br></pre></td></tr></table></figure><h3 id="②功能流程图-1"><a href="#②功能流程图-1" class="headerlink" title="②功能流程图"></a>②功能流程图</h3><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221123001654479.png" alt="image-20221123001654479"></p><p><code>注：dowhile语句工作原理是先进行实行语句里面的内容，再判断表达式是否为真。与上面while语句刚刚好相反</code></p><h3 id="③例子"><a href="#③例子" class="headerlink" title="③例子"></a>③例子</h3><p>这个语句的好处就在于我们现实生活中输入QQ密码，我们一般都是先实现QQ密码的内容，再进行判断QQ密码是否正确，即是否为真。</p><p>我们还是用一个问题然后以一串代码来进行演示下dowhile的功能吧！</p><p><em><strong>如何用dowhile实现将a=10减到a=0 ？</strong></em></p><p>对于以上问题，如何用dowhile进行实现呢？</p><p>其实很简单。</p><p>1.首先一样先定义变量a，使其的初始值a=10。</p><p>2.然后再语句序列中输入 a = a-1 或者 a=a– 或者 a=–a。</p><p>3.最后在while语句中的表达式定义a&gt;=0即可！</p><p><code>注：注意while语句后面的” ; “！！！！</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span>  a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a=%d\n&quot;</span>,a);</span><br><span class="line">a = a - <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">while</span> (a &gt;= <span class="number">0</span>);<span class="comment">//一定要注意; !!!!!</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下为输出结果</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221123003128929.png" alt="image-20221123003128929"></p><h3 id="④总结"><a href="#④总结" class="headerlink" title="④总结"></a>④总结</h3><p>对于上述两个循环语句，其实我们可以从循环入口来进行分类，<code>while语句它的条件判断位置在循环的入口处</code>，所以我们把它称为<code>入口条件循环</code>，而<code>dowhile语句它的条件判断位置在循环的出口处</code>，因此我们把它称为<code>出口条件循环</code>，也正因为它是出口条件循环，循环体在前面，所以<code>dowhile语句的循环体至少会被执行一次</code>。</p><h2 id="3-for语句"><a href="#3-for语句" class="headerlink" title="3.for语句"></a>3.for语句</h2><h3 id="①前言"><a href="#①前言" class="headerlink" title="①前言"></a>①前言</h3><p>对于我们以上学习了两个循环语句之后，我们不难发现，基本上每个循环的基本结构都离不开<code>三个基本的动作</code>，它们分别是<code>初始化计数器、循环条件、更新计数器</code>。其实对于之前的while语句中，我们可以发现到当我们执行这些动作的时候，这些动作是分散在整个循环体的不同部分的，例如先进行a+1，然后再进行sum+a的操作这种。会让我们产生了一种错乱感，生怕哪一步出错。那有没有一种魔法将它们集中在一块进行实现呢？这样我们就可以对后期修改和调试方便许多了，此时我们就不得不提起强大的for语句了。</p><h3 id="②形式"><a href="#②形式" class="headerlink" title="②形式"></a>②形式</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(表达式<span class="number">1</span><span class="comment">/*初始化计数器*/</span> ；表达式<span class="number">2</span><span class="comment">/*循环条件*/</span> ； 表达式<span class="number">3</span><span class="comment">/*更新计数器*/</span>)<span class="comment">//注意三个表达式要用分号进行隔开！！！</span></span><br><span class="line">&#123;</span><br><span class="line">  语句序列</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>注：三个表达式的分类</code></p><p><code>1.表达式1为循环初始化表达式</code></p><p><code>2.表达式2为循环条件表达式</code></p><p><code>3.表达式3为循环调整表达式</code></p><h3 id="③功能流程图"><a href="#③功能流程图" class="headerlink" title="③功能流程图"></a>③功能流程图</h3><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221123173018062.png" alt="image-20221123173018062"></p><h3 id="④例子"><a href="#④例子" class="headerlink" title="④例子"></a>④例子</h3><p>对于for语句，我们先来试试用其来实现以上用while语句解决的问题吧！</p><p>问题如下</p><p><em><strong>用for语句计算1+2+3…+100的结果</strong></em></p><p>那么对于这个问题我们用for语句应该怎么进行实现呢？</p><p><strong>分析：</strong><br>1.首先我们在for语句外先定义参与运算的变量a和变量sum，分别表示每次参与求和的每一次循环+1的a，以及最终的结果sum。并且在表达式1中定义a和sum的起始值分别为1和0。</p><p>2.然后在表达式2给a的范围定义到a&lt;=100，来保证a一直循环到a=100的时候结束循环。</p><p>3.最后在表达式3中定义sum = sum + a和 a = a + 1的表达式来保证每次循环a参与sum表达式的运算，且a在每次经过一次sum表达式运算之后再+1，<code>一样要注意sum和a表达式的先后顺序</code>！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">int</span> sum;</span><br><span class="line"><span class="keyword">for</span> (a = <span class="number">1</span>, sum = <span class="number">0</span>; a &lt;= <span class="number">100</span>; sum = sum + a, a = a + <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sum=%d\n&quot;</span>, sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据分析，我们输入了以上的代码，但是这个代码真的没有问题吗？我们来看看它的输出结果吧！</p><p>以下为输出结果。</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221123171424944.png" alt="image-20221123171424944"></p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221123171243172.png" alt="image-20221123171243172"></p><p>我们发现这个代码输出的结果很让人不舒服，而且还有一点就是最后它输出的结果是sum=4950！这是为什么呢？对于这两个问题，我们先解决第一给问题，就是如何让这个输出结果舒服点吧！</p><p><strong>问题①分析</strong></p><p>我们清楚，就是循环语句里面的循环体当a满足&lt;=100时就执行里面的内容，所以在循环体内的printf函数在a循环的100次中一共打印了100次！</p><p><strong>问题①解决</strong></p><p>如何将以上问题进行解决呢？对此其实很简单，我们只要把<code>位于循环体内的printf函数移出来</code>不就可以了么！的确是这个道理，那我们对这个解决方案进行实现吧！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">int</span> sum;</span><br><span class="line"><span class="keyword">for</span> (a = <span class="number">1</span>, sum = <span class="number">0</span>; a &lt;= <span class="number">100</span>; sum = sum + a, a = a + <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sum=%d\n&quot;</span>, sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于以上代码的输出结果是否会如意呢？让我们来看看输出的结果吧！</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221123172143883.png" alt="image-20221123172143883"></p><p>我们发现这个结果不仅解决了问题①而且还解决了问题②！最后的输出结果确实是sum=5050，这是为什么呢？这就需要我们来深入了解下for语句的流程了。</p><p>我们根据上面的流程图发现，<code>表达式3的内容是最后执行</code>的，所以当程序执行到了第99次之后，sum此时的值以及变成了4950，但是在第100次的时候因为提前执行了循环体的内容，所以打印的结果此时是sum=4950，而后面才执行表达式3的内容使得sum=5050。而因为printf在for语句外，所以并没有受到影响，成功的打印出来了sum=5050的结果！</p><h3 id="⑤练习"><a href="#⑤练习" class="headerlink" title="⑤练习"></a>⑤练习</h3><p>for语句的强大之处可不止以上的例子，下面我们用一个问题来展示for语句强大的一点。</p><p><em><strong>写一个程序：判断一个数是否为素数</strong></em></p><p><em><strong>-素数指在大于1的自然数中，除了1和它本身以外不再有其他因数。</strong></em></p><p>对于以上问题，我们究竟又该怎么进行分析呢？</p><p><strong>分析：</strong></p><p>1.首先定义变量a，num，b。num为我们自己赋值是变量，变量<u><code>a用来当作判断num是否为素数的依据</code></u>，而<code>b用来充当逻辑值的作用</code>。</p><p>2.然后将a从2开始，使得满足a&lt;num，让a从2一直循环到a=num-1结束，看能否使得num被整除。而b我们在for语句外定义为b=1，如果for循环语句内的if语句num除以a满足了被整除，这次num不是素数就使得b的值变为0</p><p>3.<code>最后循环过后用if语句来进行判断b的值</code>为0还是1，如果是0则代表num这个数不是素数，如果是1则代表num这个数是素数。</p><p>以上分析过程得到的代码如下所示</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a, num, b = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入一个整数：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line"><span class="keyword">for</span> (a = <span class="number">2</span>; a &lt; num; a = a + <span class="number">1</span>)<span class="comment">//a从2开始，每经过一次循环之后+1，一直到a=num-1结束。来看num能否被整除。</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (num % a == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">b = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//上面的if语句表示num➗a之后被整除使得b的值改变为0后面b的值就一直为0了</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (b == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;很遗憾%d不是素数\n&quot;</span>, num);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d是一个素数！\n&quot;</span>,num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//以上就是用b充当逻辑值来判断num是否为素数。</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们随便测试几个值来看是否满足判断的标准，就用11，45，14，114514来进行判断吧！</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221123225358899.png" alt="image-20221123225358899"></p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221123225445955.png" alt="image-20221123225445955"></p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221123225516045.png" alt="image-20221123225516045"></p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221123225536371.png" alt="image-20221123225536371"></p><p>可以看到，对于以上的判断都是正确的，说明以上的想法是可行的！由此可见，循环语句在C语言里面是多么的强大。</p><h3 id="⑤for语句的灵活性"><a href="#⑤for语句的灵活性" class="headerlink" title="⑤for语句的灵活性"></a>⑤for语句的灵活性</h3><p>其实对于for语句，我们的表达式并不是那么固定，for语句的三个表达式可以进行省略，<code>不过分号不能省略</code>！但是<code>最重要的一个省略方式为for（；；）</code>。为什么说这个最重要了其实这个形式就<code>好比while语句中的while（1）</code>，没错，这个就是一个死循环！括号内的永远都为真。</p><h2 id="4-循环嵌套"><a href="#4-循环嵌套" class="headerlink" title="4.循环嵌套"></a>4.循环嵌套</h2><p>对于循环嵌套我们就用一个问题来进行理解吧！</p><p><em><strong>用循环语句打印出来一个九九乘法表</strong></em></p><p>对于以上这个问题，我们又应该怎么进行解决呢？</p><p>其实这个问题就是要用到循环语句的嵌套，根据for语句循环的流程，我们可以对此进行分析下。</p><p><strong>分析</strong>：<br>1.我们知道for语句中的表达式三是最后实现的，这样的话首先我们先定义变量a，b，result。<code>a和b分别代表九九乘法表中两个相乘的数，而result即是a*b所得到的值</code>。</p><p>2然后我们再定义a和b的值分别为1，并且在外层循环的a进行每一次循环+1，在内层循环的b每次和a进行循环结束之后也一样+1，根据九九乘法表的格式我们不难发现，每一行的式子个数都由第一个乘数，也就是我们所定义的a决定的，<code>简单理解就是a的数决定了内层循环的次数。</code>这样我们就要在b相关的循环语句for中的表达式2定义b&lt;=a时候，这样当b&gt;a的时候循环也就结束了。</p><p>3.最后在内层函数的循环体内定义一个printf函数来进行打印相关的结果即可</p><p>对于以上分析的代码如下所示</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a, b, num;</span><br><span class="line"><span class="keyword">for</span> (a = <span class="number">1</span>; a &lt;= <span class="number">9</span>; a = a + <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (b = <span class="number">1</span>; b &lt;= a; b = b + <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">num = a * b;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%dX%d=%d &quot;</span>, a, b, num);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们将他进行运行，输出结果如下</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221124000932139.png" alt="image-20221124000932139"></p><p>我们发现以上的结果确实是实现了九九乘法表的所有表达式，但是不美观，那我们应该怎么做才能让它变的美观点呢？这我们就要用到<code>putchar</code>函数来进行实现了！</p><p>以下是利用了putchar修改过后的结果</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a, b, num;</span><br><span class="line"><span class="keyword">for</span> (a = <span class="number">1</span>; a &lt;= <span class="number">9</span>; a = a + <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (b = <span class="number">1</span>; b &lt;= a; b = b + <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">num = a * b;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%dX%d=%d &quot;</span>, a, b, num);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);<span class="comment">//putchar() 向终端输出一个转义字符，使其换行</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下为输出结果</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221124000910514.png" alt="image-20221124000910514"></p>]]></content>
      
      
      <categories>
          
          <category> c语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运算符</title>
      <link href="/2022/11/17/NOnote/4/"/>
      <url>/2022/11/17/NOnote/4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="1算数运算符"><a href="#1算数运算符" class="headerlink" title="1算数运算符"></a>1算数运算符</h2><h3 id="①基本运算符"><a href="#①基本运算符" class="headerlink" title="①基本运算符"></a>①基本运算符</h3><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221115232423272.png" alt="image-20221115232423272"></p><p><strong>注：除法的第一个５／３后面的结果是直接舍弃了小数，而５．０／３．０保留了小数。即为整数／整数＝整数，浮点数／浮点数＝浮点数。还有求余运算符必须是两个整数，除此之外，我们能看上表有相关双目和单目的内容，那么，我们应该怎么判断单目还有双目呢？</strong></p><h3 id="②目"><a href="#②目" class="headerlink" title="②目"></a>②目</h3><h4 id="（1）分类"><a href="#（1）分类" class="headerlink" title="（1）分类"></a>（1）分类</h4><p><strong>1.单目运算符</strong>：如正、负号，逻辑运算符</p><p><strong>2.双目运算符</strong>：算术运算符、关系运算符</p><p><strong>3.三目运算符</strong>：条件运算符</p><h4 id="（2）判断方法"><a href="#（2）判断方法" class="headerlink" title="（2）判断方法"></a>（2）判断方法</h4><p>如以下的例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>+<span class="number">2</span><span class="comment">//操作符+运算符+操作数//双目</span></span><br><span class="line"> +<span class="number">5</span><span class="comment">//运算符+操作数//单目</span></span><br></pre></td></tr></table></figure><p>根据以上的例子我们可以得知<code>，判断为双目还是单目取决于操作数的数量</code></p><h3 id="③表达式"><a href="#③表达式" class="headerlink" title="③表达式"></a>③表达式</h3><p>用运算符和括号将操作数连接起来的式子，我们称之为表达式。如下面例子所示</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>+<span class="number">1</span></span><br><span class="line"><span class="string">&#x27;a&#x27;</span>+<span class="string">&#x27;b&#x27;</span></span><br><span class="line">a+b</span><br><span class="line">a+<span class="string">&#x27;b&#x27;</span>+<span class="built_in">pow</span>(a,b)*<span class="number">3</span>/<span class="number">4</span>+<span class="number">5</span></span><br></pre></td></tr></table></figure><h3 id="④运算符的优先级和结合性"><a href="#④运算符的优先级和结合性" class="headerlink" title="④运算符的优先级和结合性"></a>④运算符的优先级和结合性</h3><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221115234543096.png" alt="image-20221115234543096"></p><p>下面用一串代码来说明下运算符的优先级</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span><span class="comment">//使得pow函数实现，所以必须引出</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a, b, c;</span><br><span class="line">a=<span class="number">1</span>+<span class="number">2</span>;</span><br><span class="line">b=<span class="number">1</span>+<span class="number">2</span>*<span class="number">3</span>;</span><br><span class="line">c=a+b+<span class="number">-1</span>+<span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">3</span>);<span class="comment">//pow函数的作用就是给括号内的数字幂指数，pow（底数，幂指数），本复杂运算的数学表达是a+b+（-1）+2^3</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a=%d\nb=%d\nc=%d\n&quot;</span>,a,b,c);    </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后的打印结果如下</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221116000955540.png" alt="image-20221116000955540"></p><h3 id="⑤类型转换"><a href="#⑤类型转换" class="headerlink" title="⑤类型转换"></a>⑤类型转换</h3><p>当一个运算符的几个操作数类型不同的时候，会发生什么呢？比如以下例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>+<span class="number">2.0</span>=？<span class="comment">//最后结果将是什么数据类型呢？</span></span><br><span class="line"> <span class="number">1</span>+<span class="number">2.0</span>`<span class="number">1.0</span>+<span class="number">2.0</span>=<span class="number">3.0</span><span class="comment">//最后答案为浮点型，这又是为什么呢？</span></span><br></pre></td></tr></table></figure><p>通常情况下，<code>编译器会将占用内存较小的那个操作数先转换为占用内存较大的操作数</code>的数据类型，然后再进行运算。这样做的<code>目的是为了确保计算的精度</code>。如果是把浮点型转换为整形的话如1.2+1这样的表达式，按照这种运算会直接把小数给舍弃就变成了1，那么它的结果变成了1+1=2了。以下用一串代码来进行理解。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;整形输出：%d\n&quot;</span>,<span class="number">1</span>+<span class="number">2.0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;浮点型输出：%f\n&quot;</span>,<span class="number">1</span>+<span class="number">2.0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下为打印结果</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221116001334769.png" alt="image-20221116001334769"></p><p>如果强制使它输入整形的结果贼会出现一个错误的答案，可是程序员是活的，我们可不可以用个办法强制让它输出的结果为整形呢？我们来看以下的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;整形输出：%d\n&quot;</span>, <span class="number">1</span> + (<span class="type">int</span>)<span class="number">1.8</span>);<span class="comment">//数字前面加个（数据类型）可以进行强制的转换</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下为打印出来的结果</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221116002434617.png" alt="image-20221116002434617"></p><p>很明显，我们强制把1.8转换为整形之后损失了精度，直接少了0.8。</p><h2 id="2-关系运算符"><a href="#2-关系运算符" class="headerlink" title="2.关系运算符"></a>2.关系运算符</h2><h3 id="①分支结构"><a href="#①分支结构" class="headerlink" title="①分支结构"></a>①分支结构</h3><h4 id="（1）功能"><a href="#（1）功能" class="headerlink" title="（1）功能"></a>（1）功能</h4><p><code>对程序进行判断和抉择</code>，比如判断用户是否为18岁以及用户是否为男性或者女性等等….这种相关的设计我们称为分支结构设计。</p><h3 id="②六大关系运算符"><a href="#②六大关系运算符" class="headerlink" title="②六大关系运算符"></a>②六大关系运算符</h3><p>利用关系运算符来比较两个数的大小关系：</p><table><thead><tr><th align="center">优先级相同（高）</th><th align="center">优先级相同（低）</th></tr></thead><tbody><tr><td align="center">&lt;（小于）</td><td align="center">`（等于）</td></tr><tr><td align="center">&lt;=（小于或等于）</td><td align="center">！=（不等于）</td></tr><tr><td align="center">&gt;（大于）</td><td align="center"></td></tr><tr><td align="center">&gt;=(大于或等于)</td><td align="center"></td></tr></tbody></table><h3 id="③关系表达式"><a href="#③关系表达式" class="headerlink" title="③关系表达式"></a>③关系表达式</h3><h4 id="（1）定义"><a href="#（1）定义" class="headerlink" title="（1）定义"></a>（1）定义</h4><p><code>用关系运算符将两边的变量、数据或表达式连接起来，称之为关系表达式。</code></p><h4 id="（2）逻辑值"><a href="#（2）逻辑值" class="headerlink" title="（2）逻辑值"></a>（2）逻辑值</h4><p>而在关系表达式中得到的值是一个<code>逻辑值</code>，即真或假，在c语言的逻辑运算中，<code>用数字1表示真，数字0表示假</code>。</p><p>比如以下的例子。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>&lt;<span class="number">2</span><span class="comment">//该关系式为真，所以该关系式的值为1</span></span><br><span class="line">a&gt;b</span><br><span class="line">a&lt;=<span class="number">1</span>+b</span><br><span class="line"><span class="string">&#x27;a&#x27;</span>+<span class="string">&#x27;b&#x27;</span>&lt;=<span class="string">&#x27;c&#x27;</span><span class="comment">//根据ASCII码表分别是97，98，99，即为97+98&lt;=99，所以该关系式为假，关系式的值为0</span></span><br><span class="line">(a=<span class="number">3</span>)&gt;(b=<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>我们用一串代码来进行理解逻辑值吧！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="number">1</span>&lt;<span class="number">2</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a&gt;b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a&lt;=b+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="string">&#x27;a&#x27;</span>+<span class="string">&#x27;b&#x27;</span>&lt;=<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,(a=<span class="number">3</span>)&gt;(b=<span class="number">5</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面为打印出来的结果</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221116170318778.png" alt="image-20221116170318778"></p><p>很明显我们可以看到，以上的结果只有1和0，对应的正是逻辑值的1和0来表达式子的真假。</p><h3 id="3-逻辑运算符"><a href="#3-逻辑运算符" class="headerlink" title="3.逻辑运算符"></a>3.逻辑运算符</h3><h4 id="①三大逻辑运算符"><a href="#①三大逻辑运算符" class="headerlink" title="①三大逻辑运算符"></a>①三大逻辑运算符</h4><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221116170909641.png" alt="image-20221116170909641"></p><h4 id="②逻辑表达式"><a href="#②逻辑表达式" class="headerlink" title="②逻辑表达式"></a>②逻辑表达式</h4><p>用逻辑运算符将两边的变量，数据或表达式连接起来，称之为逻辑表达式。如以下的例子。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> &gt; <span class="number">1</span> &amp;&amp; <span class="number">1</span> &lt; <span class="number">2</span></span><br><span class="line"><span class="number">3</span> + <span class="number">1</span> || <span class="number">2</span> ` <span class="number">0</span><span class="comment">//3+1！= 0所以为真</span></span><br><span class="line">! (a+b)</span><br><span class="line">! <span class="number">0</span> + <span class="number">1</span> &lt; <span class="number">1</span> || ! (<span class="number">3</span>+<span class="number">4</span>)</span><br><span class="line"><span class="string">&#x27;a&#x27;</span> - <span class="string">&#x27;b&#x27;</span> &amp;&amp; <span class="string">&#x27;c&#x27;</span></span><br></pre></td></tr></table></figure><p>一样，下面用一串代码来进行理解</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="type">int</span> a=<span class="number">5</span>, b=<span class="number">3</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="number">3</span> &gt; <span class="number">1</span> &amp;&amp; <span class="number">1</span> &lt; <span class="number">2</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="number">3</span> + <span class="number">1</span> || <span class="number">2</span> ` <span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,! (a+b));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,! <span class="number">0</span> + <span class="number">1</span> &lt; <span class="number">1</span> || ! (<span class="number">3</span>+<span class="number">4</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="string">&#x27;a&#x27;</span> - <span class="string">&#x27;b&#x27;</span> &amp;&amp; <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下图为打印出来的结果</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221116172218462.png" alt="image-20221116172218462"></p><h4 id="③短路求值"><a href="#③短路求值" class="headerlink" title="③短路求值"></a>③短路求值</h4><p><code>短路求值又称为最小化求值</code>，是一种逻辑运算符的求值策略。只有当第一个运算符的值无法确定逻辑运算的结果时，才对第二个运算数进行求值。</p><p><code>C语言对宇逻辑与逻辑或采用短路求值的方法</code>。</p><p>下面用一串代码来进行理解短路求值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a=<span class="number">2</span>,b=<span class="number">3</span>;</span><br><span class="line">(a=<span class="number">0</span>) &amp;&amp; (b=<span class="number">5</span>);<span class="comment">//逻辑与要求左边和右边同时成立，且因为对于第一个值可以知道a=0为假，则左边不成立，右边将不进行运算。所以5不会赋值给b而是保留了原来的3</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a=%d, b=%d\n&quot;</span>,a,b);</span><br><span class="line">(a=<span class="number">1</span>) || (b=<span class="number">5</span>);<span class="comment">//逻辑或要求左边和右边任何一边成立即可，且对于左边a=1，而1是真所以左边成立，右边将不进行运算。所以5不会赋值给b而是保留了原来的3</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a=%d, b=%d\n&quot;</span>,a,b);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下为打印结果</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221116173810752.png" alt="image-20221116173810752"></p>]]></content>
      
      
      <categories>
          
          <category> c语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>if语句</title>
      <link href="/2022/11/17/NOnote/6/"/>
      <url>/2022/11/17/NOnote/6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h1><h2 id="形式"><a href="#形式" class="headerlink" title="形式"></a>形式</h2><h3 id="①if语句形式（1）"><a href="#①if语句形式（1）" class="headerlink" title="①if语句形式（1）"></a>①if语句形式（1）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...<span class="comment">//其他语句</span></span><br><span class="line"><span class="keyword">if</span>(表达式)</span><br><span class="line">&#123;</span><br><span class="line">    ...<span class="comment">//逻辑值为所执行的语句，程序快</span></span><br><span class="line">&#125;</span><br><span class="line">...<span class="comment">//其他语句</span></span><br></pre></td></tr></table></figure><p>然后我们根据上面的形式用一串代码来进行演示一下吧！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">c<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;你今年多少岁呀?\n你的年龄:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a);</span><br><span class="line">        <span class="keyword">if</span> (a &gt;= <span class="number">18</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;恭喜你游戏没有未成年啦！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下为当输入值符合条件时候打印的结果</p><p><strong>符合条件</strong></p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221117005830327.png" alt="image-20221117005830327"></p><p><strong>不符合条件</strong></p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221117010718886.png" alt="image-20221117010718886"></p><p>我们发现没有任何结果就直接结束了</p><h3 id="②if语句形式（2）"><a href="#②if语句形式（2）" class="headerlink" title="②if语句形式（2）"></a>②if语句形式（2）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...<span class="comment">//其他语句</span></span><br><span class="line"><span class="keyword">if</span>(表达式)</span><br><span class="line">&#123;</span><br><span class="line">    ...<span class="comment">//逻辑值为所执行的语句，程序快</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    ...<span class="comment">//逻辑值为真所行的语句，程序快</span></span><br><span class="line">&#125;</span><br><span class="line">...<span class="comment">//其他语句</span></span><br></pre></td></tr></table></figure><p>然后我们根据上面的形式用一串代码来进行演示一下吧！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;你今年多少岁呀?\n你的年龄:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a);</span><br><span class="line">        <span class="keyword">if</span> (a &gt;= <span class="number">18</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;恭喜你游戏没有未成年啦！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;你个小屁孩，游戏都被未成年限制。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下为输入两个不同值打印的结果</p><p><strong>当a&gt;=18</strong></p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221117005830327.png" alt="image-20221117005830327"></p><p><strong>当a&lt;18</strong></p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221117005926232.png" alt="image-20221117005926232"></p><h3 id="③if语句形式（3）"><a href="#③if语句形式（3）" class="headerlink" title="③if语句形式（3）"></a>③if语句形式（3）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...<span class="comment">//其他语句</span></span><br><span class="line"><span class="keyword">if</span> (表达式<span class="number">1</span>)&#123; ...&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> （表达式<span class="number">2</span>） &#123; ...&#125;</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> （表达式n）&#123; ...&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;...&#125;</span><br><span class="line">...<span class="comment">//其他语句</span></span><br></pre></td></tr></table></figure><p>对于以上的形式，给出一个问题</p><p><em><strong>帮你们数学老师做一个按分数评级的程序；</strong></em></p><p><em><strong>-90分以上：A</strong></em></p><p><em><strong>-80~90分： B</strong></em></p><p><em><strong>-70~80分 ：C</strong></em></p><p><em><strong>-60~70分 ： D</strong></em></p><p><em><strong>-低于60分： E​</strong></em></p><p>如何通过上面的if语句形式完成这个问题了，其实就是对于不同的同学用if语句进行规定达到范围内分数的学生所能达的等级即可。 </p><p>代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入你的分数：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a);</span><br><span class="line"><span class="keyword">if</span>(a&gt;=<span class="number">90</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a&lt;<span class="number">90</span> &amp;&amp; a&gt;=<span class="number">80</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a&lt;<span class="number">80</span> &amp;&amp; a&gt;=<span class="number">70</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a&lt;<span class="number">70</span> &amp;&amp; a&gt;=<span class="number">60</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;D&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a&lt;<span class="number">60</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;E&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> c语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scanf函数</title>
      <link href="/2022/11/17/NOnote/7/"/>
      <url>/2022/11/17/NOnote/7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="scanf函数"><a href="#scanf函数" class="headerlink" title="scanf函数"></a>scanf函数</h1><h2 id="1-功能"><a href="#1-功能" class="headerlink" title="1.功能"></a>1.功能</h2><p>scanf ()是C语言中的一个输入函数，作用是<code>通过键盘给程序中的变量赋值</code>，可以按用户指定的格式从键盘上把数据输入到指定的变量之中；基本语法格式为“scanf (“格式符”，输入参数)”。 scanf ()是C语言中的一个输入函数。</p><h2 id="2-格式"><a href="#2-格式" class="headerlink" title="2.格式"></a>2.格式</h2><h3 id="①格式一"><a href="#①格式一" class="headerlink" title="①格式一"></a>①格式一</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;输入控制符&quot;</span>, 输入参数);</span><br></pre></td></tr></table></figure><h4 id="（1）功能"><a href="#（1）功能" class="headerlink" title="（1）功能"></a>（1）功能</h4><p><code>将从键盘输入的字符转化为“输入控制符”所规定格式的数据，然后存入以输入参数的值为地址的变量中</code>。</p><p>下面用一串代码来举个例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line">a = <span class="number">114514</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>这串代码很简单，最后打印结果不用说都知道a=114514，但是对于这个值是不是已经固定为114514了，而不能是其他的值，很多时候我们希望这个值能够灵活一点，让它能够变成其他值，此时就要用到scanf函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a); <span class="comment">//&amp;a 表示变量 a 的地址，&amp;是取地址符</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于以上的代码需要清楚两点</p><p>1.“输入控制符”和“输出控制符”是一模一样的。比如一个整型数据，通过 printf 输出时用%d输出，通过 scanf 输入时同样是用%d。</p><p>2.&amp;是一个取地址运算符，&amp;后面加变量名表示“该变量的地址”，所以&amp;a就表示变量a地址。&amp;a又称为“取地址a”，就相当于将数据存入以变量 a 的地址为地址的变量中。</p><h4 id="（2）总结"><a href="#（2）总结" class="headerlink" title="（2）总结"></a>（2）总结</h4><p>scanf 语句的意思就是：从键盘上输入字符 1919810或者其他内容，%d将这几个字符转化成十进制数 1919810，最后通过“取地址 a”找到变量 a 的地址，再将数字 1919810 放到以变量 a 的地址为地址的变量中，即变量 a 中，所以最终的输出结果就是a=1919810，结果如下图。</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221117001331216.png" alt="image-20221117001331216"></p><h3 id="②格式二"><a href="#②格式二" class="headerlink" title="②格式二"></a>②格式二</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;输入控制符非输入控制符&quot;</span>, 输入参数);</span><br></pre></td></tr></table></figure><p>下面用一串代码来演示这个形式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;a = %d&quot;</span>, &amp;a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>在 printf 中，所有的“非输出控制符”都要原样输出。同样，<code>在 scanf 中，所有的“非输入控制符”都要原样输入。</code>所以在输入的时候a=必须要原样输入。比如要从键盘给变量 a 赋值 114514，那么必须要输入a=114514才正确，少一个都不行，否则就是错误，结果就是a=0</p><p>如下图所示</p><p><strong>错误的</strong></p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221117004017521.png" alt="image-20221117004017521"></p><p><strong>正确的</strong></p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221117004058287.png" alt="image-20221117004058287"></p><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h2><ol><li>在 scanf 的“输入参数”中，<code>变量前面的取地址符&amp;不要忘记</code>。</li><li>scanf 中双引号内，除了“输入控制符”外什么都不要写。</li><li>“输出控制符”和“输出参数”无论在“顺序上”还是在“个数上”一定要一一对应。</li><li>“输入控制符”的类型和变量所定义的类型一定要一致。对于从键盘输入的数据的类型，数据是用户输入的，程序员是无法决定的，所以在写程序时要考虑容错处理，这个稍后再讲。</li><li>使用 scanf 之前先用 printf 提示输入。</li></ol>]]></content>
      
      
      <categories>
          
          <category> c语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>switch语句和分支嵌套</title>
      <link href="/2022/11/17/NOnote/9/"/>
      <url>/2022/11/17/NOnote/9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="switch语句和分支嵌套"><a href="#switch语句和分支嵌套" class="headerlink" title="switch语句和分支嵌套"></a>switch语句和分支嵌套</h1><h2 id="1-switch语句"><a href="#1-switch语句" class="headerlink" title="1.switch语句"></a>1.switch语句</h2><h3 id="①形式"><a href="#①形式" class="headerlink" title="①形式"></a>①形式</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...<span class="comment">//其他语句</span></span><br><span class="line">    <span class="keyword">switch</span>（表达式）</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> 常量表达式<span class="number">1</span>:语句或程序块<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">case</span> 常量表达式<span class="number">2</span>:语句或程序块<span class="number">2</span>;</span><br><span class="line">        ......</span><br><span class="line">    <span class="keyword">case</span> 常量表达式n:语句或程序块n;</span><br><span class="line">    <span class="keyword">default</span>:语句或程序块n+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">...<span class="comment">//其他语句</span></span><br></pre></td></tr></table></figure><h3 id="②功能"><a href="#②功能" class="headerlink" title="②功能"></a>②功能</h3><p>用以下一个问题来进行理解这个语句的内容</p><p>如何才能实现用评级来知道大概分数？</p><p><em><strong>-90分以上：A</strong></em></p><p><em><strong>-80~90分： B</strong></em></p><p><em><strong>-70~80分 ：C</strong></em></p><p><em><strong>-60~70分 ： D</strong></em></p><p><em><strong>-低于60分： E​</strong></em></p><p>如果像通过自己的等级来知道在自己的分数的话，首先我们要清楚等级中的A,B,C,D,E都是跟字符有关的常量，所以用用char来定义一个字符变量。代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入你的等级:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;ch);</span><br><span class="line">    <span class="keyword">switch</span> (ch)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:<span class="built_in">printf</span>(<span class="string">&quot;你的成绩大概在90分以上\n&quot;</span>);</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;B&#x27;</span>:<span class="built_in">printf</span>(<span class="string">&quot;你的成绩大概在80~90分之间\n&quot;</span>);</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>:<span class="built_in">printf</span>(<span class="string">&quot;你的成绩大概在70~80分之间\n&quot;</span>);</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>:<span class="built_in">printf</span>(<span class="string">&quot;你的成绩大概在60~70分之间\n&quot;</span>);</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;E&#x27;</span>:<span class="built_in">printf</span>(<span class="string">&quot;你的成绩大概在60分以下\n&quot;</span>);</span><br><span class="line">    <span class="keyword">default</span>:<span class="built_in">printf</span>(<span class="string">&quot;请输入有效的等级！！！\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下图为我们随便输入一个有效等级所得到的结果</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221117073807955.png" alt="image-20221117073807955"></p><p> 我们发现输出的并非自己想要的结果，因为它将所有的内容都进行执行了，因为<code>switch语句是一直往下进行执行的！它不会帮你自动结束。</code>所以此时需要一个break语句将他自动结束，<code>break的作用是当代码跳转到指定位置的时候，它会自动帮你结束</code>。所以正确的代码如下所示。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入你的等级:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;ch);</span><br><span class="line">    <span class="keyword">switch</span> (ch)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:<span class="built_in">printf</span>(<span class="string">&quot;你的成绩大概在90分以上!\n&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;B&#x27;</span>:<span class="built_in">printf</span>(<span class="string">&quot;你的成绩大概在80~90分之间!\n&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>:<span class="built_in">printf</span>(<span class="string">&quot;你的成绩大概在70~80分之间!\n&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>:<span class="built_in">printf</span>(<span class="string">&quot;你的成绩大概在60~70分之间!\n&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;E&#x27;</span>:<span class="built_in">printf</span>(<span class="string">&quot;你的成绩大概在60分以下!\n&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:<span class="built_in">printf</span>(<span class="string">&quot;请输入有效的等级！！！\n&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过以上修改之后就可以实现对于指定等级能够输出指定的分数了，当我们继续输入B时候打印结果如下。</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221117074556350.png" alt="image-20221117074556350"></p><h2 id="2-分支结构的嵌套"><a href="#2-分支结构的嵌套" class="headerlink" title="2.分支结构的嵌套"></a>2.分支结构的嵌套</h2><h3 id="①形式-1"><a href="#①形式-1" class="headerlink" title="①形式"></a>①形式</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(表达式)</span><br><span class="line">   <span class="keyword">if</span>(表达式)</span><br><span class="line">   ...       </span><br><span class="line">   <span class="keyword">else</span>     </span><br><span class="line">   ...</span><br><span class="line"><span class="keyword">else</span>      </span><br><span class="line">  <span class="keyword">if</span>(表达式)</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h3 id="②应用"><a href="#②应用" class="headerlink" title="②应用"></a>②应用</h3><p>通过以下一个流程图，我们通过代码将他实现吧！</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221117080427205.png" alt="image-20221117080427205"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a , b;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入两个数:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line"><span class="keyword">if</span>(a!=b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&gt;b)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&gt;%d\n&quot;</span>,a,b);    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;%d&lt;%d\n&quot;</span>,a,b);   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;        <span class="built_in">printf</span>(<span class="string">&quot;%d=%d&quot;</span>,a,b);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过以上的代码即可完成以上流程图的流程 </p><h2 id="3-常见BUG"><a href="#3-常见BUG" class="headerlink" title="3.常见BUG"></a>3.常见BUG</h2><h3 id="①悬挂else"><a href="#①悬挂else" class="headerlink" title="①悬挂else"></a>①悬挂else</h3><p>对于这种类型的bug，我们用一个问题然后再用一串代码来进行演示一遍吧！</p><p><em><strong>如果你要邀请你的朋友出去玩，此时你不确定你的朋友是否有空，而且是否下雨，如果你的朋友有空的话，其他问题都没事，如果下雨的话记得要带伞，请用代码实现这些问题并进行解答</strong></em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> isRain,isFree;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;是否有空？(Y/N)&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span> (<span class="string">&quot;%c&quot;</span>,&amp;isFree);    </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;是否下雨？(Y/N)&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span> (<span class="string">&quot;%c&quot;</span>,&amp;isRain);</span><br><span class="line"><span class="keyword">if</span> (isFree ` <span class="string">&#x27;Y&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span>(isRain ` <span class="string">&#x27;Y&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span> (<span class="string">&quot;记得带伞哦！\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;下次一起去吧!T_T\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们对于这串代码的第一个问题是否有空回复为N看看会发生什么情况</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221117132737196.png" alt="image-20221117132737196"></p><p>不难发现，这个输出的结果把后面的printf内的结果甚至else内的结果也给打印出来了！这是为什么呢？</p><p>因为对于上面输入’Y’这个字符而言我们是否还输入了一个回车键，<code>其实回车也是一个字符</code>，所以第一个scanf函数接收到的字符是Y，第二个scanf函数接收到的字符是’回车’所以我们需要把回车给过滤掉！</p><p>正确的代码如下所示</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> isRain,isFree;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;是否有空？(Y/N)&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span> (<span class="string">&quot;%c&quot;</span>,&amp;isFree);    </span><br><span class="line">getchar();<span class="comment">//过滤回车这个字符</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;是否下雨？(Y/N)&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span> (<span class="string">&quot;%c&quot;</span>,&amp;isRain);</span><br><span class="line"><span class="keyword">if</span> (isFree ` <span class="string">&#x27;Y&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span>(isRain ` <span class="string">&#x27;Y&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span> (<span class="string">&quot;记得带伞哦！\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;下次一起去吧!T_T\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面就可以根据以上输入结果打印正确的值了</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221117133301628.png" alt="image-20221117133301628"></p><p>但是，这串代码还是有个问题的，究竟是什么问题呢？如果我们把第一个问题用Y同意，第二问题用N否定或怎么样呢？</p><p>下面为输出结果</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221117133425923.png" alt="image-20221117133425923"></p><p>既然回答了第一个问题有空，第二个未下雨，结果为什么输出的结果却还是否定了第一个问题呢？因为第一个问题是大前提，有空就一定可以出去了，第二个问题只是一个辅助提醒，结合现实生活我们如何将其用代码进行实现呢。简单来说就是把第一个问题当做主要问题来看待，<code>这就要用到我们经常用的”&#123;&#125;“来将它实现了，因为else始终与最接近它的if匹配</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> isRain,isFree;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;是否有空？(Y/N)&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span> (<span class="string">&quot;%c&quot;</span>,&amp;isFree);    </span><br><span class="line">getchar();<span class="comment">//过滤回车这个字符</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;是否下雨？(Y/N)&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span> (<span class="string">&quot;%c&quot;</span>,&amp;isRain);</span><br><span class="line"><span class="keyword">if</span> (isFree ` <span class="string">&#x27;Y&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(isRain ` <span class="string">&#x27;Y&#x27;</span>)</span><br><span class="line">&#123;<span class="built_in">printf</span> (<span class="string">&quot;记得带伞哦！\n&quot;</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;下次一起去吧!T_T\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面为此代码的输出结果</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221117134146268.png" alt="image-20221117134146268"></p><p>这样这个代码也就算是完成了！</p><h3 id="②等于号带来的大麻烦"><a href="#②等于号带来的大麻烦" class="headerlink" title="②等于号带来的大麻烦"></a>②等于号带来的大麻烦</h3><p>对于这种类型的bug，我们用一个问题然后再用一串代码来进行演示一遍吧！</p><p><strong><em>你和你的朋友在外面玩的很开心，而且此时你不知道你朋友是否口渴了，请用一串代码实现你朋友对上述问题的回答以及你的回答</em>，</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> Haskk;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;好哥们，你口渴了吗？(Y/N)&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;Haskk);</span><br><span class="line"><span class="keyword">if</span> (Haskk = <span class="string">&#x27;Y)</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">     printf(&quot;我刚刚好有d那我去买水了哈!\n&quot;)</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    else</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">      printf(&quot;好吧，我有点渴了，先去买瓶水了。\n&quot;)</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">return 0;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>对于以上代码说不定细心的人已经发现了其中的问题，就是在if语句括号内的表达式少了一个”=”号!这样会带来什么样的结果呢？我们来看下这串代码的输出结果吧！</p><p>我们将上述问题回复N</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221117140332567.png" alt="image-20221117140332567"></p><p>很奇怪的就是，我们明明输入的是N，打印出来的结果竟然是回复Y所应该出现的结果！</p><p>注：对于以上的问题我们发现这种类型的问题在编译器并没有报错，所以要格外小心，当工程量大的时候，代码多的时候就很难找出这种类似的问题。</p>]]></content>
      
      
      <categories>
          
          <category> c语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>变量</title>
      <link href="/2022/11/10/NOnote/2/"/>
      <url>/2022/11/10/NOnote/2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="1-意义"><a href="#1-意义" class="headerlink" title="1.意义"></a>1.意义</h2><p>变量的意义就是<code>明确目标并提供存放的空间。</code></p><h2 id="2-要求"><a href="#2-要求" class="headerlink" title="2.要求"></a>2.要求</h2><p>1.变量名只能是<code>英文字母(</code>A-a,a-Z)和<code>数字</code>(0-9)或者<code>下划线</code>(_)组成。</p><p>2.第一个字母必须是<code>字母或者下划线开头</code>。</p><p>3.变量名必须区分大小写,习惯以小写命名变量名,用大写字母来表示符号常量名。</p><p>4.不能使用<code>关键字</code>来进行给变量命名。</p><h2 id="3-关键字"><a href="#3-关键字" class="headerlink" title="3.关键字"></a>3.关键字</h2><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221108135335646.png" alt="image-20221108135335646"></p><h2 id="4-声明变量的语法"><a href="#4-声明变量的语法" class="headerlink" title="4.声明变量的语法"></a>4.声明变量的语法</h2><p>公式：数据类型+变量名</p><p>比如，我们举个例子，以下列内容来进行理解</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a<span class="comment">//int是整形，这个指a可以存放一个整形数据。</span></span><br><span class="line"><span class="type">char</span> b<span class="comment">//char是字符型，这个指b可以存放一个字节。</span></span><br><span class="line"><span class="type">float</span> c<span class="comment">//float是单精度浮点型。</span></span><br><span class="line"><span class="type">double</span> d<span class="comment">//double是双精度浮点型。</span></span><br></pre></td></tr></table></figure><p>下面我在继续以一串代码来理解上面这些内容</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">char</span> b;</span><br><span class="line"><span class="type">float</span> c;</span><br><span class="line"><span class="type">double</span> d;</span><br><span class="line">   a=<span class="number">114514</span>;</span><br><span class="line">   b=<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">c=<span class="number">3.14</span>;</span><br><span class="line">d=<span class="number">3.141592653</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a);<span class="comment">//%d表示输出十进制有符号的整数</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>,b);<span class="comment">//%c表述输出单个字符</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.2f\n&quot;</span>,c);<span class="comment">//%.2f表示精确到小数点后二位2,%f为浮点型。</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%11.9f\n&quot;</span>,d);<span class="comment">//%11.9f表示腾出十一位，精确到小数点后九位</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下为打印出来的结果</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221108142451763.png" alt="image-20221108142451763"></p>]]></content>
      
      
      <categories>
          
          <category> c语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常量和宏定义</title>
      <link href="/2022/11/10/NOnote/3/"/>
      <url>/2022/11/10/NOnote/3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="常量和宏定义"><a href="#常量和宏定义" class="headerlink" title="常量和宏定义"></a>常量和宏定义</h1><h2 id="1-常量"><a href="#1-常量" class="headerlink" title="1.常量"></a>1.常量</h2><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="(1) 定义"></a>(1) 定义</h3><p>在程序运行的过程中，它的值不能被改变我们称之为常量</p><h3 id="2-分类"><a href="#2-分类" class="headerlink" title="(2) 分类"></a>(2) 分类</h3><p>（1）整形常量：114514，1919810</p><p>（2）实型常量：3.1415，1.14514</p><p>（3）字符常量</p><p>1.普通字符：‘L’, ‘O’, ‘V’, ‘E’</p><p>2.转义字符：‘\n’, ‘/t’</p><p>（4）字符串常量:”LoveC”</p><p>（5）符号常量:使用之前必须先定义</p><h2 id="2-宏定义"><a href="#2-宏定义" class="headerlink" title="2.宏定义"></a>2.宏定义</h2><h3 id="1-格式"><a href="#1-格式" class="headerlink" title="(1) 格式"></a>(1) 格式</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> 标识符 常量<span class="comment">//define的功能就是将程序中所有出现的标识符把它替换为后面的常量</span></span></span><br></pre></td></tr></table></figure><h3 id="2-例子"><a href="#2-例子" class="headerlink" title="(2)例子"></a>(2)例子</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> URL <span class="string">&quot;https://gitee.com/luoxi-c&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NAME ”洛希“</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OLD 18</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s在%d开始学c语言，这是他的gitte网站%s&quot;</span>，NAME,OLD,URL);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下为输出的结果</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221108151637041.png" alt="image-20221108151637041"></p><h2 id="3-标识符"><a href="#3-标识符" class="headerlink" title="3.标识符"></a>3.标识符</h2><h3 id="1-要求"><a href="#1-要求" class="headerlink" title="(1)要求"></a>(1)要求</h3><p>1.标识符只能是<code>英文字母(</code>A-a,a-Z)和<code>数字</code>(0-9)或者<code>下划线</code>(_)组成。</p><p>2.第一个字母必须是<code>字母或者下划线开头</code>。</p><p>3.变量名必须区分大小写,习惯以小写命名变量名,用大写字母来表示符号常量名。</p><p>4.不能使用<code>关键字</code>来进行给变量命名。</p><p><strong><u>注：标识符的要求和变量的要求基本一样</u></strong></p><h2 id="4-字符串常量"><a href="#4-字符串常量" class="headerlink" title="4.字符串常量"></a>4.字符串常量</h2><h3 id="1-字符"><a href="#1-字符" class="headerlink" title="(1) 字符"></a>(1) 字符</h3><p>‘L’ , ‘O’ , ‘V’ , ‘E’ (需要四个字节来存放)</p><h3 id="2-字符串"><a href="#2-字符串" class="headerlink" title="(2) 字符串"></a>(2) 字符串</h3><p>”LOVE”</p><!--'L' , 'O' , 'V' , 'E'-->(需要四个字节来存放)<p>“LOVE YOU”</p><!--'L' , 'O' , 'V' , 'E' '' 'Y' 'O' 'U'-->（需要八个字节来存放）<h3 id="3-空字符"><a href="#3-空字符" class="headerlink" title="(3) 空字符"></a>(3) 空字符</h3><p>但以上是存在问题的，但是问题出在哪里呢？？？</p><p>问题出在代码写完了，操作系统应该如何来判断一个字符串的长度，在以上LOVE以及LOVE YOU 虽然只是对应四个字节以及八个字节，后面可能还会有几千个字节的长度的字符串，<code>所以需要一个特殊的转移字符来确定字符串的结束位置，这个转移字符就是\0。</code>它就如同生物学里面的氨基酸的终止密码子一般。</p>]]></content>
      
      
      <categories>
          
          <category> c语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符和字符串</title>
      <link href="/2022/11/10/NOnote/5/"/>
      <url>/2022/11/10/NOnote/5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="字符和字符串"><a href="#字符和字符串" class="headerlink" title="字符和字符串"></a>字符和字符串</h1><h2 id="1-区别"><a href="#1-区别" class="headerlink" title="1.区别"></a>1.区别</h2><p>字符就是<code>单个字符</code>，字符串就是<code>多个字符</code>的集合。</p><h2 id="2-字符"><a href="#2-字符" class="headerlink" title="2.字符"></a>2.字符</h2><h3 id="（1）用字符变量存放证整数"><a href="#（1）用字符变量存放证整数" class="headerlink" title="（1）用字符变量存放证整数"></a>（1）用字符变量存放证整数</h3><p>字符变量可以存放整数？这是为什么呢？来让我们看看下面这几行代码来进行理解。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> a =<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c\n%d\n&quot;</span>,a,a );</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印结果如下所示</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221109205016812.png" alt="image-20221109205016812"></p><p>对于上面的A的结果我们是毫无疑问的，但是为什么下面的结果用整形表示确实65呢？这就不得不提到莫斯密码了，其实所谓的字符也是根据查表的原理。而<code>这个表我们称为ASCII字符表</code>，其实字符也是特殊的整形。</p><h3 id="（2）ASCII字符表"><a href="#（2）ASCII字符表" class="headerlink" title="（2）ASCII字符表"></a>（2）ASCII字符表</h3><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/202301312219609.png" alt="image-20230131221900096"></p><p>根据表中内容可知A所对应的十进制数不正是65么。如果我们想用char先给abcd定义一个数字然后再进行%c打印出一个love，也可也通过查表进行实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> a=<span class="number">76</span>, b=<span class="number">79</span>, c=<span class="number">86</span>, d=<span class="number">69</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c%c%c%c&quot;</span>,a,b,c,d);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印的结果正是LOVE</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221109211652340.png" alt="image-20221109211652340"></p><h2 id="3-字符串"><a href="#3-字符串" class="headerlink" title="3.字符串"></a>3.字符串</h2><h3 id="（1）表示方式"><a href="#（1）表示方式" class="headerlink" title="（1）表示方式"></a>（1）表示方式</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> 变量名[数量]</span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span> name [<span class="number">5</span>];<span class="comment">//先声明字符串</span></span><br><span class="line">name[<span class="number">0</span>] = <span class="string">&#x27;L&#x27;</span>; <span class="comment">//给字符串赋值</span></span><br><span class="line">name[<span class="number">1</span>] = <span class="string">&#x27;O&#x27;</span>;</span><br><span class="line">name[<span class="number">2</span>] = <span class="string">&#x27;V&#x27;</span>;</span><br><span class="line">name[<span class="number">3</span>] = <span class="string">&#x27;E&#x27;</span>;</span><br><span class="line">name[<span class="number">4</span>] = <span class="string">&#x27;U&#x27;</span>;</span><br><span class="line"><span class="type">char</span> name [<span class="number">5</span>] =&#123;<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;O&#x27;</span>,<span class="string">&#x27;V&#x27;</span>,<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;U&#x27;</span>&#125;;<span class="comment">//定义字符串</span></span><br></pre></td></tr></table></figure><p>下面用串代码来表示下字符串的功能吧。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> a [<span class="number">5</span>]=&#123;<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;O&#x27;</span>,<span class="string">&#x27;V&#x27;</span>,<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;U&#x27;</span>&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, a);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面为打印结果</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221110135916834.png" alt="image-20221110135916834"></p><p>我们发现这个代码打印出来的结果出现了问题，在LOVEU后面出现了乱码，这是为什么呢？因为计算机不知道在U这里终止，就好比生物学里面没有终止密码子那个氨基酸的编译过程就不会停止，c语言里面也是如此，所以需要一个能够替代这个终止密码子的位置，那就是<code>空字符</code></p><h3 id="（2）空字符"><a href="#（2）空字符" class="headerlink" title="（2）空字符"></a>（2）空字符</h3><p>如果用空字符将上面代码到U终止的话，则需要给\0空出一个位置进行填充，代码如下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> a [<span class="number">6</span>]=&#123;<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;O&#x27;</span>,<span class="string">&#x27;V&#x27;</span>,<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;U&#x27;</span>,<span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, a);<span class="comment">//%c和%s一般用在printf、sprintf等字符串格式化函数中，用于决定格式化参数的数据类型，%s用来输出字符串，%c用来输出单个字符。</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这次就正常了，以下为打印结果</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221110140518987.png" alt="image-20221110140518987"></p>]]></content>
      
      
      <categories>
          
          <category> c语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sizeof运算符</title>
      <link href="/2022/11/10/NOnote/8/"/>
      <url>/2022/11/10/NOnote/8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-sizeof运算符"><a href="#1-sizeof运算符" class="headerlink" title="1.sizeof运算符"></a>1.sizeof运算符</h1><h2 id="1-功能"><a href="#1-功能" class="headerlink" title="(1) 功能"></a>(1) 功能</h2><p>sizeof运算符用于获得<code>数据类型</code>或<code>表达式</code>的长度</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sizeof</span>(object);<span class="comment">//sizeof（对象）</span></span><br><span class="line"><span class="keyword">sizeof</span>(type_name);<span class="comment">//sizeof（类型）</span></span><br><span class="line"><span class="keyword">sizeof</span> object;<span class="comment">//sizeof 对象</span></span><br></pre></td></tr></table></figure><p>以下用一行代码来进行演示sizeof的功能</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="type">int</span> a;</span><br><span class="line"> <span class="type">char</span> b;</span><br><span class="line"> <span class="type">float</span> c;</span><br><span class="line"> a=<span class="number">114514</span>;</span><br><span class="line"> b=<span class="string">&#x27;ATRL&#x27;</span>;</span><br><span class="line"> c=<span class="number">114514.1919810</span>;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;长度为%d\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;长度为%d\n&quot;</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;长度为%d\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;长度为%d\n&quot;</span>,<span class="keyword">sizeof</span> b);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;长度为%d\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="type">float</span>));</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;长度为%d\n&quot;</span>,<span class="keyword">sizeof</span> c);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印出来的结果如下图所示</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221109165240820.png" alt="image-20221109165240820"></p><h2 id="2-基本类型所占的字节大小"><a href="#2-基本类型所占的字节大小" class="headerlink" title="(2) 基本类型所占的字节大小"></a>(2) 基本类型所占的字节大小</h2><p>如何计算基本类型如int，short int，char ，float， _Bool(布尔类型), enum（枚举类型）的所占字节大小呢？我们可以依据上面所写代码为例子，利用sizeof计算相关数据类型所占的字节大小。</p><p>代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;short int 所占字节大小为%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">short</span> <span class="type">int</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;int 所占字节大小为%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;long int 所占字节大小为%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">long</span> <span class="type">int</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;long long int 所占字节大小为%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">long</span> <span class="type">long</span> <span class="type">int</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;float 所占字节大小为%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">float</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;double 所占字节大小为%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">double</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;long double 所占字节大小为%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">long</span> <span class="type">double</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;char 所占字节大小为%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;bool 所占字节大小为%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">bool</span>));</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后打印出来的结果如下</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221109171907493.png" alt="image-20221109171907493"></p><h1 id="2-signed和unsigned"><a href="#2-signed和unsigned" class="headerlink" title="2.signed和unsigned"></a>2.signed和unsigned</h1><h2 id="1-功能-1"><a href="#1-功能-1" class="headerlink" title="(1) 功能"></a>(1) 功能</h2><p>这一对属于<code>类型限定符</code>，是用于<code>限定char类型或者任何整型变量的取值范围</code>。</p><h2 id="2-区别"><a href="#2-区别" class="headerlink" title="(2) 区别"></a>(2) 区别</h2><p>signed表示该变量是<code>带符号位的</code>，unsigned表示改变量是<code>不带符号位的</code>。<code>带符号位表示该变量可以存放负数，而不带符号位的只能存放正数和零</code>，也就是说把存放负数的空间给腾出来存放更多的正数，所以unsigned可以存放更大的值。</p><p>因为signed还有unsigened的出现，四种整型可以被分为八种，也就是前面是否加signed或者unsigened。下面来用一串代码来演示以下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">short</span> a ;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> b ;</span><br><span class="line">a=<span class="number">-1</span>;</span><br><span class="line">b=<span class="number">-1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%u\n&quot;</span>,b);<span class="comment">//%u是输入输出格式说明符，表示按unsigned int格式输入或输出数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后打印出来的结果如下图所示</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221109173355780.png" alt="image-20221109173355780"></p><p>很显然上面的答案才是我们想要的结果，而下面的结果就特别奇怪，这是为什么呢？</p><h1 id="3-取值范围"><a href="#3-取值范围" class="headerlink" title="3.取值范围"></a>3.取值范围</h1><h2 id="1-基本数据类型的取值范围"><a href="#1-基本数据类型的取值范围" class="headerlink" title="(1)基本数据类型的取值范围"></a>(1)基本数据类型的取值范围</h2><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221109175452953.png" alt="image-20221109175452953"></p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221109175525517.png" alt="image-20221109175525517"></p>]]></content>
      
      
      <categories>
          
          <category> c语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言复习及学习相关笔记</title>
      <link href="/2022/11/03/NOnote/1/"/>
      <url>/2022/11/03/NOnote/1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="C语言复习及学习相关笔记"><a href="#C语言复习及学习相关笔记" class="headerlink" title="C语言复习及学习相关笔记"></a>C语言复习及学习相关笔记</h1><h2 id="一、C语言基础"><a href="#一、C语言基础" class="headerlink" title="一、C语言基础"></a>一、C语言基础</h2><h3 id="（1）c语言程序"><a href="#（1）c语言程序" class="headerlink" title="（1）c语言程序"></a>（1）c语言程序</h3><h4 id="1-内容"><a href="#1-内容" class="headerlink" title="1.内容"></a>1.内容</h4><p>C语言储蓄主要包含：<code>预处理器指令、函数、变量、语句、表达式、注释</code>等部分</p><h4 id="2-简单c语言程序"><a href="#2-简单c语言程序" class="headerlink" title="2.简单c语言程序"></a>2.简单c语言程序</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span><span class="comment">//预处理器指令</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span><span class="comment">//函数（主函数）</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello,world!\n&quot;</span>);<span class="comment">//printf函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;<span class="comment">//终止函数，返回值为0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（2）函数"><a href="#（2）函数" class="headerlink" title="（2）函数"></a>（2）函数</h3><h4 id="1-内容-1"><a href="#1-内容-1" class="headerlink" title="1.内容"></a>1.内容</h4><p>在知乎中，对于函数的定义是<code>一个功能的集合，它可以根据输入完成特写的功能，并将结果输出。</code>有时候函数只是为了实现一些特写功能而并不一定要有输入或输出。</p><h4 id="2-种类"><a href="#2-种类" class="headerlink" title="2.种类"></a>2.种类</h4><p>函数一般分为两种：库函数和自定义函数，库函数是c语言自带的函数，比如对于字符串的strcmp（）等，而自定义函数是我们自己定义的函数。<code>常见的库函数有IO函数、字符串操作函数、字符操作函数、内存操作函数、时间/日期函数、数学函数、其他库函数</code>。</p><p><strong>注意:使用库函数时必须包含#include对应的头文件</strong></p><p>就上面那串简单的代码</p><p>除了printf可以分为int（函数类型）、main（函数名）、（）、{}</p><h4 id="3-函数类型"><a href="#3-函数类型" class="headerlink" title="3.函数类型"></a>3.函数类型</h4><p>对于上面代码<code>int对应的含义是整形</code>，并作为函数类型在使用。常用的类型有short、int、long、char、float、double（c++中还有bool类型），它们也都可以作为函数的类型使用，含义分别如下表。</p><table><thead><tr><th>函数类型</th><th>含义</th></tr></thead><tbody><tr><td>short</td><td>短整形</td></tr><tr><td>long</td><td>长整型</td></tr><tr><td>char</td><td>字符</td></tr><tr><td>float</td><td>浮点型</td></tr><tr><td>double</td><td>双精度浮点型</td></tr><tr><td>bool</td><td>布尔型（判断真假）</td></tr></tbody></table><p>除了这几种之外还有一种类型是<strong>void</strong>类型；我们按照函数是否是void类型（是否有返回值）可以把函数分为两种：<code>1.void — 无返回值类型2.不是void的情况 — 有返回值类型</code></p><h4 id="4-有无返回值类型函数"><a href="#4-有无返回值类型函数" class="headerlink" title="4.有无返回值类型函数"></a>4.有无返回值类型函数</h4><p>我们来举个例子，并将代码运行来进行理解。</p><h5 id="”对于无返回类型的“"><a href="#”对于无返回类型的“" class="headerlink" title="”对于无返回类型的“"></a><strong>”对于无返回类型的“</strong></h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hello world\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下图</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221102000430896.png" alt="image-20221102000430896"></p><h5 id="“对于有返回类型的”"><a href="#“对于有返回类型的”" class="headerlink" title="“对于有返回类型的”"></a><strong>“对于有返回类型的”</strong></h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello,world!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下图</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221102000642704.png" alt="image-20221102000642704"></p><p>对于以上两种方式敲出来的代码所运行的结果是一致的！</p><h6 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h6><p>对于两种类型的函数的<code>本质区别就是少了返回值，但不一定没有return，return目的是结束函数</code>。</p><h4 id="5-函数名"><a href="#5-函数名" class="headerlink" title="5.函数名"></a>5.函数名</h4><h5 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h5><p>可以字母，数字，下划线混合使用的名称被称为函数名</p><h5 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h5><ol><li>只能以字母或下划线开始；</li><li>不能以数字开始；</li><li>一般小写；</li><li>关键字不允许用（比如说int float 之类的为保留字不允许用）；<br>但我们一般推荐函数名的命名规则为：</li></ol><h5 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h5><p>1.根据名称来知道函数的意义<br>2.自定义函数函数名首字母尽量大写（库函数里的函数名都是以小写字母定义，为了区分库函数和自定义函数，避免冲突）。</p><h4 id="6-有无参数类型函数"><a href="#6-有无参数类型函数" class="headerlink" title="6.有无参数类型函数"></a>6.有无参数类型函数</h4><h5 id="内容-1"><a href="#内容-1" class="headerlink" title="内容"></a>内容</h5><p>在（）内，按<code>是否有参数</code>分为两种函数；一般可以分为<code>有参类型和无参类型</code>。有参类型函数指的是在该函数被调用的时候，主调函数通过参数向里面传递了数据。无参类型函数很好理解，就是不向 函数内部传递数据，因为没有参数，无法获得返回值。主要介绍有参类型。</p><h5 id="有参类型"><a href="#有参类型" class="headerlink" title="有参类型"></a>有参类型</h5><p>先用简单的代码来做为一个例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">函数数据类型 函数名字(参数1， 参数2， 参数3，... , 参数n)</span><br><span class="line">&#123;</span><br><span class="line">   调用语句块;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数的数据类型要根据自己所赋的值来定义，如果需要定义为整数类型则需用到，short、int、long。其他同理</p><p>在此<code>自定义函数的（）内的参数被称为形式参数，即为形参</code>。而在<code>调用函数里面，括号后面的参数叫做实际参数，即为实参</code>，它可以是<code>常量，变量，表达式</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Define</span><span class="params">(<span class="type">int</span> a)</span><span class="comment">//括号内是形参 int a</span></span><br><span class="line">&#123;</span><br><span class="line">a = <span class="number">114514</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//调用函数时候形参必须和实参类型一致</span></span><br><span class="line">    <span class="type">int</span> a = <span class="number">1919810</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);<span class="comment">//括号内是实参 a</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1：在调用的时候，调用函数向参数传递的是值，在调用结束后，该值<code>不会改变</code>。<br>2：函数只有被调用后，系统才会给它分配内存。<br>3：调用结束后，系统给他分配的内存单元会立即被释放，但调用函数中的值不会改变<br>4：在主调函数把值传递给被调用函数后，被调用的函数里面可以直接使用这个值，但是要记住，<code>值的数据类型要和参数的数据类型一一对应</code>。<br>在调用函数的时候，从形参到实参发生的是<code>值传递</code>；也就是把实参的值拷贝一份副本给形参，在形参里面改变值并不会反向影响实参的值，也就是说这里的值是<code>单向传递</code>的：</p><p>就上面那串代码所打印的结果会是什么呢？让我们将它运行下吧！看下图</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221102205810841.png" alt="image-20221102205810841"></p><p>最好打印出来的结果是实参也就是printf函数里面的1919810，因为a=114514只能在Define内才能够成功生效，而不能在printf内生效。</p><h4 id="7函数体"><a href="#7函数体" class="headerlink" title="7函数体"></a>7函数体</h4><h5 id="内容-2"><a href="#内容-2" class="headerlink" title="内容"></a>内容</h5><p>这个很简单，就是在{}内的内容被称为函数体，主要是用来组成函数的定义。</p><h3 id="（3）system函数"><a href="#（3）system函数" class="headerlink" title="（3）system函数"></a>（3）system函数</h3><h4 id="1-内容-2"><a href="#1-内容-2" class="headerlink" title="1.内容"></a>1.内容</h4><p><code>能够发出一点DOS命令的函数</code>，用法为 int system(char *command); 目前system函数被收录在了标准c库中，可以直接调用。比如我们看下以下的例子。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span><span class="comment">//引用system函数的头文件</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;system学习\n&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;dir&quot;</span>);<span class="comment">//显示一共目录中的文件和子目录</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于以上的例子打印出来的结果如下图所示</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221103135142436.png" alt="image-20221103135142436"></p><p>对此，成功实现了dos命令中的dir，此命令也可也在cmd内进行执行，执行方法就是输入dir回车即可。常见的dos命令放在下图了。</p><h4 id="2-DOS操作命令"><a href="#2-DOS操作命令" class="headerlink" title="2.DOS操作命令"></a>2.DOS操作命令</h4><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/20180104101140706.jpg"></p><p>以上是一些DOS操作命令，对于DOS操作命令来说，它有很多有趣的地方，比如让电脑定时关机还有让电脑删除某些文件以及可以让电脑打开计算机还要一些应用程序等等功能。</p><h4 id="3-color命令"><a href="#3-color命令" class="headerlink" title="3.color命令"></a>3.color命令</h4><h5 id="内容-3"><a href="#内容-3" class="headerlink" title="内容"></a>内容</h5><p>可以利用此命令将命令框内的颜色进行改变，用法为system（“color xx”）颜色属性由两个十六进制数字指定 – 第一个为背景，第二个则为前景。每个数字可以为以下任何值之一。常见的如下所示</p><table><thead><tr><th align="left">颜色</th><th>数字</th></tr></thead><tbody><tr><td align="left">黑色</td><td>00</td></tr><tr><td align="left">蓝色</td><td>01</td></tr><tr><td align="left">绿色</td><td>02</td></tr><tr><td align="left">湖蓝色</td><td>03</td></tr><tr><td align="left">红色</td><td>04</td></tr><tr><td align="left">紫色</td><td>05</td></tr><tr><td align="left">黄色</td><td>06</td></tr><tr><td align="left">白色</td><td>07</td></tr><tr><td align="left">灰色</td><td>08</td></tr><tr><td align="left">淡蓝色</td><td>09</td></tr><tr><td align="left">淡绿色</td><td>A</td></tr><tr><td align="left">淡浅绿色</td><td>B</td></tr><tr><td align="left">淡红色</td><td>C</td></tr><tr><td align="left">淡紫色</td><td>D</td></tr><tr><td align="left">淡黄色</td><td>E</td></tr></tbody></table><p> <code>注意：一个程序中永远是最后一个system(“color xx”)起作用</code></p>]]></content>
      
      
      <categories>
          
          <category> c语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进制及定点数和浮点数</title>
      <link href="/2022/10/27/OCnote/1/"/>
      <url>/2022/10/27/OCnote/1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="进制及定点数和浮点数"><a href="#进制及定点数和浮点数" class="headerlink" title="进制及定点数和浮点数"></a>进制及定点数和浮点数</h1><h2 id="一，进制"><a href="#一，进制" class="headerlink" title="一，进制"></a>一，进制</h2><h4 id="（1）全国各地最熟悉也最习惯的进制–十进制数"><a href="#（1）全国各地最熟悉也最习惯的进制–十进制数" class="headerlink" title="（1）全国各地最熟悉也最习惯的进制–十进制数"></a>（1）全国各地最熟悉也最习惯的进制–十进制数</h4><h6 id="1-十进制"><a href="#1-十进制" class="headerlink" title="1.十进制"></a>1.十进制</h6><p>对于十进制的话就我们平常计数经常用的如1， 52 ，100这样类似的计数数字都是十进制数，计数规则是逢十进一（就是小学加法的那种+），<u><strong>它是由0~9共10给数码组成的</strong></u>，**<u>十进制数可用后缀D标识</u>**。</p><h6 id="2-基数"><a href="#2-基数" class="headerlink" title="2.基数"></a>2.基数</h6><p>我们经常把计数符号的个位数称为**<u>基数</u><strong>，常用符号</strong><u>R</u>**来表示。</p><h6 id="3-十进制数的权位展开式"><a href="#3-十进制数的权位展开式" class="headerlink" title="3.十进制数的权位展开式"></a>3.十进制数的权位展开式</h6><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221027130231975.png" alt="image-20221027130231975"></p><h6 id="4-十进制权位展开式的理解"><a href="#4-十进制权位展开式的理解" class="headerlink" title="4.十进制权位展开式的理解"></a>4.十进制权位展开式的理解</h6><p>式中Di取值范围为0≤Di≤R-1。n为整数部分的位数，m 为小数部分的位数。整数第i位的权是R^i-1^，小数点后第m位的权是R^-m^。此式表示的就是各符号与其所在位权值乘积的代数和。</p><h6 id="5-十进制对于计算机的局限"><a href="#5-十进制对于计算机的局限" class="headerlink" title="5.十进制对于计算机的局限"></a>5.十进制对于计算机的局限</h6><p>但是对于计算机而言的话，<u><strong>他仅仅只知道“0”和“1”也就是它处理数据用的二进制</strong></u>。</p><h4 id="（2）计算机所能理解的进制–二进制数"><a href="#（2）计算机所能理解的进制–二进制数" class="headerlink" title="（2）计算机所能理解的进制–二进制数"></a>（2）计算机所能理解的进制–二进制数</h4><h6 id="1-二进制"><a href="#1-二进制" class="headerlink" title="1.二进制"></a>1.二进制</h6><p>对于二进制他是计算机系统常用的数，如1011，1001这样类似的计数都是二进制，计数规则是逢二进一，**<u>它是又0，1这两个数码组成的</u>**。</p><h6 id="2-数据存储"><a href="#2-数据存储" class="headerlink" title="2.数据存储"></a>2.数据存储</h6><p>在计算机中，根据存储介质的物理特性，<u><strong>数据采用二进制进行存储的</strong></u>。<u><strong>数据最小的单位是比特（又名bit，b）</strong></u>，1bit就是表示一个二进制位。<u><strong>二进制数常用后缀B表示</strong></u></p><h6 id="3-常见信息量单位换算关系"><a href="#3-常见信息量单位换算关系" class="headerlink" title="3.常见信息量单位换算关系"></a>3.常见信息量单位换算关系</h6><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221027131907858.png" alt="image-20221027131907858"></p><h6 id="4-二进制的权位展开式"><a href="#4-二进制的权位展开式" class="headerlink" title="4.二进制的权位展开式"></a>4.二进制的权位展开式</h6><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221027132324355.png" alt="image-20221027132324355"></p><h6 id="5-局限性："><a href="#5-局限性：" class="headerlink" title="5.局限性："></a>5.局限性：</h6><p>通常表示一个较大的数，比较难以记忆而且复杂，因此诞生了八进制和十六进制。</p><h4 id="（3）人类为了偷懒而发明的进制–八进制数和十六进制数"><a href="#（3）人类为了偷懒而发明的进制–八进制数和十六进制数" class="headerlink" title="（3）人类为了偷懒而发明的进制–八进制数和十六进制数"></a>（3）人类为了偷懒而发明的进制–八进制数和十六进制数</h4><h6 id="1-八进制数"><a href="#1-八进制数" class="headerlink" title="1.八进制数"></a>1.八进制数</h6><p>八进制数<u><strong>它是由0~7八个数码组成</strong></u>，计数规则是逢八进一，<u><strong>常用后缀O标识</strong></u></p><h6 id="2-八进制数的表示"><a href="#2-八进制数的表示" class="headerlink" title="2.八进制数的表示"></a>2.八进制数的表示</h6><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221027133532077.png" alt="image-20221027133532077"></p><h6 id="3-十六进制数"><a href="#3-十六进制数" class="headerlink" title="3.十六进制数"></a>3.十六进制数</h6><p>十六进制数<u><strong>它是由0~F十六个数码组成</strong></u>，计数规则是逢十六进一<u><strong>其中A~F的等值十进制发别为10-15，</strong></u><u><strong>常用后缀H标识。</strong></u></p><h6 id="4-十六进制数的表示"><a href="#4-十六进制数的表示" class="headerlink" title="4.十六进制数的表示"></a>4.十六进制数的表示</h6><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221027134115801.png" alt="image-20221027134115801"></p><h2 id="二，进制的转换"><a href="#二，进制的转换" class="headerlink" title="二，进制的转换"></a>二，进制的转换</h2><p><em>注：先提到八，十六和二进制互转是为后面不熟悉到熟悉服务</em></p><h4 id="（1）八，十六进制和二进制互转"><a href="#（1）八，十六进制和二进制互转" class="headerlink" title="（1）八，十六进制和二进制互转"></a>（1）八，十六进制和二进制互转</h4><h6 id="1-二进制转换为八进制"><a href="#1-二进制转换为八进制" class="headerlink" title="1.二进制转换为八进制"></a>1.二进制转换为八进制</h6><p>（参考<a href="https://blog.csdn.net/weixin_47257473/article/details/122139807?ops_request_misc=%7B%22request_id%22:%22166684587616782417027259%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=166684587616782417027259&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-2-122139807-null-null.142%5Ev62%5Econtrol,201%5Ev3%5Econtrol_2,213%5Ev1%5Econtrol&utm_term=%E8%BF%9B%E5%88%B6&spm=1018.2226.3001.4187">(7条消息) 进制转化（二进制，八进制，十进制，十六进制）详细教程_李奇同学喵喵呜～的博客-CSDN博客</a>）</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221027135041190.png" alt="image-20221027135041190"></p><h6 id="2-八进制转换为二进制"><a href="#2-八进制转换为二进制" class="headerlink" title="2.八进制转换为二进制"></a>2.八进制转换为二进制</h6><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221027140100834.png" alt="image-20221027140100834"></p><h6 id="3-二进制转换为十六进制"><a href="#3-二进制转换为十六进制" class="headerlink" title="3.二进制转换为十六进制"></a>3.二进制转换为十六进制</h6><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221027140308894.png" alt="image-20221027140308894"></p><h6 id="4-十六进制转换为二进制"><a href="#4-十六进制转换为二进制" class="headerlink" title="4.十六进制转换为二进制"></a>4.十六进制转换为二进制</h6><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221027140403373.png" alt="image-20221027140403373"></p><h6 id="5-八进制转十六进制"><a href="#5-八进制转十六进制" class="headerlink" title="5.八进制转十六进制"></a>5.八进制转十六进制</h6><p><u><strong>总体思路是：1.八进制转二进制。2.二进制再转十六进制</strong></u>。</p><h6 id="6-对于转换的个人理解"><a href="#6-对于转换的个人理解" class="headerlink" title="6.对于转换的个人理解"></a>6.对于转换的个人理解</h6><p>对于为什么方法要划分为3个一组和4个一组，如<u><strong>八进制的话有8个数码也就是2^3^的数码对应的幂次数3不正是所要划分的组数吗</strong></u></p><h4 id="（2）熟悉到不熟悉以及不熟悉到熟悉"><a href="#（2）熟悉到不熟悉以及不熟悉到熟悉" class="headerlink" title="（2）熟悉到不熟悉以及不熟悉到熟悉"></a>（2）熟悉到不熟悉以及不熟悉到熟悉</h4><h6 id="1-十进制转换为二进制"><a href="#1-十进制转换为二进制" class="headerlink" title="1.十进制转换为二进制"></a>1.十进制转换为二进制</h6><h5 id="整数部分"><a href="#整数部分" class="headerlink" title="整数部分"></a><em><strong>整数部分</strong></em></h5><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>对此根据参考的博客，我们应该从<u><strong>权重</strong></u>去了解能够更简单的知道如何转换，比如随便给几个十进制数如下</p><table><thead><tr><th>十进制数</th><th>权重运算</th><th>二进制数</th></tr></thead><tbody><tr><td>15</td><td>15=1x2^0^+1x2^1^+1x2^2^+1x2^3^</td><td>1111</td></tr><tr><td>11</td><td>11=1x2^0^+1x2^1^+0x2^2^+1x2^3^</td><td>1011</td></tr><tr><td>65</td><td>65=1x2^0^+0x2^1^+0x2^2^+0x2^3^+0x2^4^+0x2^5^+1x2^6^</td><td>100001</td></tr></tbody></table><p><strong>权重</strong></p><p>正如上表所示像二进制整数部分从右到左的第一位到第n位的权重分别是2^0^,2^1^……，2^n-1^。</p><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>相对于方法一而言，方法二就略显复杂换算方法如下图所示</p><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/025f9c988f8145ff81552c36cfb02013.png" alt="img"></p><p><em><strong>小数部分</strong></em></p><p>对于小数部分的话比如<strong>10.25</strong></p><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>0.25我们先乘以2得到0.5，<strong>取整数部分0</strong>作为小数的第一位。再继续乘以2,0.5乘以2得到1.0，<strong>整数部分为1</strong>作为小数的第二位，此时由于小数部分已经为0，停止相乘。所以小数部分是01。整数部分如上面方法介绍可得为1010，我们结合起来，所以是1010.01。</p><h6 id="2-十进制转换为八，十六进制"><a href="#2-十进制转换为八，十六进制" class="headerlink" title="2.十进制转换为八，十六进制"></a>2.十进制转换为八，十六进制</h6><h4 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h4><p><u><strong>将十进制转换为二进制，再将二进制转换为十六，八进制即可</strong></u></p><h6 id="3-八，十六，二进制转换为十进制。"><a href="#3-八，十六，二进制转换为十进制。" class="headerlink" title="3.八，十六，二进制转换为十进制。"></a>3.八，十六，二进制转换为十进制。</h6><h4 id="方法-2"><a href="#方法-2" class="headerlink" title="方法"></a>方法</h4><p><strong><u>将八，十六进制转换为二进制，再将二进制转换为十进制即可</u></strong></p><h6 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h6><p>其实对于进制的转换最主要的还是二进制和十进制，<u><strong>无论是任何的复杂转换，二进制和十进制都是必要的媒介</strong></u></p><h2 id="三，定点数和浮点数"><a href="#三，定点数和浮点数" class="headerlink" title="三，定点数和浮点数"></a>三，定点数和浮点数</h2><h4 id="（1）定点数"><a href="#（1）定点数" class="headerlink" title="（1）定点数"></a>（1）定点数</h4><h6 id="1-什么是定点数"><a href="#1-什么是定点数" class="headerlink" title="1.什么是定点数"></a>1.什么是定点数</h6><p>我们都知道，数字既包括整数，又包括小数，而小数的精度范围要比整数大得多，所以如果我们想在计算机中，既能表示整数，也能表示小数，关键就在于这个<strong>小数点</strong>如何表示？于是人们想出一种方法，即<strong>约定计算机中小数点的位置</strong>，且这个位置固定不变，小数点前、后的数字，分别用二进制表示，然后组合起来就可以把这个数字在计算机中存储起来，这种表示方式叫做「定点」表示法，用这种方法表示的数字叫做「定点数」。</p><h6 id="2-定点的划分"><a href="#2-定点的划分" class="headerlink" title="2.定点的划分"></a>2.定点的划分</h6><p>由于定点数的**<u>小数点位置国定</u><strong>所以可以分为</strong><u>定点小数</u><strong>和</strong><u>定点整数</u>**</p><p><strong>定点小数</strong>：**<u>用于表示纯小数</u>**，小数点隐含固定在最高数据位的左边，整数位则用符号位。</p><p><strong>定点整数</strong>：**<u>用于表示纯整数</u>**，小数点位置隐含固定在最低位之后，最高位为符号位。</p><h6 id="3-什么是浮点数"><a href="#3-什么是浮点数" class="headerlink" title="3.什么是浮点数"></a>3.什么是浮点数</h6><p>以上关于定点数，其中「定点」指的是约定小数点位置固定不变。那浮点数的「浮点」就是指，其小数点的位置是可以是<strong>漂浮不定</strong>的。这怎么理解呢？</p><p>其实，浮点数是采用科学计数法的方式来表示的，例如十进制小数 8.345，用科学计数法表示，可以有多种方式：</p><p>8.345 = 8.345 * 10^0^<br>8.345 = 83.45 * 10^-1^<br>8.345 = 834.5 * 10^-2^</p><p>看到了吗？用这种科学计数法的方式表示小数时，小数点的位置就变得「漂浮不定」了，这就是相对于定点数，浮点数名字的由来。</p><h6 id="4-浮点数的表示"><a href="#4-浮点数的表示" class="headerlink" title="4.浮点数的表示"></a>4.浮点数的表示</h6><p><img src="https://luoxi2334.oss-cn-shanghai.aliyuncs.com/luoxi-picture/image-20221027151219805.png" alt="image-20221027151219805"></p><h6 id="5，浮点数表示的理解"><a href="#5，浮点数表示的理解" class="headerlink" title="5，浮点数表示的理解"></a>5，浮点数表示的理解</h6><p>其中，**<u>尾数M为定点小数</u><strong>。尾数的位数决定了浮点数有效数值的精度，</strong><u>尾数的符号代表了浮点数的正负</u><strong>，因此又称为</strong><u>数符</u>**。在机器中，为了方便浮点数大小的比较，通常将数符放置在浮点数的首位。<br>**<u>阶码 E为定点整数</u>**，阶码的数值大小决定了该浮点数实际小数点位置与尾数的小数点位置（隐含)之间的偏移量，阶码的位数多少决定了浮点数的表示范围。阶码的符号叫阶符。</p><p>**<u>阶码的底R一般为2、8或16</u>**，且隐含规定。根据IEEE 754国际标准，常用的浮点数</p><h6 id="6-常用的浮点数格式"><a href="#6-常用的浮点数格式" class="headerlink" title="6.常用的浮点数格式"></a>6.常用的浮点数格式</h6><table><thead><tr><th>类型</th><th>总位数</th><th>尾数位数</th><th>阶码位数</th><th>真值计算</th></tr></thead><tbody><tr><td>短实数</td><td>32</td><td>24</td><td>8</td><td>N=(-1)^M^X(1,M1,M2……Mn)X2^E-127^</td></tr><tr><td>长实数</td><td>64</td><td>53</td><td>11</td><td>N=(-1)^M^X(1,M1,M2……Mn)X2^E-1023^</td></tr><tr><td>临时实数</td><td>80</td><td>65</td><td>15</td><td>/</td></tr></tbody></table><p><em><strong>注：尾数位数含一位数符，阶位数含一位阶符</strong></em></p><h6 id="6-浮点数的规格化"><a href="#6-浮点数的规格化" class="headerlink" title="6.浮点数的规格化"></a>6.浮点数的规格化</h6><p>为了充分利用尾数的二进制数位来表示更多的有效数字，<u><strong>将尾数的绝对值限定在某个范</strong></u><br><u><strong>围之内，这种操作就叫浮点数的规格化。</strong></u><br>例如R=2，则规格化浮点数的尾数M应满足条件:最高有效位为1,即-1/2≤|M|≤1。为便于计算机硬件对尾数的机器数形式的规格化判断，通常采用下列方法实现判定：（1）对于原码表示的尾数，当最高有效位为1时，浮点数为规格化，即尾数为×.1×…×形式；<br>（2）对于补码表示的尾数，当符号位与最高有效位相异时，浮点数为规格化，即尾数为0.1×…×形式或者为1.0×…×形式。<br><strong>对于非规格化浮点数，可以通过修改阶码和左右移尾数的方法来使其变为规格化浮点数，这个过程叫作规格化。</strong><br><strong>尾数进行右移实现的规格化，则称为右规；尾数进行左移实现的规格化，则称为左规。</strong></p><h6 id="7-规格化浮点数的优点"><a href="#7-规格化浮点数的优点" class="headerlink" title="7.规格化浮点数的优点"></a>7.规格化浮点数的优点</h6><p>提高了浮点数据的精度；使程序能够更方便地交换浮点数据；可以使浮点数的运算更为简化。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
